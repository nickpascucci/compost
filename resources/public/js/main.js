var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__24502__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__24502 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24502__delegate.call(this, args);
    };
    G__24502.cljs$lang$maxFixedArity = 0;
    G__24502.cljs$lang$applyTo = function(arglist__24503) {
      var args = cljs.core.seq(arglist__24503);
      return G__24502__delegate(args);
    };
    G__24502.cljs$core$IFn$_invoke$arity$variadic = G__24502__delegate;
    return G__24502;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3437__auto__ = ty;
    if (cljs.core.truth_(and__3437__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3437__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4297__auto___24504 = len;
  var i_24505 = 0;
  while (true) {
    if (i_24505 < n__4297__auto___24504) {
      new_arr[i_24505] = arr[i_24505];
      var G__24506 = i_24505 + 1;
      i_24505 = G__24506;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__24507__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__24507 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24507__delegate.call(this, array, i, idxs);
    };
    G__24507.cljs$lang$maxFixedArity = 2;
    G__24507.cljs$lang$applyTo = function(arglist__24508) {
      var array = cljs.core.first(arglist__24508);
      arglist__24508 = cljs.core.next(arglist__24508);
      var i = cljs.core.first(arglist__24508);
      var idxs = cljs.core.rest(arglist__24508);
      return G__24507__delegate(array, i, idxs);
    };
    G__24507.cljs$core$IFn$_invoke$arity$variadic = G__24507__delegate;
    return G__24507;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__24509__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__24509 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24509__delegate.call(this, array, idx, idx2, idxv);
    };
    G__24509.cljs$lang$maxFixedArity = 3;
    G__24509.cljs$lang$applyTo = function(arglist__24510) {
      var array = cljs.core.first(arglist__24510);
      arglist__24510 = cljs.core.next(arglist__24510);
      var idx = cljs.core.first(arglist__24510);
      arglist__24510 = cljs.core.next(arglist__24510);
      var idx2 = cljs.core.first(arglist__24510);
      var idxv = cljs.core.rest(arglist__24510);
      return G__24509__delegate(array, idx, idx2, idxv);
    };
    G__24509.cljs$core$IFn$_invoke$arity$variadic = G__24509__delegate;
    return G__24509;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj24512 = {};
  return obj24512;
}();
cljs.core.IFn = function() {
  var obj24514 = {};
  return obj24514;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3437__auto__ = this$;
      if (and__3437__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4076__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3449__auto__ = cljs.core._invoke[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._invoke["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj24516 = {};
  return obj24516;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3437__auto__ = value;
    if (and__3437__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4076__auto__ = value == null ? null : value;
    return function() {
      var or__3449__auto__ = cljs.core._clone[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._clone["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj24518 = {};
  return obj24518;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._count[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._count["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj24520 = {};
  return obj24520;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._empty[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._empty["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj24522 = {};
  return obj24522;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._conj[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._conj["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj24524 = {};
  return obj24524;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3437__auto__ = coll;
      if (and__3437__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4076__auto__ = coll == null ? null : coll;
      return function() {
        var or__3449__auto__ = cljs.core._nth[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._nth["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3437__auto__ = coll;
      if (and__3437__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4076__auto__ = coll == null ? null : coll;
      return function() {
        var or__3449__auto__ = cljs.core._nth[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._nth["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj24526 = {};
  return obj24526;
}();
cljs.core.ISeq = function() {
  var obj24528 = {};
  return obj24528;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._first[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._first["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._rest[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._rest["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj24530 = {};
  return obj24530;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._next[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._next["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj24532 = {};
  return obj24532;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._lookup[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._lookup["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._lookup[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._lookup["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj24534 = {};
  return obj24534;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._assoc[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._assoc["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj24536 = {};
  return obj24536;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._dissoc[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._dissoc["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj24538 = {};
  return obj24538;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._key[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._key["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._val[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._val["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj24540 = {};
  return obj24540;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._disjoin[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._disjoin["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj24542 = {};
  return obj24542;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._peek[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._peek["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._pop[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._pop["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj24544 = {};
  return obj24544;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._assoc_n[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj24546 = {};
  return obj24546;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._deref[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._deref["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj24548 = {};
  return obj24548;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj24550 = {};
  return obj24550;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._meta[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._meta["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj24552 = {};
  return obj24552;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._with_meta[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._with_meta["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj24554 = {};
  return obj24554;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3437__auto__ = coll;
      if (and__3437__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4076__auto__ = coll == null ? null : coll;
      return function() {
        var or__3449__auto__ = cljs.core._reduce[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._reduce["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3437__auto__ = coll;
      if (and__3437__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4076__auto__ = coll == null ? null : coll;
      return function() {
        var or__3449__auto__ = cljs.core._reduce[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._reduce["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj24556 = {};
  return obj24556;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj24558 = {};
  return obj24558;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._equiv[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._equiv["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj24560 = {};
  return obj24560;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._hash[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._hash["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj24562 = {};
  return obj24562;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._seq[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._seq["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj24564 = {};
  return obj24564;
}();
cljs.core.IList = function() {
  var obj24566 = {};
  return obj24566;
}();
cljs.core.IRecord = function() {
  var obj24568 = {};
  return obj24568;
}();
cljs.core.IReversible = function() {
  var obj24570 = {};
  return obj24570;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._rseq[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._rseq["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj24572 = {};
  return obj24572;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._entry_key[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._entry_key["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._comparator[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._comparator["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj24574 = {};
  return obj24574;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3437__auto__ = writer;
    if (and__3437__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4076__auto__ = writer == null ? null : writer;
    return function() {
      var or__3449__auto__ = cljs.core._write[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._write["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3437__auto__ = writer;
    if (and__3437__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4076__auto__ = writer == null ? null : writer;
    return function() {
      var or__3449__auto__ = cljs.core._flush[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._flush["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj24576 = {};
  return obj24576;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._pr_writer[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj24578 = {};
  return obj24578;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3437__auto__ = d;
    if (and__3437__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4076__auto__ = d == null ? null : d;
    return function() {
      var or__3449__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj24580 = {};
  return obj24580;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3437__auto__ = this$;
    if (and__3437__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4076__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3449__auto__ = cljs.core._notify_watches[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3437__auto__ = this$;
    if (and__3437__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4076__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3449__auto__ = cljs.core._add_watch[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._add_watch["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3437__auto__ = this$;
    if (and__3437__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4076__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3449__auto__ = cljs.core._remove_watch[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj24582 = {};
  return obj24582;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._as_transient[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._as_transient["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj24584 = {};
  return obj24584;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj24586 = {};
  return obj24586;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj24588 = {};
  return obj24588;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj24590 = {};
  return obj24590;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj24592 = {};
  return obj24592;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3437__auto__ = tcoll;
    if (and__3437__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4076__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3449__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj24594 = {};
  return obj24594;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._compare[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._compare["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj24596 = {};
  return obj24596;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._drop_first[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._drop_first["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj24598 = {};
  return obj24598;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._chunked_first[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj24600 = {};
  return obj24600;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3437__auto__ = coll;
    if (and__3437__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4076__auto__ = coll == null ? null : coll;
    return function() {
      var or__3449__auto__ = cljs.core._chunked_next[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj24602 = {};
  return obj24602;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._name[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._name["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._namespace[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._namespace["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3437__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3437__auto__) {
        return b.ns;
      } else {
        return and__3437__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3860__auto__ = self__._hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__24604 = null;
  var G__24604__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__24604__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__24604 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24604__2.call(this, self__, coll);
      case 3:
        return G__24604__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__24604;
}();
cljs.core.Symbol.prototype.apply = function(self__, args24603) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24603)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__24606 = value;
  if (G__24606) {
    var bit__4099__auto__ = G__24606.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4099__auto__ || G__24606.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__24606.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__24606);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__24606);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__24608 = coll;
      if (G__24608) {
        var bit__4092__auto__ = G__24608.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4092__auto__ || G__24608.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__24610 = coll;
      if (G__24610) {
        var bit__4092__auto__ = G__24610.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4092__auto__ || G__24610.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__24612 = coll;
      if (G__24612) {
        var bit__4092__auto__ = G__24612.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4092__auto__ || G__24612.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__24614 = coll;
      if (G__24614) {
        var bit__4092__auto__ = G__24614.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4092__auto__ || G__24614.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__24615__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__24616 = y;
            var G__24617 = cljs.core.first.call(null, more);
            var G__24618 = cljs.core.next.call(null, more);
            x = G__24616;
            y = G__24617;
            more = G__24618;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24615 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24615__delegate.call(this, x, y, more);
    };
    G__24615.cljs$lang$maxFixedArity = 2;
    G__24615.cljs$lang$applyTo = function(arglist__24619) {
      var x = cljs.core.first(arglist__24619);
      arglist__24619 = cljs.core.next(arglist__24619);
      var y = cljs.core.first(arglist__24619);
      var more = cljs.core.rest(arglist__24619);
      return G__24615__delegate(x, y, more);
    };
    G__24615.cljs$core$IFn$_invoke$arity$variadic = G__24615__delegate;
    return G__24615;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__24620 = nval;
            var G__24621 = n + 1;
            val = G__24620;
            n = G__24621;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24622 = nval;
          var G__24623 = n + 1;
          val__$1 = G__24622;
          n = G__24623;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24624 = nval;
          var G__24625 = n + 1;
          val__$1 = G__24624;
          n = G__24625;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__24626 = nval;
            var G__24627 = n + 1;
            val = G__24626;
            n = G__24627;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24628 = nval;
          var G__24629 = n + 1;
          val__$1 = G__24628;
          n = G__24629;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24630 = nval;
          var G__24631 = n + 1;
          val__$1 = G__24630;
          n = G__24631;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__24633 = x;
  if (G__24633) {
    var bit__4099__auto__ = G__24633.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4099__auto__ || G__24633.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__24633.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__24633);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__24633);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__24635 = x;
  if (G__24635) {
    var bit__4099__auto__ = G__24635.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4099__auto__ || G__24635.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__24635.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__24635);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__24635);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__24636 = sn;
      s = G__24636;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__24637__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__24638 = conj.call(null, coll, x);
          var G__24639 = cljs.core.first.call(null, xs);
          var G__24640 = cljs.core.next.call(null, xs);
          coll = G__24638;
          x = G__24639;
          xs = G__24640;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__24637 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24637__delegate.call(this, coll, x, xs);
    };
    G__24637.cljs$lang$maxFixedArity = 2;
    G__24637.cljs$lang$applyTo = function(arglist__24641) {
      var coll = cljs.core.first(arglist__24641);
      arglist__24641 = cljs.core.next(arglist__24641);
      var x = cljs.core.first(arglist__24641);
      var xs = cljs.core.rest(arglist__24641);
      return G__24637__delegate(coll, x, xs);
    };
    G__24637.cljs$core$IFn$_invoke$arity$variadic = G__24637__delegate;
    return G__24637;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__24642 = cljs.core.next.call(null, s);
      var G__24643 = acc + 1;
      s = G__24642;
      acc = G__24643;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__24645 = coll;
      if (G__24645) {
        var bit__4092__auto__ = G__24645.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4092__auto__ || G__24645.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__24646 = cljs.core.next.call(null, coll);
              var G__24647 = n - 1;
              coll = G__24646;
              n = G__24647;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__24648 = cljs.core.next.call(null, coll);
              var G__24649 = n - 1;
              var G__24650 = not_found;
              coll = G__24648;
              n = G__24649;
              not_found = G__24650;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__24655 = coll;
        if (G__24655) {
          var bit__4092__auto__ = G__24655.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4092__auto__ || G__24655.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__24656 = coll;
                  if (G__24656) {
                    var bit__4099__auto__ = G__24656.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4099__auto__ || G__24656.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__24656.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24656);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24656);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__24657 = coll;
        if (G__24657) {
          var bit__4092__auto__ = G__24657.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4092__auto__ || G__24657.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__24658 = coll;
                  if (G__24658) {
                    var bit__4099__auto__ = G__24658.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4099__auto__ || G__24658.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__24658.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24658);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24658);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__24661 = o;
        if (G__24661) {
          var bit__4092__auto__ = G__24661.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4092__auto__ || G__24661.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__24662 = o;
        if (G__24662) {
          var bit__4092__auto__ = G__24662.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4092__auto__ || G__24662.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__24663__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__24664 = ret;
          var G__24665 = cljs.core.first.call(null, kvs);
          var G__24666 = cljs.core.second.call(null, kvs);
          var G__24667 = cljs.core.nnext.call(null, kvs);
          coll = G__24664;
          k = G__24665;
          v = G__24666;
          kvs = G__24667;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__24663 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24663__delegate.call(this, coll, k, v, kvs);
    };
    G__24663.cljs$lang$maxFixedArity = 3;
    G__24663.cljs$lang$applyTo = function(arglist__24668) {
      var coll = cljs.core.first(arglist__24668);
      arglist__24668 = cljs.core.next(arglist__24668);
      var k = cljs.core.first(arglist__24668);
      arglist__24668 = cljs.core.next(arglist__24668);
      var v = cljs.core.first(arglist__24668);
      var kvs = cljs.core.rest(arglist__24668);
      return G__24663__delegate(coll, k, v, kvs);
    };
    G__24663.cljs$core$IFn$_invoke$arity$variadic = G__24663__delegate;
    return G__24663;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__24669__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__24670 = ret;
            var G__24671 = cljs.core.first.call(null, ks);
            var G__24672 = cljs.core.next.call(null, ks);
            coll = G__24670;
            k = G__24671;
            ks = G__24672;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__24669 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24669__delegate.call(this, coll, k, ks);
    };
    G__24669.cljs$lang$maxFixedArity = 2;
    G__24669.cljs$lang$applyTo = function(arglist__24673) {
      var coll = cljs.core.first(arglist__24673);
      arglist__24673 = cljs.core.next(arglist__24673);
      var k = cljs.core.first(arglist__24673);
      var ks = cljs.core.rest(arglist__24673);
      return G__24669__delegate(coll, k, ks);
    };
    G__24669.cljs$core$IFn$_invoke$arity$variadic = G__24669__delegate;
    return G__24669;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3449__auto__ = goog.isFunction(f);
  if (or__3449__auto__) {
    return or__3449__auto__;
  } else {
    var G__24677 = f;
    if (G__24677) {
      var bit__4099__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3449__auto____$1 = bit__4099__auto__;
        if (cljs.core.truth_(or__3449__auto____$1)) {
          return or__3449__auto____$1;
        } else {
          return G__24677.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__24677.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__24677);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__24677);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__24685 = o;
    if (G__24685) {
      var bit__4099__auto__ = G__24685.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4099__auto__ || G__24685.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__24685.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24685);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24685);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t24686 !== "undefined") {
      } else {
        cljs.core.t24686 = function(meta, o, with_meta, meta24687) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta24687 = meta24687;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t24686.cljs$lang$type = true;
        cljs.core.t24686.cljs$lang$ctorStr = "cljs.core/t24686";
        cljs.core.t24686.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
          return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/t24686");
        };
        cljs.core.t24686.prototype.call = function() {
          var G__24690__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__24690 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__24690__delegate.call(this, self__, args);
          };
          G__24690.cljs$lang$maxFixedArity = 1;
          G__24690.cljs$lang$applyTo = function(arglist__24691) {
            var self__ = cljs.core.first(arglist__24691);
            var args = cljs.core.rest(arglist__24691);
            return G__24690__delegate(self__, args);
          };
          G__24690.cljs$core$IFn$_invoke$arity$variadic = G__24690__delegate;
          return G__24690;
        }();
        cljs.core.t24686.prototype.apply = function(self__, args24689) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24689)));
        };
        cljs.core.t24686.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__24692__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__24692 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__24692__delegate.call(this, args);
          };
          G__24692.cljs$lang$maxFixedArity = 0;
          G__24692.cljs$lang$applyTo = function(arglist__24693) {
            var args = cljs.core.seq(arglist__24693);
            return G__24692__delegate(args);
          };
          G__24692.cljs$core$IFn$_invoke$arity$variadic = G__24692__delegate;
          return G__24692;
        }();
        cljs.core.t24686.prototype.cljs$core$Fn$ = true;
        cljs.core.t24686.prototype.cljs$core$IMeta$_meta$arity$1 = function(_24688) {
          var self__ = this;
          var _24688__$1 = this;
          return self__.meta24687;
        };
        cljs.core.t24686.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_24688, meta24687__$1) {
          var self__ = this;
          var _24688__$1 = this;
          return new cljs.core.t24686(self__.meta, self__.o, self__.with_meta, meta24687__$1);
        };
        cljs.core.__GT_t24686 = function __GT_t24686(meta__$1, o__$1, with_meta__$1, meta24687) {
          return new cljs.core.t24686(meta__$1, o__$1, with_meta__$1, meta24687);
        };
      }
      return new cljs.core.t24686(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3437__auto__ = !(o == null);
    if (and__3437__auto__) {
      var G__24697 = o;
      if (G__24697) {
        var bit__4099__auto__ = G__24697.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4099__auto__ || G__24697.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__24697.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24697);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24697);
      }
    } else {
      return and__3437__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__24698__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__24699 = ret;
            var G__24700 = cljs.core.first.call(null, ks);
            var G__24701 = cljs.core.next.call(null, ks);
            coll = G__24699;
            k = G__24700;
            ks = G__24701;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__24698 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24698__delegate.call(this, coll, k, ks);
    };
    G__24698.cljs$lang$maxFixedArity = 2;
    G__24698.cljs$lang$applyTo = function(arglist__24702) {
      var coll = cljs.core.first(arglist__24702);
      arglist__24702 = cljs.core.next(arglist__24702);
      var k = cljs.core.first(arglist__24702);
      var ks = cljs.core.rest(arglist__24702);
      return G__24698__delegate(coll, k, ks);
    };
    G__24698.cljs$core$IFn$_invoke$arity$variadic = G__24698__delegate;
    return G__24698;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj24704 = {};
  return obj24704;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj24708 = {};
      return obj24708;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__24710 = o;
    if (G__24710) {
      var bit__4092__auto__ = G__24710.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4092__auto__ || G__24710.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24712 = x;
    if (G__24712) {
      var bit__4099__auto__ = G__24712.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4099__auto__ || G__24712.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__24712.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__24712);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__24712);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24714 = x;
    if (G__24714) {
      var bit__4099__auto__ = G__24714.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4099__auto__ || G__24714.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__24714.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__24714);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__24714);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__24716 = x;
  if (G__24716) {
    var bit__4099__auto__ = G__24716.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4099__auto__ || G__24716.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__24716.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__24716);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__24716);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__24718 = x;
  if (G__24718) {
    var bit__4099__auto__ = G__24718.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4099__auto__ || G__24718.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__24718.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__24718);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__24718);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__24720 = x;
  if (G__24720) {
    var bit__4099__auto__ = G__24720.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4099__auto__ || G__24720.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__24720.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__24720);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__24720);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__24722 = x;
  if (G__24722) {
    var bit__4099__auto__ = G__24722.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4099__auto__ || G__24722.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__24722.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__24722);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__24722);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24724 = x;
    if (G__24724) {
      var bit__4099__auto__ = G__24724.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4099__auto__ || G__24724.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__24724.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__24724);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__24724);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__24726 = x;
  if (G__24726) {
    var bit__4099__auto__ = G__24726.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4099__auto__ || G__24726.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__24726.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__24726);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__24726);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__24728 = x;
  if (G__24728) {
    var bit__4092__auto__ = G__24728.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4092__auto__ || G__24728.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj24732 = {};
    return obj24732;
  };
  var js_obj__1 = function() {
    var G__24733__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__24733 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24733__delegate.call(this, keyvals);
    };
    G__24733.cljs$lang$maxFixedArity = 0;
    G__24733.cljs$lang$applyTo = function(arglist__24734) {
      var keyvals = cljs.core.seq(arglist__24734);
      return G__24733__delegate(keyvals);
    };
    G__24733.cljs$core$IFn$_invoke$arity$variadic = G__24733__delegate;
    return G__24733;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__24735 = i__$1 + 1;
      var G__24736 = j__$1 + 1;
      var G__24737 = len__$1 - 1;
      i__$1 = G__24735;
      j__$1 = G__24736;
      len__$1 = G__24737;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__24738 = i__$1 - 1;
      var G__24739 = j__$1 - 1;
      var G__24740 = len__$1 - 1;
      i__$1 = G__24738;
      j__$1 = G__24739;
      len__$1 = G__24740;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj24742 = {};
  return obj24742;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__24744 = s;
    if (G__24744) {
      var bit__4099__auto__ = G__24744.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4099__auto__ || G__24744.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__24744.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24744);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24744);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__24746 = s;
  if (G__24746) {
    var bit__4099__auto__ = G__24746.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4099__auto__ || G__24746.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__24746.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__24746);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__24746);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3449__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3449__auto__) {
    return or__3449__auto__;
  } else {
    var G__24750 = f;
    if (G__24750) {
      var bit__4099__auto__ = G__24750.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4099__auto__ || G__24750.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__24750.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__24750);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__24750);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__24751__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__24752 = cljs.core.conj.call(null, s, x__$1);
              var G__24753 = etc;
              s = G__24752;
              xs = G__24753;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__24751 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24751__delegate.call(this, x, y, more);
    };
    G__24751.cljs$lang$maxFixedArity = 2;
    G__24751.cljs$lang$applyTo = function(arglist__24754) {
      var x = cljs.core.first(arglist__24754);
      arglist__24754 = cljs.core.next(arglist__24754);
      var y = cljs.core.first(arglist__24754);
      var more = cljs.core.rest(arglist__24754);
      return G__24751__delegate(x, y, more);
    };
    G__24751.cljs$core$IFn$_invoke$arity$variadic = G__24751__delegate;
    return G__24751;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3449__auto__ = cljs.core.seq.call(null, coll);
    if (or__3449__auto__) {
      return or__3449__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__24756 = x;
            if (G__24756) {
              var bit__4092__auto__ = G__24756.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4092__auto__ || G__24756.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__24757 = xs;
        var G__24758 = ys;
        var G__24759 = len;
        var G__24760 = n + 1;
        xs = G__24757;
        ys = G__24758;
        len = G__24759;
        n = G__24760;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24761 = nval;
          var G__24762 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__24761;
          coll__$1 = G__24762;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__24765 = coll;
      if (G__24765) {
        var bit__4092__auto__ = G__24765.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4092__auto__ || G__24765.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__24766 = coll;
      if (G__24766) {
        var bit__4092__auto__ = G__24766.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4092__auto__ || G__24766.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__24767__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__24767 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24767__delegate.call(this, x, y, more);
    };
    G__24767.cljs$lang$maxFixedArity = 2;
    G__24767.cljs$lang$applyTo = function(arglist__24768) {
      var x = cljs.core.first(arglist__24768);
      arglist__24768 = cljs.core.next(arglist__24768);
      var y = cljs.core.first(arglist__24768);
      var more = cljs.core.rest(arglist__24768);
      return G__24767__delegate(x, y, more);
    };
    G__24767.cljs$core$IFn$_invoke$arity$variadic = G__24767__delegate;
    return G__24767;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__24769__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__24769 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24769__delegate.call(this, x, y, more);
    };
    G__24769.cljs$lang$maxFixedArity = 2;
    G__24769.cljs$lang$applyTo = function(arglist__24770) {
      var x = cljs.core.first(arglist__24770);
      arglist__24770 = cljs.core.next(arglist__24770);
      var y = cljs.core.first(arglist__24770);
      var more = cljs.core.rest(arglist__24770);
      return G__24769__delegate(x, y, more);
    };
    G__24769.cljs$core$IFn$_invoke$arity$variadic = G__24769__delegate;
    return G__24769;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__24771__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__24771 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24771__delegate.call(this, x, y, more);
    };
    G__24771.cljs$lang$maxFixedArity = 2;
    G__24771.cljs$lang$applyTo = function(arglist__24772) {
      var x = cljs.core.first(arglist__24772);
      arglist__24772 = cljs.core.next(arglist__24772);
      var y = cljs.core.first(arglist__24772);
      var more = cljs.core.rest(arglist__24772);
      return G__24771__delegate(x, y, more);
    };
    G__24771.cljs$core$IFn$_invoke$arity$variadic = G__24771__delegate;
    return G__24771;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__24773__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__24773 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24773__delegate.call(this, x, y, more);
    };
    G__24773.cljs$lang$maxFixedArity = 2;
    G__24773.cljs$lang$applyTo = function(arglist__24774) {
      var x = cljs.core.first(arglist__24774);
      arglist__24774 = cljs.core.next(arglist__24774);
      var y = cljs.core.first(arglist__24774);
      var more = cljs.core.rest(arglist__24774);
      return G__24773__delegate(x, y, more);
    };
    G__24773.cljs$core$IFn$_invoke$arity$variadic = G__24773__delegate;
    return G__24773;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__24775__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__24776 = y;
            var G__24777 = cljs.core.first.call(null, more);
            var G__24778 = cljs.core.next.call(null, more);
            x = G__24776;
            y = G__24777;
            more = G__24778;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24775 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24775__delegate.call(this, x, y, more);
    };
    G__24775.cljs$lang$maxFixedArity = 2;
    G__24775.cljs$lang$applyTo = function(arglist__24779) {
      var x = cljs.core.first(arglist__24779);
      arglist__24779 = cljs.core.next(arglist__24779);
      var y = cljs.core.first(arglist__24779);
      var more = cljs.core.rest(arglist__24779);
      return G__24775__delegate(x, y, more);
    };
    G__24775.cljs$core$IFn$_invoke$arity$variadic = G__24775__delegate;
    return G__24775;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__24780__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__24781 = y;
            var G__24782 = cljs.core.first.call(null, more);
            var G__24783 = cljs.core.next.call(null, more);
            x = G__24781;
            y = G__24782;
            more = G__24783;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24780 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24780__delegate.call(this, x, y, more);
    };
    G__24780.cljs$lang$maxFixedArity = 2;
    G__24780.cljs$lang$applyTo = function(arglist__24784) {
      var x = cljs.core.first(arglist__24784);
      arglist__24784 = cljs.core.next(arglist__24784);
      var y = cljs.core.first(arglist__24784);
      var more = cljs.core.rest(arglist__24784);
      return G__24780__delegate(x, y, more);
    };
    G__24780.cljs$core$IFn$_invoke$arity$variadic = G__24780__delegate;
    return G__24780;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__24785__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__24786 = y;
            var G__24787 = cljs.core.first.call(null, more);
            var G__24788 = cljs.core.next.call(null, more);
            x = G__24786;
            y = G__24787;
            more = G__24788;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24785 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24785__delegate.call(this, x, y, more);
    };
    G__24785.cljs$lang$maxFixedArity = 2;
    G__24785.cljs$lang$applyTo = function(arglist__24789) {
      var x = cljs.core.first(arglist__24789);
      arglist__24789 = cljs.core.next(arglist__24789);
      var y = cljs.core.first(arglist__24789);
      var more = cljs.core.rest(arglist__24789);
      return G__24785__delegate(x, y, more);
    };
    G__24785.cljs$core$IFn$_invoke$arity$variadic = G__24785__delegate;
    return G__24785;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__24790__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__24791 = y;
            var G__24792 = cljs.core.first.call(null, more);
            var G__24793 = cljs.core.next.call(null, more);
            x = G__24791;
            y = G__24792;
            more = G__24793;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24790 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24790__delegate.call(this, x, y, more);
    };
    G__24790.cljs$lang$maxFixedArity = 2;
    G__24790.cljs$lang$applyTo = function(arglist__24794) {
      var x = cljs.core.first(arglist__24794);
      arglist__24794 = cljs.core.next(arglist__24794);
      var y = cljs.core.first(arglist__24794);
      var more = cljs.core.rest(arglist__24794);
      return G__24790__delegate(x, y, more);
    };
    G__24790.cljs$core$IFn$_invoke$arity$variadic = G__24790__delegate;
    return G__24790;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3756__auto__ = x;
    var y__3757__auto__ = y;
    return x__3756__auto__ > y__3757__auto__ ? x__3756__auto__ : y__3757__auto__;
  };
  var max__3 = function() {
    var G__24795__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3756__auto__ = x;
        var y__3757__auto__ = y;
        return x__3756__auto__ > y__3757__auto__ ? x__3756__auto__ : y__3757__auto__;
      }(), more);
    };
    var G__24795 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24795__delegate.call(this, x, y, more);
    };
    G__24795.cljs$lang$maxFixedArity = 2;
    G__24795.cljs$lang$applyTo = function(arglist__24796) {
      var x = cljs.core.first(arglist__24796);
      arglist__24796 = cljs.core.next(arglist__24796);
      var y = cljs.core.first(arglist__24796);
      var more = cljs.core.rest(arglist__24796);
      return G__24795__delegate(x, y, more);
    };
    G__24795.cljs$core$IFn$_invoke$arity$variadic = G__24795__delegate;
    return G__24795;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3763__auto__ = x;
    var y__3764__auto__ = y;
    return x__3763__auto__ < y__3764__auto__ ? x__3763__auto__ : y__3764__auto__;
  };
  var min__3 = function() {
    var G__24797__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3763__auto__ = x;
        var y__3764__auto__ = y;
        return x__3763__auto__ < y__3764__auto__ ? x__3763__auto__ : y__3764__auto__;
      }(), more);
    };
    var G__24797 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24797__delegate.call(this, x, y, more);
    };
    G__24797.cljs$lang$maxFixedArity = 2;
    G__24797.cljs$lang$applyTo = function(arglist__24798) {
      var x = cljs.core.first(arglist__24798);
      arglist__24798 = cljs.core.next(arglist__24798);
      var y = cljs.core.first(arglist__24798);
      var more = cljs.core.rest(arglist__24798);
      return G__24797__delegate(x, y, more);
    };
    G__24797.cljs$core$IFn$_invoke$arity$variadic = G__24797__delegate;
    return G__24797;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__24799__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__24799 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24799__delegate.call(this, x, y, more);
    };
    G__24799.cljs$lang$maxFixedArity = 2;
    G__24799.cljs$lang$applyTo = function(arglist__24800) {
      var x = cljs.core.first(arglist__24800);
      arglist__24800 = cljs.core.next(arglist__24800);
      var y = cljs.core.first(arglist__24800);
      var more = cljs.core.rest(arglist__24800);
      return G__24799__delegate(x, y, more);
    };
    G__24799.cljs$core$IFn$_invoke$arity$variadic = G__24799__delegate;
    return G__24799;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__24801__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__24801 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24801__delegate.call(this, x, y, more);
    };
    G__24801.cljs$lang$maxFixedArity = 2;
    G__24801.cljs$lang$applyTo = function(arglist__24802) {
      var x = cljs.core.first(arglist__24802);
      arglist__24802 = cljs.core.next(arglist__24802);
      var y = cljs.core.first(arglist__24802);
      var more = cljs.core.rest(arglist__24802);
      return G__24801__delegate(x, y, more);
    };
    G__24801.cljs$core$IFn$_invoke$arity$variadic = G__24801__delegate;
    return G__24801;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__24803__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__24803 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24803__delegate.call(this, x, y, more);
    };
    G__24803.cljs$lang$maxFixedArity = 2;
    G__24803.cljs$lang$applyTo = function(arglist__24804) {
      var x = cljs.core.first(arglist__24804);
      arglist__24804 = cljs.core.next(arglist__24804);
      var y = cljs.core.first(arglist__24804);
      var more = cljs.core.rest(arglist__24804);
      return G__24803__delegate(x, y, more);
    };
    G__24803.cljs$core$IFn$_invoke$arity$variadic = G__24803__delegate;
    return G__24803;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__24805__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__24805 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24805__delegate.call(this, x, y, more);
    };
    G__24805.cljs$lang$maxFixedArity = 2;
    G__24805.cljs$lang$applyTo = function(arglist__24806) {
      var x = cljs.core.first(arglist__24806);
      arglist__24806 = cljs.core.next(arglist__24806);
      var y = cljs.core.first(arglist__24806);
      var more = cljs.core.rest(arglist__24806);
      return G__24805__delegate(x, y, more);
    };
    G__24805.cljs$core$IFn$_invoke$arity$variadic = G__24805__delegate;
    return G__24805;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__24807__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__24807 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24807__delegate.call(this, x, y, more);
    };
    G__24807.cljs$lang$maxFixedArity = 2;
    G__24807.cljs$lang$applyTo = function(arglist__24808) {
      var x = cljs.core.first(arglist__24808);
      arglist__24808 = cljs.core.next(arglist__24808);
      var y = cljs.core.first(arglist__24808);
      var more = cljs.core.rest(arglist__24808);
      return G__24807__delegate(x, y, more);
    };
    G__24807.cljs$core$IFn$_invoke$arity$variadic = G__24807__delegate;
    return G__24807;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__24809__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__24809 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24809__delegate.call(this, x, y, more);
    };
    G__24809.cljs$lang$maxFixedArity = 2;
    G__24809.cljs$lang$applyTo = function(arglist__24810) {
      var x = cljs.core.first(arglist__24810);
      arglist__24810 = cljs.core.next(arglist__24810);
      var y = cljs.core.first(arglist__24810);
      var more = cljs.core.rest(arglist__24810);
      return G__24809__delegate(x, y, more);
    };
    G__24809.cljs$core$IFn$_invoke$arity$variadic = G__24809__delegate;
    return G__24809;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__24811__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__24811 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24811__delegate.call(this, x, y, more);
    };
    G__24811.cljs$lang$maxFixedArity = 2;
    G__24811.cljs$lang$applyTo = function(arglist__24812) {
      var x = cljs.core.first(arglist__24812);
      arglist__24812 = cljs.core.next(arglist__24812);
      var y = cljs.core.first(arglist__24812);
      var more = cljs.core.rest(arglist__24812);
      return G__24811__delegate(x, y, more);
    };
    G__24811.cljs$core$IFn$_invoke$arity$variadic = G__24811__delegate;
    return G__24811;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__24813__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__24814 = y;
            var G__24815 = cljs.core.first.call(null, more);
            var G__24816 = cljs.core.next.call(null, more);
            x = G__24814;
            y = G__24815;
            more = G__24816;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24813 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24813__delegate.call(this, x, y, more);
    };
    G__24813.cljs$lang$maxFixedArity = 2;
    G__24813.cljs$lang$applyTo = function(arglist__24817) {
      var x = cljs.core.first(arglist__24817);
      arglist__24817 = cljs.core.next(arglist__24817);
      var y = cljs.core.first(arglist__24817);
      var more = cljs.core.rest(arglist__24817);
      return G__24813__delegate(x, y, more);
    };
    G__24813.cljs$core$IFn$_invoke$arity$variadic = G__24813__delegate;
    return G__24813;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__24818 = n__$1 - 1;
      var G__24819 = cljs.core.next.call(null, xs);
      n__$1 = G__24818;
      xs = G__24819;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__24820__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__24821 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__24822 = cljs.core.next.call(null, more);
          sb = G__24821;
          more = G__24822;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__24820 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__24820__delegate.call(this, x, ys);
    };
    G__24820.cljs$lang$maxFixedArity = 1;
    G__24820.cljs$lang$applyTo = function(arglist__24823) {
      var x = cljs.core.first(arglist__24823);
      var ys = cljs.core.rest(arglist__24823);
      return G__24820__delegate(x, ys);
    };
    G__24820.cljs$core$IFn$_invoke$arity$variadic = G__24820__delegate;
    return G__24820;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__24824 = cljs.core.next.call(null, xs);
            var G__24825 = cljs.core.next.call(null, ys);
            xs = G__24824;
            ys = G__24825;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__24826 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__24827 = cljs.core.next.call(null, s);
        res = G__24826;
        s = G__24827;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__24828 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__24829 = cljs.core.next.call(null, s);
      h = G__24828;
      s = G__24829;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__24830 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__24831 = cljs.core.next.call(null, s__$1);
      h = G__24830;
      s__$1 = G__24831;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__24838_24844 = cljs.core.seq.call(null, fn_map);
  var chunk__24839_24845 = null;
  var count__24840_24846 = 0;
  var i__24841_24847 = 0;
  while (true) {
    if (i__24841_24847 < count__24840_24846) {
      var vec__24842_24848 = cljs.core._nth.call(null, chunk__24839_24845, i__24841_24847);
      var key_name_24849 = cljs.core.nth.call(null, vec__24842_24848, 0, null);
      var f_24850 = cljs.core.nth.call(null, vec__24842_24848, 1, null);
      var str_name_24851 = cljs.core.name.call(null, key_name_24849);
      obj[str_name_24851] = f_24850;
      var G__24852 = seq__24838_24844;
      var G__24853 = chunk__24839_24845;
      var G__24854 = count__24840_24846;
      var G__24855 = i__24841_24847 + 1;
      seq__24838_24844 = G__24852;
      chunk__24839_24845 = G__24853;
      count__24840_24846 = G__24854;
      i__24841_24847 = G__24855;
      continue;
    } else {
      var temp__4092__auto___24856 = cljs.core.seq.call(null, seq__24838_24844);
      if (temp__4092__auto___24856) {
        var seq__24838_24857__$1 = temp__4092__auto___24856;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24838_24857__$1)) {
          var c__4197__auto___24858 = cljs.core.chunk_first.call(null, seq__24838_24857__$1);
          var G__24859 = cljs.core.chunk_rest.call(null, seq__24838_24857__$1);
          var G__24860 = c__4197__auto___24858;
          var G__24861 = cljs.core.count.call(null, c__4197__auto___24858);
          var G__24862 = 0;
          seq__24838_24844 = G__24859;
          chunk__24839_24845 = G__24860;
          count__24840_24846 = G__24861;
          i__24841_24847 = G__24862;
          continue;
        } else {
          var vec__24843_24863 = cljs.core.first.call(null, seq__24838_24857__$1);
          var key_name_24864 = cljs.core.nth.call(null, vec__24843_24863, 0, null);
          var f_24865 = cljs.core.nth.call(null, vec__24843_24863, 1, null);
          var str_name_24866 = cljs.core.name.call(null, key_name_24864);
          obj[str_name_24866] = f_24865;
          var G__24867 = cljs.core.next.call(null, seq__24838_24857__$1);
          var G__24868 = null;
          var G__24869 = 0;
          var G__24870 = 0;
          seq__24838_24844 = G__24867;
          chunk__24839_24845 = G__24868;
          count__24840_24846 = G__24869;
          i__24841_24847 = G__24870;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__24872 = coll;
  if (G__24872) {
    var bit__4099__auto__ = G__24872.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4099__auto__ || G__24872.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__24872.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__24872);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__24872);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__24873 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__24873;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__24874 = i - 1;
        var G__24875 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__24874;
        r = G__24875;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__24876) {
    var xs = cljs.core.seq(arglist__24876);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3449__auto__ = coll == null;
    if (or__3449__auto__) {
      return or__3449__auto__;
    } else {
      var G__24880 = coll;
      if (G__24880) {
        var bit__4092__auto__ = G__24880.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4092__auto__ || G__24880.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__24882 = x;
  if (G__24882) {
    var bit__4099__auto__ = G__24882.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4099__auto__ || G__24882.cljs$core$IList$) {
      return true;
    } else {
      if (!G__24882.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__24882);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__24882);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__24884 = null;
  var G__24884__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__24884__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__24884 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24884__2.call(this, self__, coll);
      case 3:
        return G__24884__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__24884;
}();
cljs.core.Keyword.prototype.apply = function(self__, args24883) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24883)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__24886 = x;
    if (G__24886) {
      var bit__4092__auto__ = G__24886.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4092__auto__ || G__24886.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__24887 = ls.sval();
        ls = G__24887;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__24889 = s;
    if (G__24889) {
      var bit__4092__auto__ = G__24889.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4092__auto__ || G__24889.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__24890 = cljs.core.next.call(null, s__$1);
      s__$1 = G__24890;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_24891 = 0;
  var xs_24892 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_24892) {
      ret[i_24891] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_24892));
      var G__24893 = i_24891 + 1;
      var G__24894 = cljs.core.next.call(null, xs_24892);
      i_24891 = G__24893;
      xs_24892 = G__24894;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24895 = i + 1;
          var G__24896 = cljs.core.next.call(null, s__$1);
          i = G__24895;
          s__$1 = G__24896;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4297__auto___24897 = size;
      var i_24898 = 0;
      while (true) {
        if (i_24898 < n__4297__auto___24897) {
          a[i_24898] = init_val_or_seq;
          var G__24899 = i_24898 + 1;
          i_24898 = G__24899;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24900 = i + 1;
          var G__24901 = cljs.core.next.call(null, s__$1);
          i = G__24900;
          s__$1 = G__24901;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4297__auto___24902 = size;
      var i_24903 = 0;
      while (true) {
        if (i_24903 < n__4297__auto___24902) {
          a[i_24903] = init_val_or_seq;
          var G__24904 = i_24903 + 1;
          i_24903 = G__24904;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24905 = i + 1;
          var G__24906 = cljs.core.next.call(null, s__$1);
          i = G__24905;
          s__$1 = G__24906;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4297__auto___24907 = size;
      var i_24908 = 0;
      while (true) {
        if (i_24908 < n__4297__auto___24907) {
          a[i_24908] = init_val_or_seq;
          var G__24909 = i_24908 + 1;
          i_24908 = G__24909;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24910 = i + 1;
          var G__24911 = cljs.core.next.call(null, s__$1);
          i = G__24910;
          s__$1 = G__24911;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4297__auto___24912 = size;
      var i_24913 = 0;
      while (true) {
        if (i_24913 < n__4297__auto___24912) {
          a[i_24913] = init_val_or_seq;
          var G__24914 = i_24913 + 1;
          i_24913 = G__24914;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__24915 = cljs.core.next.call(null, s__$1);
        var G__24916 = i - 1;
        var G__24917 = sum + 1;
        s__$1 = G__24915;
        i = G__24916;
        sum = G__24917;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__24918__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__24918 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24918__delegate.call(this, x, y, zs);
    };
    G__24918.cljs$lang$maxFixedArity = 2;
    G__24918.cljs$lang$applyTo = function(arglist__24919) {
      var x = cljs.core.first(arglist__24919);
      arglist__24919 = cljs.core.next(arglist__24919);
      var y = cljs.core.first(arglist__24919);
      var zs = cljs.core.rest(arglist__24919);
      return G__24918__delegate(x, y, zs);
    };
    G__24918.cljs$core$IFn$_invoke$arity$variadic = G__24918__delegate;
    return G__24918;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__24920__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__24920 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24920__delegate.call(this, a, b, c, d, more);
    };
    G__24920.cljs$lang$maxFixedArity = 4;
    G__24920.cljs$lang$applyTo = function(arglist__24921) {
      var a = cljs.core.first(arglist__24921);
      arglist__24921 = cljs.core.next(arglist__24921);
      var b = cljs.core.first(arglist__24921);
      arglist__24921 = cljs.core.next(arglist__24921);
      var c = cljs.core.first(arglist__24921);
      arglist__24921 = cljs.core.next(arglist__24921);
      var d = cljs.core.first(arglist__24921);
      var more = cljs.core.rest(arglist__24921);
      return G__24920__delegate(a, b, c, d, more);
    };
    G__24920.cljs$core$IFn$_invoke$arity$variadic = G__24920__delegate;
    return G__24920;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__24922__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__24923 = ntcoll;
          var G__24924 = cljs.core.first.call(null, vals);
          var G__24925 = cljs.core.next.call(null, vals);
          tcoll = G__24923;
          val = G__24924;
          vals = G__24925;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24922 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24922__delegate.call(this, tcoll, val, vals);
    };
    G__24922.cljs$lang$maxFixedArity = 2;
    G__24922.cljs$lang$applyTo = function(arglist__24926) {
      var tcoll = cljs.core.first(arglist__24926);
      arglist__24926 = cljs.core.next(arglist__24926);
      var val = cljs.core.first(arglist__24926);
      var vals = cljs.core.rest(arglist__24926);
      return G__24922__delegate(tcoll, val, vals);
    };
    G__24922.cljs$core$IFn$_invoke$arity$variadic = G__24922__delegate;
    return G__24922;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__24927__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__24928 = ntcoll;
          var G__24929 = cljs.core.first.call(null, kvs);
          var G__24930 = cljs.core.second.call(null, kvs);
          var G__24931 = cljs.core.nnext.call(null, kvs);
          tcoll = G__24928;
          key = G__24929;
          val = G__24930;
          kvs = G__24931;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24927 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24927__delegate.call(this, tcoll, key, val, kvs);
    };
    G__24927.cljs$lang$maxFixedArity = 3;
    G__24927.cljs$lang$applyTo = function(arglist__24932) {
      var tcoll = cljs.core.first(arglist__24932);
      arglist__24932 = cljs.core.next(arglist__24932);
      var key = cljs.core.first(arglist__24932);
      arglist__24932 = cljs.core.next(arglist__24932);
      var val = cljs.core.first(arglist__24932);
      var kvs = cljs.core.rest(arglist__24932);
      return G__24927__delegate(tcoll, key, val, kvs);
    };
    G__24927.cljs$core$IFn$_invoke$arity$variadic = G__24927__delegate;
    return G__24927;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__24933__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__24934 = ntcoll;
          var G__24935 = cljs.core.first.call(null, ks);
          var G__24936 = cljs.core.next.call(null, ks);
          tcoll = G__24934;
          key = G__24935;
          ks = G__24936;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24933 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24933__delegate.call(this, tcoll, key, ks);
    };
    G__24933.cljs$lang$maxFixedArity = 2;
    G__24933.cljs$lang$applyTo = function(arglist__24937) {
      var tcoll = cljs.core.first(arglist__24937);
      arglist__24937 = cljs.core.next(arglist__24937);
      var key = cljs.core.first(arglist__24937);
      var ks = cljs.core.rest(arglist__24937);
      return G__24933__delegate(tcoll, key, ks);
    };
    G__24933.cljs$core$IFn$_invoke$arity$variadic = G__24933__delegate;
    return G__24933;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__24938__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__24939 = ntcoll;
          var G__24940 = cljs.core.first.call(null, vals);
          var G__24941 = cljs.core.next.call(null, vals);
          tcoll = G__24939;
          val = G__24940;
          vals = G__24941;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24938 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24938__delegate.call(this, tcoll, val, vals);
    };
    G__24938.cljs$lang$maxFixedArity = 2;
    G__24938.cljs$lang$applyTo = function(arglist__24942) {
      var tcoll = cljs.core.first(arglist__24942);
      arglist__24942 = cljs.core.next(arglist__24942);
      var val = cljs.core.first(arglist__24942);
      var vals = cljs.core.rest(arglist__24942);
      return G__24938__delegate(tcoll, val, vals);
    };
    G__24938.cljs$core$IFn$_invoke$arity$variadic = G__24938__delegate;
    return G__24938;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__24943__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__24943 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__24943__delegate.call(this, f, a, b, c, d, args);
    };
    G__24943.cljs$lang$maxFixedArity = 5;
    G__24943.cljs$lang$applyTo = function(arglist__24944) {
      var f = cljs.core.first(arglist__24944);
      arglist__24944 = cljs.core.next(arglist__24944);
      var a = cljs.core.first(arglist__24944);
      arglist__24944 = cljs.core.next(arglist__24944);
      var b = cljs.core.first(arglist__24944);
      arglist__24944 = cljs.core.next(arglist__24944);
      var c = cljs.core.first(arglist__24944);
      arglist__24944 = cljs.core.next(arglist__24944);
      var d = cljs.core.first(arglist__24944);
      var args = cljs.core.rest(arglist__24944);
      return G__24943__delegate(f, a, b, c, d, args);
    };
    G__24943.cljs$core$IFn$_invoke$arity$variadic = G__24943__delegate;
    return G__24943;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__24945__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__24945 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__24945__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__24945.cljs$lang$maxFixedArity = 6;
    G__24945.cljs$lang$applyTo = function(arglist__24946) {
      var obj = cljs.core.first(arglist__24946);
      arglist__24946 = cljs.core.next(arglist__24946);
      var f = cljs.core.first(arglist__24946);
      arglist__24946 = cljs.core.next(arglist__24946);
      var a = cljs.core.first(arglist__24946);
      arglist__24946 = cljs.core.next(arglist__24946);
      var b = cljs.core.first(arglist__24946);
      arglist__24946 = cljs.core.next(arglist__24946);
      var c = cljs.core.first(arglist__24946);
      arglist__24946 = cljs.core.next(arglist__24946);
      var d = cljs.core.first(arglist__24946);
      var args = cljs.core.rest(arglist__24946);
      return G__24945__delegate(obj, f, a, b, c, d, args);
    };
    G__24945.cljs$core$IFn$_invoke$arity$variadic = G__24945__delegate;
    return G__24945;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__24947__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__24947 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24947__delegate.call(this, x, y, more);
    };
    G__24947.cljs$lang$maxFixedArity = 2;
    G__24947.cljs$lang$applyTo = function(arglist__24948) {
      var x = cljs.core.first(arglist__24948);
      arglist__24948 = cljs.core.next(arglist__24948);
      var y = cljs.core.first(arglist__24948);
      var more = cljs.core.rest(arglist__24948);
      return G__24947__delegate(x, y, more);
    };
    G__24947.cljs$core$IFn$_invoke$arity$variadic = G__24947__delegate;
    return G__24947;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__24949 = pred;
        var G__24950 = cljs.core.next.call(null, coll);
        pred = G__24949;
        coll = G__24950;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3449__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3449__auto__)) {
        return or__3449__auto__;
      } else {
        var G__24951 = pred;
        var G__24952 = cljs.core.next.call(null, coll);
        pred = G__24951;
        coll = G__24952;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__24953 = null;
    var G__24953__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__24953__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__24953__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__24953__3 = function() {
      var G__24954__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__24954 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__24954__delegate.call(this, x, y, zs);
      };
      G__24954.cljs$lang$maxFixedArity = 2;
      G__24954.cljs$lang$applyTo = function(arglist__24955) {
        var x = cljs.core.first(arglist__24955);
        arglist__24955 = cljs.core.next(arglist__24955);
        var y = cljs.core.first(arglist__24955);
        var zs = cljs.core.rest(arglist__24955);
        return G__24954__delegate(x, y, zs);
      };
      G__24954.cljs$core$IFn$_invoke$arity$variadic = G__24954__delegate;
      return G__24954;
    }();
    G__24953 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__24953__0.call(this);
        case 1:
          return G__24953__1.call(this, x);
        case 2:
          return G__24953__2.call(this, x, y);
        default:
          return G__24953__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__24953.cljs$lang$maxFixedArity = 2;
    G__24953.cljs$lang$applyTo = G__24953__3.cljs$lang$applyTo;
    return G__24953;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__24956__delegate = function(args) {
      return x;
    };
    var G__24956 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24956__delegate.call(this, args);
    };
    G__24956.cljs$lang$maxFixedArity = 0;
    G__24956.cljs$lang$applyTo = function(arglist__24957) {
      var args = cljs.core.seq(arglist__24957);
      return G__24956__delegate(args);
    };
    G__24956.cljs$core$IFn$_invoke$arity$variadic = G__24956__delegate;
    return G__24956;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__24958 = null;
      var G__24958__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__24958__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__24958__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__24958__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__24958__4 = function() {
        var G__24959__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__24959 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24959__delegate.call(this, x, y, z, args);
        };
        G__24959.cljs$lang$maxFixedArity = 3;
        G__24959.cljs$lang$applyTo = function(arglist__24960) {
          var x = cljs.core.first(arglist__24960);
          arglist__24960 = cljs.core.next(arglist__24960);
          var y = cljs.core.first(arglist__24960);
          arglist__24960 = cljs.core.next(arglist__24960);
          var z = cljs.core.first(arglist__24960);
          var args = cljs.core.rest(arglist__24960);
          return G__24959__delegate(x, y, z, args);
        };
        G__24959.cljs$core$IFn$_invoke$arity$variadic = G__24959__delegate;
        return G__24959;
      }();
      G__24958 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24958__0.call(this);
          case 1:
            return G__24958__1.call(this, x);
          case 2:
            return G__24958__2.call(this, x, y);
          case 3:
            return G__24958__3.call(this, x, y, z);
          default:
            return G__24958__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24958.cljs$lang$maxFixedArity = 3;
      G__24958.cljs$lang$applyTo = G__24958__4.cljs$lang$applyTo;
      return G__24958;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__24961 = null;
      var G__24961__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__24961__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__24961__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__24961__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__24961__4 = function() {
        var G__24962__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__24962 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24962__delegate.call(this, x, y, z, args);
        };
        G__24962.cljs$lang$maxFixedArity = 3;
        G__24962.cljs$lang$applyTo = function(arglist__24963) {
          var x = cljs.core.first(arglist__24963);
          arglist__24963 = cljs.core.next(arglist__24963);
          var y = cljs.core.first(arglist__24963);
          arglist__24963 = cljs.core.next(arglist__24963);
          var z = cljs.core.first(arglist__24963);
          var args = cljs.core.rest(arglist__24963);
          return G__24962__delegate(x, y, z, args);
        };
        G__24962.cljs$core$IFn$_invoke$arity$variadic = G__24962__delegate;
        return G__24962;
      }();
      G__24961 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24961__0.call(this);
          case 1:
            return G__24961__1.call(this, x);
          case 2:
            return G__24961__2.call(this, x, y);
          case 3:
            return G__24961__3.call(this, x, y, z);
          default:
            return G__24961__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24961.cljs$lang$maxFixedArity = 3;
      G__24961.cljs$lang$applyTo = G__24961__4.cljs$lang$applyTo;
      return G__24961;
    }();
  };
  var comp__4 = function() {
    var G__24964__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__24965__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__24966 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__24967 = cljs.core.next.call(null, fs__$2);
              ret = G__24966;
              fs__$2 = G__24967;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__24965 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__24965__delegate.call(this, args);
        };
        G__24965.cljs$lang$maxFixedArity = 0;
        G__24965.cljs$lang$applyTo = function(arglist__24968) {
          var args = cljs.core.seq(arglist__24968);
          return G__24965__delegate(args);
        };
        G__24965.cljs$core$IFn$_invoke$arity$variadic = G__24965__delegate;
        return G__24965;
      }();
    };
    var G__24964 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24964__delegate.call(this, f1, f2, f3, fs);
    };
    G__24964.cljs$lang$maxFixedArity = 3;
    G__24964.cljs$lang$applyTo = function(arglist__24969) {
      var f1 = cljs.core.first(arglist__24969);
      arglist__24969 = cljs.core.next(arglist__24969);
      var f2 = cljs.core.first(arglist__24969);
      arglist__24969 = cljs.core.next(arglist__24969);
      var f3 = cljs.core.first(arglist__24969);
      var fs = cljs.core.rest(arglist__24969);
      return G__24964__delegate(f1, f2, f3, fs);
    };
    G__24964.cljs$core$IFn$_invoke$arity$variadic = G__24964__delegate;
    return G__24964;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__24970__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__24970 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24970__delegate.call(this, args);
      };
      G__24970.cljs$lang$maxFixedArity = 0;
      G__24970.cljs$lang$applyTo = function(arglist__24971) {
        var args = cljs.core.seq(arglist__24971);
        return G__24970__delegate(args);
      };
      G__24970.cljs$core$IFn$_invoke$arity$variadic = G__24970__delegate;
      return G__24970;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__24972__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__24972 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24972__delegate.call(this, args);
      };
      G__24972.cljs$lang$maxFixedArity = 0;
      G__24972.cljs$lang$applyTo = function(arglist__24973) {
        var args = cljs.core.seq(arglist__24973);
        return G__24972__delegate(args);
      };
      G__24972.cljs$core$IFn$_invoke$arity$variadic = G__24972__delegate;
      return G__24972;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__24974__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__24974 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24974__delegate.call(this, args);
      };
      G__24974.cljs$lang$maxFixedArity = 0;
      G__24974.cljs$lang$applyTo = function(arglist__24975) {
        var args = cljs.core.seq(arglist__24975);
        return G__24974__delegate(args);
      };
      G__24974.cljs$core$IFn$_invoke$arity$variadic = G__24974__delegate;
      return G__24974;
    }();
  };
  var partial__5 = function() {
    var G__24976__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__24977__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__24977 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__24977__delegate.call(this, args);
        };
        G__24977.cljs$lang$maxFixedArity = 0;
        G__24977.cljs$lang$applyTo = function(arglist__24978) {
          var args = cljs.core.seq(arglist__24978);
          return G__24977__delegate(args);
        };
        G__24977.cljs$core$IFn$_invoke$arity$variadic = G__24977__delegate;
        return G__24977;
      }();
    };
    var G__24976 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24976__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__24976.cljs$lang$maxFixedArity = 4;
    G__24976.cljs$lang$applyTo = function(arglist__24979) {
      var f = cljs.core.first(arglist__24979);
      arglist__24979 = cljs.core.next(arglist__24979);
      var arg1 = cljs.core.first(arglist__24979);
      arglist__24979 = cljs.core.next(arglist__24979);
      var arg2 = cljs.core.first(arglist__24979);
      arglist__24979 = cljs.core.next(arglist__24979);
      var arg3 = cljs.core.first(arglist__24979);
      var more = cljs.core.rest(arglist__24979);
      return G__24976__delegate(f, arg1, arg2, arg3, more);
    };
    G__24976.cljs$core$IFn$_invoke$arity$variadic = G__24976__delegate;
    return G__24976;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__24980 = null;
      var G__24980__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__24980__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__24980__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__24980__4 = function() {
        var G__24981__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__24981 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24981__delegate.call(this, a, b, c, ds);
        };
        G__24981.cljs$lang$maxFixedArity = 3;
        G__24981.cljs$lang$applyTo = function(arglist__24982) {
          var a = cljs.core.first(arglist__24982);
          arglist__24982 = cljs.core.next(arglist__24982);
          var b = cljs.core.first(arglist__24982);
          arglist__24982 = cljs.core.next(arglist__24982);
          var c = cljs.core.first(arglist__24982);
          var ds = cljs.core.rest(arglist__24982);
          return G__24981__delegate(a, b, c, ds);
        };
        G__24981.cljs$core$IFn$_invoke$arity$variadic = G__24981__delegate;
        return G__24981;
      }();
      G__24980 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__24980__1.call(this, a);
          case 2:
            return G__24980__2.call(this, a, b);
          case 3:
            return G__24980__3.call(this, a, b, c);
          default:
            return G__24980__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24980.cljs$lang$maxFixedArity = 3;
      G__24980.cljs$lang$applyTo = G__24980__4.cljs$lang$applyTo;
      return G__24980;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__24983 = null;
      var G__24983__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__24983__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__24983__4 = function() {
        var G__24984__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__24984 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24984__delegate.call(this, a, b, c, ds);
        };
        G__24984.cljs$lang$maxFixedArity = 3;
        G__24984.cljs$lang$applyTo = function(arglist__24985) {
          var a = cljs.core.first(arglist__24985);
          arglist__24985 = cljs.core.next(arglist__24985);
          var b = cljs.core.first(arglist__24985);
          arglist__24985 = cljs.core.next(arglist__24985);
          var c = cljs.core.first(arglist__24985);
          var ds = cljs.core.rest(arglist__24985);
          return G__24984__delegate(a, b, c, ds);
        };
        G__24984.cljs$core$IFn$_invoke$arity$variadic = G__24984__delegate;
        return G__24984;
      }();
      G__24983 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__24983__2.call(this, a, b);
          case 3:
            return G__24983__3.call(this, a, b, c);
          default:
            return G__24983__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24983.cljs$lang$maxFixedArity = 3;
      G__24983.cljs$lang$applyTo = G__24983__4.cljs$lang$applyTo;
      return G__24983;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__24986 = null;
      var G__24986__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__24986__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__24986__4 = function() {
        var G__24987__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__24987 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24987__delegate.call(this, a, b, c, ds);
        };
        G__24987.cljs$lang$maxFixedArity = 3;
        G__24987.cljs$lang$applyTo = function(arglist__24988) {
          var a = cljs.core.first(arglist__24988);
          arglist__24988 = cljs.core.next(arglist__24988);
          var b = cljs.core.first(arglist__24988);
          arglist__24988 = cljs.core.next(arglist__24988);
          var c = cljs.core.first(arglist__24988);
          var ds = cljs.core.rest(arglist__24988);
          return G__24987__delegate(a, b, c, ds);
        };
        G__24987.cljs$core$IFn$_invoke$arity$variadic = G__24987__delegate;
        return G__24987;
      }();
      G__24986 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__24986__2.call(this, a, b);
          case 3:
            return G__24986__3.call(this, a, b, c);
          default:
            return G__24986__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24986.cljs$lang$maxFixedArity = 3;
      G__24986.cljs$lang$applyTo = G__24986__4.cljs$lang$applyTo;
      return G__24986;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4297__auto___24989 = size;
          var i_24990 = 0;
          while (true) {
            if (i_24990 < n__4297__auto___24989) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_24990, cljs.core._nth.call(null, c, i_24990)));
              var G__24991 = i_24990 + 1;
              i_24990 = G__24991;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4297__auto___24992 = size;
        var i_24993 = 0;
        while (true) {
          if (i_24993 < n__4297__auto___24992) {
            var x_24994 = f.call(null, cljs.core._nth.call(null, c, i_24993));
            if (x_24994 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_24994);
            }
            var G__24995 = i_24993 + 1;
            i_24993 = G__24995;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4297__auto___24996 = size;
          var i_24997 = 0;
          while (true) {
            if (i_24997 < n__4297__auto___24996) {
              var x_24998 = f.call(null, idx + i_24997, cljs.core._nth.call(null, c, i_24997));
              if (x_24998 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_24998);
              }
              var G__24999 = i_24997 + 1;
              i_24997 = G__24999;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            return p.call(null, y);
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__25006__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__25006 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25006__delegate.call(this, x, y, z, args);
        };
        G__25006.cljs$lang$maxFixedArity = 3;
        G__25006.cljs$lang$applyTo = function(arglist__25007) {
          var x = cljs.core.first(arglist__25007);
          arglist__25007 = cljs.core.next(arglist__25007);
          var y = cljs.core.first(arglist__25007);
          arglist__25007 = cljs.core.next(arglist__25007);
          var z = cljs.core.first(arglist__25007);
          var args = cljs.core.rest(arglist__25007);
          return G__25006__delegate(x, y, z, args);
        };
        G__25006.cljs$core$IFn$_invoke$arity$variadic = G__25006__delegate;
        return G__25006;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              var and__3437__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3437__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3437__auto____$2;
              }
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              var and__3437__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3437__auto____$2)) {
                var and__3437__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3437__auto____$3)) {
                  var and__3437__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3437__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3437__auto____$4;
                  }
                } else {
                  return and__3437__auto____$3;
                }
              } else {
                return and__3437__auto____$2;
              }
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__25008__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__25000_SHARP_) {
            var and__3437__auto__ = p1.call(null, p1__25000_SHARP_);
            if (cljs.core.truth_(and__3437__auto__)) {
              return p2.call(null, p1__25000_SHARP_);
            } else {
              return and__3437__auto__;
            }
          }, args));
        };
        var G__25008 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25008__delegate.call(this, x, y, z, args);
        };
        G__25008.cljs$lang$maxFixedArity = 3;
        G__25008.cljs$lang$applyTo = function(arglist__25009) {
          var x = cljs.core.first(arglist__25009);
          arglist__25009 = cljs.core.next(arglist__25009);
          var y = cljs.core.first(arglist__25009);
          arglist__25009 = cljs.core.next(arglist__25009);
          var z = cljs.core.first(arglist__25009);
          var args = cljs.core.rest(arglist__25009);
          return G__25008__delegate(x, y, z, args);
        };
        G__25008.cljs$core$IFn$_invoke$arity$variadic = G__25008__delegate;
        return G__25008;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              var and__3437__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3437__auto____$2)) {
                var and__3437__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3437__auto____$3)) {
                  var and__3437__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3437__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3437__auto____$4;
                  }
                } else {
                  return and__3437__auto____$3;
                }
              } else {
                return and__3437__auto____$2;
              }
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3437__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3437__auto____$1)) {
              var and__3437__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3437__auto____$2)) {
                var and__3437__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3437__auto____$3)) {
                  var and__3437__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3437__auto____$4)) {
                    var and__3437__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3437__auto____$5)) {
                      var and__3437__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3437__auto____$6)) {
                        var and__3437__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3437__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3437__auto____$7;
                        }
                      } else {
                        return and__3437__auto____$6;
                      }
                    } else {
                      return and__3437__auto____$5;
                    }
                  } else {
                    return and__3437__auto____$4;
                  }
                } else {
                  return and__3437__auto____$3;
                }
              } else {
                return and__3437__auto____$2;
              }
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__25010__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__25001_SHARP_) {
            var and__3437__auto__ = p1.call(null, p1__25001_SHARP_);
            if (cljs.core.truth_(and__3437__auto__)) {
              var and__3437__auto____$1 = p2.call(null, p1__25001_SHARP_);
              if (cljs.core.truth_(and__3437__auto____$1)) {
                return p3.call(null, p1__25001_SHARP_);
              } else {
                return and__3437__auto____$1;
              }
            } else {
              return and__3437__auto__;
            }
          }, args));
        };
        var G__25010 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25010__delegate.call(this, x, y, z, args);
        };
        G__25010.cljs$lang$maxFixedArity = 3;
        G__25010.cljs$lang$applyTo = function(arglist__25011) {
          var x = cljs.core.first(arglist__25011);
          arglist__25011 = cljs.core.next(arglist__25011);
          var y = cljs.core.first(arglist__25011);
          arglist__25011 = cljs.core.next(arglist__25011);
          var z = cljs.core.first(arglist__25011);
          var args = cljs.core.rest(arglist__25011);
          return G__25010__delegate(x, y, z, args);
        };
        G__25010.cljs$core$IFn$_invoke$arity$variadic = G__25010__delegate;
        return G__25010;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__25012__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__25002_SHARP_) {
            return p1__25002_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__25003_SHARP_) {
            var and__3437__auto__ = p1__25003_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3437__auto__)) {
              return p1__25003_SHARP_.call(null, y);
            } else {
              return and__3437__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__25004_SHARP_) {
            var and__3437__auto__ = p1__25004_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3437__auto__)) {
              var and__3437__auto____$1 = p1__25004_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3437__auto____$1)) {
                return p1__25004_SHARP_.call(null, z);
              } else {
                return and__3437__auto____$1;
              }
            } else {
              return and__3437__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__25013__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__25005_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__25005_SHARP_, args);
            }, ps__$1));
          };
          var G__25013 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__25013__delegate.call(this, x, y, z, args);
          };
          G__25013.cljs$lang$maxFixedArity = 3;
          G__25013.cljs$lang$applyTo = function(arglist__25014) {
            var x = cljs.core.first(arglist__25014);
            arglist__25014 = cljs.core.next(arglist__25014);
            var y = cljs.core.first(arglist__25014);
            arglist__25014 = cljs.core.next(arglist__25014);
            var z = cljs.core.first(arglist__25014);
            var args = cljs.core.rest(arglist__25014);
            return G__25013__delegate(x, y, z, args);
          };
          G__25013.cljs$core$IFn$_invoke$arity$variadic = G__25013__delegate;
          return G__25013;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__25012 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__25012__delegate.call(this, p1, p2, p3, ps);
    };
    G__25012.cljs$lang$maxFixedArity = 3;
    G__25012.cljs$lang$applyTo = function(arglist__25015) {
      var p1 = cljs.core.first(arglist__25015);
      arglist__25015 = cljs.core.next(arglist__25015);
      var p2 = cljs.core.first(arglist__25015);
      arglist__25015 = cljs.core.next(arglist__25015);
      var p3 = cljs.core.first(arglist__25015);
      var ps = cljs.core.rest(arglist__25015);
      return G__25012__delegate(p1, p2, p3, ps);
    };
    G__25012.cljs$core$IFn$_invoke$arity$variadic = G__25012__delegate;
    return G__25012;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3449__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3449__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__25022__delegate = function(x, y, z, args) {
          var or__3449__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__25022 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25022__delegate.call(this, x, y, z, args);
        };
        G__25022.cljs$lang$maxFixedArity = 3;
        G__25022.cljs$lang$applyTo = function(arglist__25023) {
          var x = cljs.core.first(arglist__25023);
          arglist__25023 = cljs.core.next(arglist__25023);
          var y = cljs.core.first(arglist__25023);
          arglist__25023 = cljs.core.next(arglist__25023);
          var z = cljs.core.first(arglist__25023);
          var args = cljs.core.rest(arglist__25023);
          return G__25022__delegate(x, y, z, args);
        };
        G__25022.cljs$core$IFn$_invoke$arity$variadic = G__25022__delegate;
        return G__25022;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            var or__3449__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3449__auto____$2)) {
              return or__3449__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            var or__3449__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3449__auto____$2)) {
              return or__3449__auto____$2;
            } else {
              var or__3449__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3449__auto____$3)) {
                return or__3449__auto____$3;
              } else {
                var or__3449__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3449__auto____$4)) {
                  return or__3449__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__25024__delegate = function(x, y, z, args) {
          var or__3449__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__25016_SHARP_) {
              var or__3449__auto____$1 = p1.call(null, p1__25016_SHARP_);
              if (cljs.core.truth_(or__3449__auto____$1)) {
                return or__3449__auto____$1;
              } else {
                return p2.call(null, p1__25016_SHARP_);
              }
            }, args);
          }
        };
        var G__25024 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25024__delegate.call(this, x, y, z, args);
        };
        G__25024.cljs$lang$maxFixedArity = 3;
        G__25024.cljs$lang$applyTo = function(arglist__25025) {
          var x = cljs.core.first(arglist__25025);
          arglist__25025 = cljs.core.next(arglist__25025);
          var y = cljs.core.first(arglist__25025);
          arglist__25025 = cljs.core.next(arglist__25025);
          var z = cljs.core.first(arglist__25025);
          var args = cljs.core.rest(arglist__25025);
          return G__25024__delegate(x, y, z, args);
        };
        G__25024.cljs$core$IFn$_invoke$arity$variadic = G__25024__delegate;
        return G__25024;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            var or__3449__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3449__auto____$2)) {
              return or__3449__auto____$2;
            } else {
              var or__3449__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3449__auto____$3)) {
                return or__3449__auto____$3;
              } else {
                var or__3449__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3449__auto____$4)) {
                  return or__3449__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3449__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3449__auto____$1)) {
            return or__3449__auto____$1;
          } else {
            var or__3449__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3449__auto____$2)) {
              return or__3449__auto____$2;
            } else {
              var or__3449__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3449__auto____$3)) {
                return or__3449__auto____$3;
              } else {
                var or__3449__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3449__auto____$4)) {
                  return or__3449__auto____$4;
                } else {
                  var or__3449__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3449__auto____$5)) {
                    return or__3449__auto____$5;
                  } else {
                    var or__3449__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3449__auto____$6)) {
                      return or__3449__auto____$6;
                    } else {
                      var or__3449__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3449__auto____$7)) {
                        return or__3449__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__25026__delegate = function(x, y, z, args) {
          var or__3449__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__25017_SHARP_) {
              var or__3449__auto____$1 = p1.call(null, p1__25017_SHARP_);
              if (cljs.core.truth_(or__3449__auto____$1)) {
                return or__3449__auto____$1;
              } else {
                var or__3449__auto____$2 = p2.call(null, p1__25017_SHARP_);
                if (cljs.core.truth_(or__3449__auto____$2)) {
                  return or__3449__auto____$2;
                } else {
                  return p3.call(null, p1__25017_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__25026 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25026__delegate.call(this, x, y, z, args);
        };
        G__25026.cljs$lang$maxFixedArity = 3;
        G__25026.cljs$lang$applyTo = function(arglist__25027) {
          var x = cljs.core.first(arglist__25027);
          arglist__25027 = cljs.core.next(arglist__25027);
          var y = cljs.core.first(arglist__25027);
          arglist__25027 = cljs.core.next(arglist__25027);
          var z = cljs.core.first(arglist__25027);
          var args = cljs.core.rest(arglist__25027);
          return G__25026__delegate(x, y, z, args);
        };
        G__25026.cljs$core$IFn$_invoke$arity$variadic = G__25026__delegate;
        return G__25026;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__25028__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__25018_SHARP_) {
            return p1__25018_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__25019_SHARP_) {
            var or__3449__auto__ = p1__25019_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              return p1__25019_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__25020_SHARP_) {
            var or__3449__auto__ = p1__25020_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              var or__3449__auto____$1 = p1__25020_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3449__auto____$1)) {
                return or__3449__auto____$1;
              } else {
                return p1__25020_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__25029__delegate = function(x, y, z, args) {
            var or__3449__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__25021_SHARP_) {
                return cljs.core.some.call(null, p1__25021_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__25029 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__25029__delegate.call(this, x, y, z, args);
          };
          G__25029.cljs$lang$maxFixedArity = 3;
          G__25029.cljs$lang$applyTo = function(arglist__25030) {
            var x = cljs.core.first(arglist__25030);
            arglist__25030 = cljs.core.next(arglist__25030);
            var y = cljs.core.first(arglist__25030);
            arglist__25030 = cljs.core.next(arglist__25030);
            var z = cljs.core.first(arglist__25030);
            var args = cljs.core.rest(arglist__25030);
            return G__25029__delegate(x, y, z, args);
          };
          G__25029.cljs$core$IFn$_invoke$arity$variadic = G__25029__delegate;
          return G__25029;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__25028 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__25028__delegate.call(this, p1, p2, p3, ps);
    };
    G__25028.cljs$lang$maxFixedArity = 3;
    G__25028.cljs$lang$applyTo = function(arglist__25031) {
      var p1 = cljs.core.first(arglist__25031);
      arglist__25031 = cljs.core.next(arglist__25031);
      var p2 = cljs.core.first(arglist__25031);
      arglist__25031 = cljs.core.next(arglist__25031);
      var p3 = cljs.core.first(arglist__25031);
      var ps = cljs.core.rest(arglist__25031);
      return G__25028__delegate(p1, p2, p3, ps);
    };
    G__25028.cljs$core$IFn$_invoke$arity$variadic = G__25028__delegate;
    return G__25028;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4297__auto___25033 = size;
          var i_25034 = 0;
          while (true) {
            if (i_25034 < n__4297__auto___25033) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_25034)));
              var G__25035 = i_25034 + 1;
              i_25034 = G__25035;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__25036__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__25032_SHARP_) {
        return cljs.core.apply.call(null, f, p1__25032_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__25036 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__25036__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__25036.cljs$lang$maxFixedArity = 4;
    G__25036.cljs$lang$applyTo = function(arglist__25037) {
      var f = cljs.core.first(arglist__25037);
      arglist__25037 = cljs.core.next(arglist__25037);
      var c1 = cljs.core.first(arglist__25037);
      arglist__25037 = cljs.core.next(arglist__25037);
      var c2 = cljs.core.first(arglist__25037);
      arglist__25037 = cljs.core.next(arglist__25037);
      var c3 = cljs.core.first(arglist__25037);
      var colls = cljs.core.rest(arglist__25037);
      return G__25036__delegate(f, c1, c2, c3, colls);
    };
    G__25036.cljs$core$IFn$_invoke$arity$variadic = G__25036__delegate;
    return G__25036;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__25038 = n__$1 - 1;
        var G__25039 = cljs.core.rest.call(null, s);
        n__$1 = G__25038;
        coll__$1 = G__25039;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__25040 = cljs.core.next.call(null, s);
      var G__25041 = cljs.core.next.call(null, lead);
      s = G__25040;
      lead = G__25041;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3437__auto__ = s;
        if (and__3437__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3437__auto__;
        }
      }())) {
        var G__25042 = pred__$1;
        var G__25043 = cljs.core.rest.call(null, s);
        pred__$1 = G__25042;
        coll__$1 = G__25043;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__25044__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__25044 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__25044__delegate.call(this, c1, c2, colls);
    };
    G__25044.cljs$lang$maxFixedArity = 2;
    G__25044.cljs$lang$applyTo = function(arglist__25045) {
      var c1 = cljs.core.first(arglist__25045);
      arglist__25045 = cljs.core.next(arglist__25045);
      var c2 = cljs.core.first(arglist__25045);
      var colls = cljs.core.rest(arglist__25045);
      return G__25044__delegate(c1, c2, colls);
    };
    G__25044.cljs$core$IFn$_invoke$arity$variadic = G__25044__delegate;
    return G__25044;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__25046__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__25046 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__25046__delegate.call(this, f, coll, colls);
    };
    G__25046.cljs$lang$maxFixedArity = 2;
    G__25046.cljs$lang$applyTo = function(arglist__25047) {
      var f = cljs.core.first(arglist__25047);
      arglist__25047 = cljs.core.next(arglist__25047);
      var coll = cljs.core.first(arglist__25047);
      var colls = cljs.core.rest(arglist__25047);
      return G__25046__delegate(f, coll, colls);
    };
    G__25046.cljs$core$IFn$_invoke$arity$variadic = G__25046__delegate;
    return G__25046;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4297__auto___25048 = size;
        var i_25049 = 0;
        while (true) {
          if (i_25049 < n__4297__auto___25048) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_25049)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_25049));
            } else {
            }
            var G__25050 = i_25049 + 1;
            i_25049 = G__25050;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__25051_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__25051_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__25053 = to;
      if (G__25053) {
        var bit__4092__auto__ = G__25053.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4092__auto__ || G__25053.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__25054__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__25054 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__25054__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__25054.cljs$lang$maxFixedArity = 4;
    G__25054.cljs$lang$applyTo = function(arglist__25055) {
      var f = cljs.core.first(arglist__25055);
      arglist__25055 = cljs.core.next(arglist__25055);
      var c1 = cljs.core.first(arglist__25055);
      arglist__25055 = cljs.core.next(arglist__25055);
      var c2 = cljs.core.first(arglist__25055);
      arglist__25055 = cljs.core.next(arglist__25055);
      var c3 = cljs.core.first(arglist__25055);
      var colls = cljs.core.rest(arglist__25055);
      return G__25054__delegate(f, c1, c2, c3, colls);
    };
    G__25054.cljs$core$IFn$_invoke$arity$variadic = G__25054__delegate;
    return G__25054;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__25057 = m__$1;
          if (G__25057) {
            var bit__4099__auto__ = G__25057.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4099__auto__ || G__25057.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__25057.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__25057);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__25057);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__25058 = sentinel;
            var G__25059 = m__$2;
            var G__25060 = cljs.core.next.call(null, ks__$1);
            sentinel = G__25058;
            m__$1 = G__25059;
            ks__$1 = G__25060;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__25061, v) {
  var vec__25063 = p__25061;
  var k = cljs.core.nth.call(null, vec__25063, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__25063, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__25064, f) {
    var vec__25074 = p__25064;
    var k = cljs.core.nth.call(null, vec__25074, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__25074, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__25065, f, a) {
    var vec__25075 = p__25065;
    var k = cljs.core.nth.call(null, vec__25075, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__25075, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__25066, f, a, b) {
    var vec__25076 = p__25066;
    var k = cljs.core.nth.call(null, vec__25076, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__25076, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__25067, f, a, b, c) {
    var vec__25077 = p__25067;
    var k = cljs.core.nth.call(null, vec__25077, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__25077, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__25079__delegate = function(m, p__25068, f, a, b, c, args) {
      var vec__25078 = p__25068;
      var k = cljs.core.nth.call(null, vec__25078, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__25078, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__25079 = function(m, p__25068, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__25079__delegate.call(this, m, p__25068, f, a, b, c, args);
    };
    G__25079.cljs$lang$maxFixedArity = 6;
    G__25079.cljs$lang$applyTo = function(arglist__25080) {
      var m = cljs.core.first(arglist__25080);
      arglist__25080 = cljs.core.next(arglist__25080);
      var p__25068 = cljs.core.first(arglist__25080);
      arglist__25080 = cljs.core.next(arglist__25080);
      var f = cljs.core.first(arglist__25080);
      arglist__25080 = cljs.core.next(arglist__25080);
      var a = cljs.core.first(arglist__25080);
      arglist__25080 = cljs.core.next(arglist__25080);
      var b = cljs.core.first(arglist__25080);
      arglist__25080 = cljs.core.next(arglist__25080);
      var c = cljs.core.first(arglist__25080);
      var args = cljs.core.rest(arglist__25080);
      return G__25079__delegate(m, p__25068, f, a, b, c, args);
    };
    G__25079.cljs$core$IFn$_invoke$arity$variadic = G__25079__delegate;
    return G__25079;
  }();
  update_in = function(m, p__25068, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__25068, f);
      case 4:
        return update_in__4.call(this, m, p__25068, f, a);
      case 5:
        return update_in__5.call(this, m, p__25068, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__25068, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__25068, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4019__auto__, writer__4020__auto__, opts__4021__auto__) {
  return cljs.core._write.call(null, writer__4020__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__25081 = ll - 5;
      var G__25082 = r;
      ll = G__25081;
      ret = G__25082;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__25083 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__25084 = level - 5;
          node = G__25083;
          level = G__25084;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__25086 = null;
  var G__25086__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__25086__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__25086 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25086__2.call(this, self__, k);
      case 3:
        return G__25086__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25086;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args25085) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25085)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__25087 = j + 1;
              var G__25088 = init__$2;
              j = G__25087;
              init__$1 = G__25088;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__25089 = i + step_init[0];
        i = G__25089;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4297__auto___25090 = len;
    var i_25091 = 0;
    while (true) {
      if (i_25091 < n__4297__auto___25090) {
        new_tail[i_25091] = self__.tail[i_25091];
        var G__25092 = i_25091 + 1;
        i_25091 = G__25092;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__25093 = i + 1;
        var G__25094 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__25093;
        out = G__25094;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__25095) {
    var args = cljs.core.seq(arglist__25095);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__25097 = null;
  var G__25097__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__25097__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__25097 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25097__2.call(this, self__, k);
      case 3:
        return G__25097__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25097;
}();
cljs.core.Subvec.prototype.apply = function(self__, args25096) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25096)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3756__auto__ = self__.end;
    var y__3757__auto__ = v_pos + 1;
    return x__3756__auto__ > y__3757__auto__ ? x__3756__auto__ : y__3757__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__25098 = meta;
      var G__25099 = v.v;
      var G__25100 = v.start + start;
      var G__25101 = v.start + end;
      var G__25102 = __hash;
      meta = G__25098;
      v = G__25099;
      start = G__25100;
      end = G__25101;
      __hash = G__25102;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj25106 = {};
    return obj25106;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__25107 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__25108 = level - 5;
          node = G__25107;
          level = G__25108;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__25110 = null;
  var G__25110__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25110__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25110 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25110__2.call(this, self__, k);
      case 3:
        return G__25110__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25110;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args25109) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25109)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3449__auto__ = self__.rear;
      if (cljs.core.truth_(or__3449__auto__)) {
        return or__3449__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3449__auto__ = self__.front;
    if (cljs.core.truth_(or__3449__auto__)) {
      return or__3449__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__25111 = i + incr;
        i = G__25111;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__25112 = i + 1;
      var G__25113 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__25112;
      out = G__25113;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj25117 = {};
    return obj25117;
  }();
  var l = ks.length;
  var i_25118 = 0;
  while (true) {
    if (i_25118 < l) {
      var k_25119 = ks[i_25118];
      new_obj[k_25119] = obj[k_25119];
      var G__25120 = i_25118 + 1;
      i_25118 = G__25120;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__25123 = null;
  var G__25123__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25123__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25123 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25123__2.call(this, self__, k);
      case 3:
        return G__25123__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25123;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args25122) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25122)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__25124 = cljs.core.rest.call(null, keys__$1);
        var G__25125 = init__$2;
        keys__$1 = G__25124;
        init__$1 = G__25125;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__25121_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25121_SHARP_, self__.strobj[p1__25121_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj25127 = {};
  return obj25127;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__25128 = i + 2;
          i = G__25128;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__25129 = i + 2;
          i = G__25129;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__25130 = i + 2;
          i = G__25130;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__25131 = i + 2;
          i = G__25131;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__25132 = i + 2;
          i = G__25132;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_25133 = 0;
  while (true) {
    if (i_25133 < l) {
      narr[i_25133] = arr[i_25133];
      var G__25134 = i_25133 + 1;
      i_25133 = G__25134;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj25137 = {};
    return obj25137;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__25138 = cljs.core.aclone.call(null, self__.arr);
          G__25138[idx + 1] = v;
          return G__25138;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__25139 = null;
  var G__25139__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25139__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25139 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25139__2.call(this, self__, k);
      case 3:
        return G__25139__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25139;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args25135) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25135)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__25140 = i + 2;
        var G__25141 = init__$2;
        i = G__25140;
        init__$1 = G__25141;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__25142 = s + 2;
            var G__25143 = d;
            s = G__25142;
            d = G__25143;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__25144 = s + 2;
              var G__25145 = d + 2;
              s = G__25144;
              d = G__25145;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__25146 = i + 2;
        var G__25147 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__25146;
        ret = G__25147;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__25148_25150 = self__.arr;
      G__25148_25150.pop();
      G__25148_25150.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__25149 = o;
      if (G__25149) {
        var bit__4099__auto__ = G__25149.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4099__auto__ || G__25149.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__25149.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__25149);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__25149);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__25151 = cljs.core.next.call(null, es);
          var G__25152 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__25151;
          tcoll__$2 = G__25152;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__25153 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__25154 = i + 2;
      out = G__25153;
      i = G__25154;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4019__auto__, writer__4020__auto__, opts__4021__auto__) {
  return cljs.core._write.call(null, writer__4020__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__25157 = cljs.core.aclone.call(null, arr);
    G__25157[i] = a;
    return G__25157;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__25158 = cljs.core.aclone.call(null, arr);
    G__25158[i] = a;
    G__25158[j] = b;
    return G__25158;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__25159 = i + 2;
        var G__25160 = init__$2;
        i = G__25159;
        init__$1 = G__25160;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_25161 = 0;
        var j_25162 = 0;
        while (true) {
          if (i_25161 < 32) {
            if ((self__.bitmap >>> i_25161 & 1) === 0) {
              var G__25163 = i_25161 + 1;
              var G__25164 = j_25162;
              i_25161 = G__25163;
              j_25162 = G__25164;
              continue;
            } else {
              nodes[i_25161] = !(self__.arr[j_25162] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_25162]), self__.arr[j_25162], self__.arr[j_25162 + 1], added_leaf_QMARK_) : self__.arr[j_25162 + 1];
              var G__25165 = i_25161 + 1;
              var G__25166 = j_25162 + 2;
              i_25161 = G__25165;
              j_25162 = G__25166;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_25167 = 0;
      var j_25168 = 0;
      while (true) {
        if (i_25167 < 32) {
          if ((self__.bitmap >>> i_25167 & 1) === 0) {
            var G__25169 = i_25167 + 1;
            var G__25170 = j_25168;
            i_25167 = G__25169;
            j_25168 = G__25170;
            continue;
          } else {
            nodes[i_25167] = !(self__.arr[j_25168] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_25168]), self__.arr[j_25168], self__.arr[j_25168 + 1], added_leaf_QMARK_) : self__.arr[j_25168 + 1];
            var G__25171 = i_25167 + 1;
            var G__25172 = j_25168 + 2;
            i_25167 = G__25171;
            j_25168 = G__25172;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__25173 = i + 1;
        var G__25174 = j + 2;
        var G__25175 = bitmap | 1 << i;
        i = G__25173;
        j = G__25174;
        bitmap = G__25175;
        continue;
      } else {
        var G__25176 = i + 1;
        var G__25177 = j;
        var G__25178 = bitmap;
        i = G__25176;
        j = G__25177;
        bitmap = G__25178;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__25179 = i + 1;
          var G__25180 = init__$2;
          i = G__25179;
          init__$1 = G__25180;
          continue;
        }
      } else {
        var G__25181 = i + 1;
        var G__25182 = init__$1;
        i = G__25181;
        init__$1 = G__25182;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__25183 = i + 2;
        i = G__25183;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__25184 = j + 2;
                j = G__25184;
                continue;
              }
            } else {
              var G__25185 = j + 2;
              j = G__25185;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__25186 = j + 1;
              j = G__25186;
              continue;
            }
          } else {
            var G__25187 = j + 1;
            j = G__25187;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj25190 = {};
    return obj25190;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__25191 = null;
  var G__25191__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25191__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25191 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25191__2.call(this, self__, k);
      case 3:
        return G__25191__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25191;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args25188) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25188)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__25192 = i + 1;
      var G__25193 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__25192;
      out = G__25193;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__25194 = o;
      if (G__25194) {
        var bit__4099__auto__ = G__25194.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4099__auto__ || G__25194.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__25194.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__25194);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__25194);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__25195 = cljs.core.next.call(null, es);
          var G__25196 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__25195;
          tcoll__$1 = G__25196;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__25197 = ascending_QMARK_ ? t.left : t.right;
      var G__25198 = cljs.core.conj.call(null, stack__$1, t);
      t = G__25197;
      stack__$1 = G__25198;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__25200 = null;
  var G__25200__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25200__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25200 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25200__2.call(this, self__, k);
      case 3:
        return G__25200__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25200;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args25199) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25199)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__25202 = null;
  var G__25202__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25202__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25202 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25202__2.call(this, self__, k);
      case 3:
        return G__25202__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25202;
}();
cljs.core.RedNode.prototype.apply = function(self__, args25201) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25201)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__25204 = null;
  var G__25204__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25204__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25204 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25204__2.call(this, self__, k);
      case 3:
        return G__25204__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25204;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args25203) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25203)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__25205 = t.left;
          t = G__25205;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__25206 = t.right;
            t = G__25206;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__25207 = cljs.core.conj.call(null, stack, t);
              var G__25208 = t.left;
              stack = G__25207;
              t = G__25208;
              continue;
            } else {
              var G__25209 = stack;
              var G__25210 = t.right;
              stack = G__25209;
              t = G__25210;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__25211 = cljs.core.conj.call(null, stack, t);
                var G__25212 = t.right;
                stack = G__25211;
                t = G__25212;
                continue;
              } else {
                var G__25213 = stack;
                var G__25214 = t.left;
                stack = G__25213;
                t = G__25214;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__25215 = cljs.core.nnext.call(null, in$);
        var G__25216 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__25215;
        out = G__25216;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__25217) {
    var keyvals = cljs.core.seq(arglist__25217);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__25218) {
    var keyvals = cljs.core.seq(arglist__25218);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj25222 = {};
      return obj25222;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__25223 = cljs.core.nnext.call(null, kvs);
        kvs = G__25223;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__25224) {
    var keyvals = cljs.core.seq(arglist__25224);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__25225 = cljs.core.nnext.call(null, in$);
        var G__25226 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__25225;
        out = G__25226;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__25227) {
    var keyvals = cljs.core.seq(arglist__25227);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__25228 = cljs.core.nnext.call(null, in$);
        var G__25229 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__25228;
        out = G__25229;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__25230) {
    var comparator = cljs.core.first(arglist__25230);
    var keyvals = cljs.core.rest(arglist__25230);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__25231 = self__.mseq;
    if (G__25231) {
      var bit__4099__auto__ = G__25231.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4099__auto__ || G__25231.cljs$core$INext$) {
        return true;
      } else {
        if (!G__25231.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25231);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25231);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__25232 = self__.mseq;
    if (G__25232) {
      var bit__4099__auto__ = G__25232.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4099__auto__ || G__25232.cljs$core$INext$) {
        return true;
      } else {
        if (!G__25232.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25232);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25232);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__25233 = self__.mseq;
    if (G__25233) {
      var bit__4099__auto__ = G__25233.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4099__auto__ || G__25233.cljs$core$INext$) {
        return true;
      } else {
        if (!G__25233.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25233);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25233);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__25234 = self__.mseq;
    if (G__25234) {
      var bit__4099__auto__ = G__25234.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4099__auto__ || G__25234.cljs$core$INext$) {
        return true;
      } else {
        if (!G__25234.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25234);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__25234);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__25235_SHARP_, p2__25236_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3449__auto__ = p1__25235_SHARP_;
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__25236_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__25237) {
    var maps = cljs.core.seq(arglist__25237);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3449__auto__ = m1;
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__25238) {
    var f = cljs.core.first(arglist__25238);
    var maps = cljs.core.rest(arglist__25238);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__25239 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__25240 = cljs.core.next.call(null, keys);
      ret = G__25239;
      keys = G__25240;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__25243 = null;
  var G__25243__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25243__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25243 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25243__2.call(this, self__, k);
      case 3:
        return G__25243__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25243;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args25242) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25242)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__25241_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__25241_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__25244 = i + 1;
        var G__25245 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__25244;
        out = G__25245;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__25246 = i + 1;
        var G__25247 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__25246;
        out = G__25247;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__25249 = null;
  var G__25249__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__25249__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__25249 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25249__2.call(this, self__, k);
      case 3:
        return G__25249__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25249;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args25248) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25248)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__25252 = null;
  var G__25252__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__25252__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__25252 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__25252__2.call(this, self__, k);
      case 3:
        return G__25252__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__25252;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args25251) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25251)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__25250_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__25250_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4291__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4291__auto__.length) {
        var G__25253 = i + 1;
        var G__25254 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__25253;
        res = G__25254;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__25255 = cljs.core._next.call(null, in$__$1);
            var G__25256 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__25255;
            out = G__25256;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__25257__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__25257 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__25257__delegate.call(this, keys);
    };
    G__25257.cljs$lang$maxFixedArity = 0;
    G__25257.cljs$lang$applyTo = function(arglist__25258) {
      var keys = cljs.core.seq(arglist__25258);
      return G__25257__delegate(keys);
    };
    G__25257.cljs$core$IFn$_invoke$arity$variadic = G__25257__delegate;
    return G__25257;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__25259) {
    var keys = cljs.core.seq(arglist__25259);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__25260) {
    var comparator = cljs.core.first(arglist__25260);
    var keys = cljs.core.rest(arglist__25260);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__25261_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__25261_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__25261_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__25268, seen__$1) {
        while (true) {
          var vec__25269 = p__25268;
          var f = cljs.core.nth.call(null, vec__25269, 0, null);
          var xs__$1 = vec__25269;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__25270 = cljs.core.rest.call(null, s);
              var G__25271 = seen__$1;
              p__25268 = G__25270;
              seen__$1 = G__25271;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__25272 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__25273 = cljs.core.next.call(null, s__$1);
      ret = G__25272;
      s__$1 = G__25273;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__25275 = x;
    if (G__25275) {
      var bit__4092__auto__ = G__25275.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4092__auto__ || G__25275.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__25276 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__25277 = cljs.core.next.call(null, ks);
      var G__25278 = cljs.core.next.call(null, vs);
      map = G__25276;
      ks = G__25277;
      vs = G__25278;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__25281__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__25279_SHARP_, p2__25280_SHARP_) {
        return max_key.call(null, k, p1__25279_SHARP_, p2__25280_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__25281 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__25281__delegate.call(this, k, x, y, more);
    };
    G__25281.cljs$lang$maxFixedArity = 3;
    G__25281.cljs$lang$applyTo = function(arglist__25282) {
      var k = cljs.core.first(arglist__25282);
      arglist__25282 = cljs.core.next(arglist__25282);
      var x = cljs.core.first(arglist__25282);
      arglist__25282 = cljs.core.next(arglist__25282);
      var y = cljs.core.first(arglist__25282);
      var more = cljs.core.rest(arglist__25282);
      return G__25281__delegate(k, x, y, more);
    };
    G__25281.cljs$core$IFn$_invoke$arity$variadic = G__25281__delegate;
    return G__25281;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__25285__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__25283_SHARP_, p2__25284_SHARP_) {
        return min_key.call(null, k, p1__25283_SHARP_, p2__25284_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__25285 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__25285__delegate.call(this, k, x, y, more);
    };
    G__25285.cljs$lang$maxFixedArity = 3;
    G__25285.cljs$lang$applyTo = function(arglist__25286) {
      var k = cljs.core.first(arglist__25286);
      arglist__25286 = cljs.core.next(arglist__25286);
      var x = cljs.core.first(arglist__25286);
      arglist__25286 = cljs.core.next(arglist__25286);
      var y = cljs.core.first(arglist__25286);
      var more = cljs.core.rest(arglist__25286);
      return G__25285__delegate(k, x, y, more);
    };
    G__25285.cljs$core$IFn$_invoke$arity$variadic = G__25285__delegate;
    return G__25285;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__25289 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__25289, 0, null);
        var s = vec__25289;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__25290 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__25290, 0, null);
      var s = vec__25290;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__25293 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__25293, 0, null);
        var s = vec__25293;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__25294 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__25294, 0, null);
      var s = vec__25294;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__25295_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__25295_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__25306 = null;
      var G__25306__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__25306__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__25306__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__25306__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__25306__4 = function() {
        var G__25307__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__25307 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25307__delegate.call(this, x, y, z, args);
        };
        G__25307.cljs$lang$maxFixedArity = 3;
        G__25307.cljs$lang$applyTo = function(arglist__25308) {
          var x = cljs.core.first(arglist__25308);
          arglist__25308 = cljs.core.next(arglist__25308);
          var y = cljs.core.first(arglist__25308);
          arglist__25308 = cljs.core.next(arglist__25308);
          var z = cljs.core.first(arglist__25308);
          var args = cljs.core.rest(arglist__25308);
          return G__25307__delegate(x, y, z, args);
        };
        G__25307.cljs$core$IFn$_invoke$arity$variadic = G__25307__delegate;
        return G__25307;
      }();
      G__25306 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__25306__0.call(this);
          case 1:
            return G__25306__1.call(this, x);
          case 2:
            return G__25306__2.call(this, x, y);
          case 3:
            return G__25306__3.call(this, x, y, z);
          default:
            return G__25306__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__25306.cljs$lang$maxFixedArity = 3;
      G__25306.cljs$lang$applyTo = G__25306__4.cljs$lang$applyTo;
      return G__25306;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__25309 = null;
      var G__25309__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__25309__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__25309__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__25309__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__25309__4 = function() {
        var G__25310__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__25310 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25310__delegate.call(this, x, y, z, args);
        };
        G__25310.cljs$lang$maxFixedArity = 3;
        G__25310.cljs$lang$applyTo = function(arglist__25311) {
          var x = cljs.core.first(arglist__25311);
          arglist__25311 = cljs.core.next(arglist__25311);
          var y = cljs.core.first(arglist__25311);
          arglist__25311 = cljs.core.next(arglist__25311);
          var z = cljs.core.first(arglist__25311);
          var args = cljs.core.rest(arglist__25311);
          return G__25310__delegate(x, y, z, args);
        };
        G__25310.cljs$core$IFn$_invoke$arity$variadic = G__25310__delegate;
        return G__25310;
      }();
      G__25309 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__25309__0.call(this);
          case 1:
            return G__25309__1.call(this, x);
          case 2:
            return G__25309__2.call(this, x, y);
          case 3:
            return G__25309__3.call(this, x, y, z);
          default:
            return G__25309__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__25309.cljs$lang$maxFixedArity = 3;
      G__25309.cljs$lang$applyTo = G__25309__4.cljs$lang$applyTo;
      return G__25309;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__25312 = null;
      var G__25312__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__25312__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__25312__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__25312__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__25312__4 = function() {
        var G__25313__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__25313 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__25313__delegate.call(this, x, y, z, args);
        };
        G__25313.cljs$lang$maxFixedArity = 3;
        G__25313.cljs$lang$applyTo = function(arglist__25314) {
          var x = cljs.core.first(arglist__25314);
          arglist__25314 = cljs.core.next(arglist__25314);
          var y = cljs.core.first(arglist__25314);
          arglist__25314 = cljs.core.next(arglist__25314);
          var z = cljs.core.first(arglist__25314);
          var args = cljs.core.rest(arglist__25314);
          return G__25313__delegate(x, y, z, args);
        };
        G__25313.cljs$core$IFn$_invoke$arity$variadic = G__25313__delegate;
        return G__25313;
      }();
      G__25312 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__25312__0.call(this);
          case 1:
            return G__25312__1.call(this, x);
          case 2:
            return G__25312__2.call(this, x, y);
          case 3:
            return G__25312__3.call(this, x, y, z);
          default:
            return G__25312__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__25312.cljs$lang$maxFixedArity = 3;
      G__25312.cljs$lang$applyTo = G__25312__4.cljs$lang$applyTo;
      return G__25312;
    }();
  };
  var juxt__4 = function() {
    var G__25315__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__25316 = null;
        var G__25316__0 = function() {
          return cljs.core.reduce.call(null, function(p1__25296_SHARP_, p2__25297_SHARP_) {
            return cljs.core.conj.call(null, p1__25296_SHARP_, p2__25297_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__25316__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__25298_SHARP_, p2__25299_SHARP_) {
            return cljs.core.conj.call(null, p1__25298_SHARP_, p2__25299_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__25316__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__25300_SHARP_, p2__25301_SHARP_) {
            return cljs.core.conj.call(null, p1__25300_SHARP_, p2__25301_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__25316__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__25302_SHARP_, p2__25303_SHARP_) {
            return cljs.core.conj.call(null, p1__25302_SHARP_, p2__25303_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__25316__4 = function() {
          var G__25317__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__25304_SHARP_, p2__25305_SHARP_) {
              return cljs.core.conj.call(null, p1__25304_SHARP_, cljs.core.apply.call(null, p2__25305_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__25317 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__25317__delegate.call(this, x, y, z, args);
          };
          G__25317.cljs$lang$maxFixedArity = 3;
          G__25317.cljs$lang$applyTo = function(arglist__25318) {
            var x = cljs.core.first(arglist__25318);
            arglist__25318 = cljs.core.next(arglist__25318);
            var y = cljs.core.first(arglist__25318);
            arglist__25318 = cljs.core.next(arglist__25318);
            var z = cljs.core.first(arglist__25318);
            var args = cljs.core.rest(arglist__25318);
            return G__25317__delegate(x, y, z, args);
          };
          G__25317.cljs$core$IFn$_invoke$arity$variadic = G__25317__delegate;
          return G__25317;
        }();
        G__25316 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__25316__0.call(this);
            case 1:
              return G__25316__1.call(this, x);
            case 2:
              return G__25316__2.call(this, x, y);
            case 3:
              return G__25316__3.call(this, x, y, z);
            default:
              return G__25316__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__25316.cljs$lang$maxFixedArity = 3;
        G__25316.cljs$lang$applyTo = G__25316__4.cljs$lang$applyTo;
        return G__25316;
      }();
    };
    var G__25315 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__25315__delegate.call(this, f, g, h, fs);
    };
    G__25315.cljs$lang$maxFixedArity = 3;
    G__25315.cljs$lang$applyTo = function(arglist__25319) {
      var f = cljs.core.first(arglist__25319);
      arglist__25319 = cljs.core.next(arglist__25319);
      var g = cljs.core.first(arglist__25319);
      arglist__25319 = cljs.core.next(arglist__25319);
      var h = cljs.core.first(arglist__25319);
      var fs = cljs.core.rest(arglist__25319);
      return G__25315__delegate(f, g, h, fs);
    };
    G__25315.cljs$core$IFn$_invoke$arity$variadic = G__25315__delegate;
    return G__25315;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__25320 = cljs.core.next.call(null, coll);
        coll = G__25320;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__25321 = n - 1;
        var G__25322 = cljs.core.next.call(null, coll);
        n = G__25321;
        coll = G__25322;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__25324 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__25324, 0, null);
  var flags = cljs.core.nth.call(null, vec__25324, 1, null);
  var pattern = cljs.core.nth.call(null, vec__25324, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_25326 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_25327__$1 = cljs.core.next.call(null, coll);
      var n_25328 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_25327__$1 && (n_25328 == null || !(n_25328 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_25327__$1), writer, opts);
          var G__25329 = cljs.core.next.call(null, coll_25327__$1);
          var G__25330 = n_25328 - 1;
          coll_25327__$1 = G__25329;
          n_25328 = G__25330;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_25326;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__25335 = cljs.core.seq.call(null, ss);
    var chunk__25336 = null;
    var count__25337 = 0;
    var i__25338 = 0;
    while (true) {
      if (i__25338 < count__25337) {
        var s = cljs.core._nth.call(null, chunk__25336, i__25338);
        cljs.core._write.call(null, writer, s);
        var G__25339 = seq__25335;
        var G__25340 = chunk__25336;
        var G__25341 = count__25337;
        var G__25342 = i__25338 + 1;
        seq__25335 = G__25339;
        chunk__25336 = G__25340;
        count__25337 = G__25341;
        i__25338 = G__25342;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__25335);
        if (temp__4092__auto__) {
          var seq__25335__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__25335__$1)) {
            var c__4197__auto__ = cljs.core.chunk_first.call(null, seq__25335__$1);
            var G__25343 = cljs.core.chunk_rest.call(null, seq__25335__$1);
            var G__25344 = c__4197__auto__;
            var G__25345 = cljs.core.count.call(null, c__4197__auto__);
            var G__25346 = 0;
            seq__25335 = G__25343;
            chunk__25336 = G__25344;
            count__25337 = G__25345;
            i__25338 = G__25346;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__25335__$1);
            cljs.core._write.call(null, writer, s);
            var G__25347 = cljs.core.next.call(null, seq__25335__$1);
            var G__25348 = null;
            var G__25349 = 0;
            var G__25350 = 0;
            seq__25335 = G__25347;
            chunk__25336 = G__25348;
            count__25337 = G__25349;
            i__25338 = G__25350;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__25351) {
    var writer = cljs.core.first(arglist__25351);
    var ss = cljs.core.rest(arglist__25351);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj25353 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj25353;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3437__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3437__auto__)) {
            var and__3437__auto____$1 = function() {
              var G__25359 = obj;
              if (G__25359) {
                var bit__4099__auto__ = G__25359.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4099__auto__ || G__25359.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__25359.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__25359);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__25359);
              }
            }();
            if (and__3437__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3437__auto____$1;
            }
          } else {
            return and__3437__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__25360 = obj;
              if (G__25360) {
                var bit__4092__auto__ = G__25360.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4092__auto__ || G__25360.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__25362 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__25362;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__25361 = obj;
                              if (G__25361) {
                                var bit__4099__auto__ = G__25361.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4099__auto__ || G__25361.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__25361.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__25361);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__25361);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__25367 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__25368 = null;
  var count__25369 = 0;
  var i__25370 = 0;
  while (true) {
    if (i__25370 < count__25369) {
      var obj = cljs.core._nth.call(null, chunk__25368, i__25370);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__25371 = seq__25367;
      var G__25372 = chunk__25368;
      var G__25373 = count__25369;
      var G__25374 = i__25370 + 1;
      seq__25367 = G__25371;
      chunk__25368 = G__25372;
      count__25369 = G__25373;
      i__25370 = G__25374;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__25367);
      if (temp__4092__auto__) {
        var seq__25367__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25367__$1)) {
          var c__4197__auto__ = cljs.core.chunk_first.call(null, seq__25367__$1);
          var G__25375 = cljs.core.chunk_rest.call(null, seq__25367__$1);
          var G__25376 = c__4197__auto__;
          var G__25377 = cljs.core.count.call(null, c__4197__auto__);
          var G__25378 = 0;
          seq__25367 = G__25375;
          chunk__25368 = G__25376;
          count__25369 = G__25377;
          i__25370 = G__25378;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__25367__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__25379 = cljs.core.next.call(null, seq__25367__$1);
          var G__25380 = null;
          var G__25381 = 0;
          var G__25382 = 0;
          seq__25367 = G__25379;
          chunk__25368 = G__25380;
          count__25369 = G__25381;
          i__25370 = G__25382;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__25383) {
    var objs = cljs.core.seq(arglist__25383);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__25384) {
    var objs = cljs.core.seq(arglist__25384);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__25385) {
    var objs = cljs.core.seq(arglist__25385);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__25386) {
    var objs = cljs.core.seq(arglist__25386);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__25387) {
    var objs = cljs.core.seq(arglist__25387);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__25388) {
    var objs = cljs.core.seq(arglist__25388);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__25389) {
    var objs = cljs.core.seq(arglist__25389);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__25390) {
    var objs = cljs.core.seq(arglist__25390);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj25392 = {};
  return obj25392;
}();
cljs.core.IReset = function() {
  var obj25394 = {};
  return obj25394;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3437__auto__ = o;
    if (and__3437__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4076__auto__ = o == null ? null : o;
    return function() {
      var or__3449__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj25396 = {};
  return obj25396;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3437__auto__ = o;
      if (and__3437__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4076__auto__ = o == null ? null : o;
      return function() {
        var or__3449__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__25397 = cljs.core.seq.call(null, self__.watches);
  var chunk__25398 = null;
  var count__25399 = 0;
  var i__25400 = 0;
  while (true) {
    if (i__25400 < count__25399) {
      var vec__25401 = cljs.core._nth.call(null, chunk__25398, i__25400);
      var key = cljs.core.nth.call(null, vec__25401, 0, null);
      var f = cljs.core.nth.call(null, vec__25401, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__25403 = seq__25397;
      var G__25404 = chunk__25398;
      var G__25405 = count__25399;
      var G__25406 = i__25400 + 1;
      seq__25397 = G__25403;
      chunk__25398 = G__25404;
      count__25399 = G__25405;
      i__25400 = G__25406;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__25397);
      if (temp__4092__auto__) {
        var seq__25397__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25397__$1)) {
          var c__4197__auto__ = cljs.core.chunk_first.call(null, seq__25397__$1);
          var G__25407 = cljs.core.chunk_rest.call(null, seq__25397__$1);
          var G__25408 = c__4197__auto__;
          var G__25409 = cljs.core.count.call(null, c__4197__auto__);
          var G__25410 = 0;
          seq__25397 = G__25407;
          chunk__25398 = G__25408;
          count__25399 = G__25409;
          i__25400 = G__25410;
          continue;
        } else {
          var vec__25402 = cljs.core.first.call(null, seq__25397__$1);
          var key = cljs.core.nth.call(null, vec__25402, 0, null);
          var f = cljs.core.nth.call(null, vec__25402, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__25411 = cljs.core.next.call(null, seq__25397__$1);
          var G__25412 = null;
          var G__25413 = 0;
          var G__25414 = 0;
          seq__25397 = G__25411;
          chunk__25398 = G__25412;
          count__25399 = G__25413;
          i__25400 = G__25414;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__25418__delegate = function(x, p__25415) {
      var map__25417 = p__25415;
      var map__25417__$1 = cljs.core.seq_QMARK_.call(null, map__25417) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25417) : map__25417;
      var validator = cljs.core.get.call(null, map__25417__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__25417__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__25418 = function(x, var_args) {
      var p__25415 = null;
      if (arguments.length > 1) {
        p__25415 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__25418__delegate.call(this, x, p__25415);
    };
    G__25418.cljs$lang$maxFixedArity = 1;
    G__25418.cljs$lang$applyTo = function(arglist__25419) {
      var x = cljs.core.first(arglist__25419);
      var p__25415 = cljs.core.rest(arglist__25419);
      return G__25418__delegate(x, p__25415);
    };
    G__25418.cljs$core$IFn$_invoke$arity$variadic = G__25418__delegate;
    return G__25418;
  }();
  atom = function(x, var_args) {
    var p__25415 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__25420__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__25420 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__25420__delegate.call(this, a, f, x, y, more);
    };
    G__25420.cljs$lang$maxFixedArity = 4;
    G__25420.cljs$lang$applyTo = function(arglist__25421) {
      var a = cljs.core.first(arglist__25421);
      arglist__25421 = cljs.core.next(arglist__25421);
      var f = cljs.core.first(arglist__25421);
      arglist__25421 = cljs.core.next(arglist__25421);
      var x = cljs.core.first(arglist__25421);
      arglist__25421 = cljs.core.next(arglist__25421);
      var y = cljs.core.first(arglist__25421);
      var more = cljs.core.rest(arglist__25421);
      return G__25420__delegate(a, f, x, y, more);
    };
    G__25420.cljs$core$IFn$_invoke$arity$variadic = G__25420__delegate;
    return G__25420;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__25422) {
    var iref = cljs.core.first(arglist__25422);
    arglist__25422 = cljs.core.next(arglist__25422);
    var f = cljs.core.first(arglist__25422);
    var args = cljs.core.rest(arglist__25422);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__25423) {
    var map__25424 = p__25423;
    var map__25424__$1 = cljs.core.seq_QMARK_.call(null, map__25424) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25424) : map__25424;
    var curr_state = map__25424__$1;
    var done = cljs.core.get.call(null, map__25424__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj25426 = {};
  return obj25426;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__25428 = k;
    if (G__25428) {
      var bit__4099__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3449__auto__ = bit__4099__auto__;
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return G__25428.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__25428.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__25428);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__25428);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__25442 = x;
      if (G__25442) {
        var bit__4099__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3449__auto__ = bit__4099__auto__;
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return G__25442.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__25442.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__25442);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__25442);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj25444 = {};
              return obj25444;
            }();
            var seq__25445_25455 = cljs.core.seq.call(null, x);
            var chunk__25446_25456 = null;
            var count__25447_25457 = 0;
            var i__25448_25458 = 0;
            while (true) {
              if (i__25448_25458 < count__25447_25457) {
                var vec__25449_25459 = cljs.core._nth.call(null, chunk__25446_25456, i__25448_25458);
                var k_25460 = cljs.core.nth.call(null, vec__25449_25459, 0, null);
                var v_25461 = cljs.core.nth.call(null, vec__25449_25459, 1, null);
                m[cljs.core.key__GT_js.call(null, k_25460)] = clj__GT_js.call(null, v_25461);
                var G__25462 = seq__25445_25455;
                var G__25463 = chunk__25446_25456;
                var G__25464 = count__25447_25457;
                var G__25465 = i__25448_25458 + 1;
                seq__25445_25455 = G__25462;
                chunk__25446_25456 = G__25463;
                count__25447_25457 = G__25464;
                i__25448_25458 = G__25465;
                continue;
              } else {
                var temp__4092__auto___25466 = cljs.core.seq.call(null, seq__25445_25455);
                if (temp__4092__auto___25466) {
                  var seq__25445_25467__$1 = temp__4092__auto___25466;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__25445_25467__$1)) {
                    var c__4197__auto___25468 = cljs.core.chunk_first.call(null, seq__25445_25467__$1);
                    var G__25469 = cljs.core.chunk_rest.call(null, seq__25445_25467__$1);
                    var G__25470 = c__4197__auto___25468;
                    var G__25471 = cljs.core.count.call(null, c__4197__auto___25468);
                    var G__25472 = 0;
                    seq__25445_25455 = G__25469;
                    chunk__25446_25456 = G__25470;
                    count__25447_25457 = G__25471;
                    i__25448_25458 = G__25472;
                    continue;
                  } else {
                    var vec__25450_25473 = cljs.core.first.call(null, seq__25445_25467__$1);
                    var k_25474 = cljs.core.nth.call(null, vec__25450_25473, 0, null);
                    var v_25475 = cljs.core.nth.call(null, vec__25450_25473, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_25474)] = clj__GT_js.call(null, v_25475);
                    var G__25476 = cljs.core.next.call(null, seq__25445_25467__$1);
                    var G__25477 = null;
                    var G__25478 = 0;
                    var G__25479 = 0;
                    seq__25445_25455 = G__25476;
                    chunk__25446_25456 = G__25477;
                    count__25447_25457 = G__25478;
                    i__25448_25458 = G__25479;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__25451_25480 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__25452_25481 = null;
              var count__25453_25482 = 0;
              var i__25454_25483 = 0;
              while (true) {
                if (i__25454_25483 < count__25453_25482) {
                  var x_25484__$1 = cljs.core._nth.call(null, chunk__25452_25481, i__25454_25483);
                  arr.push(x_25484__$1);
                  var G__25485 = seq__25451_25480;
                  var G__25486 = chunk__25452_25481;
                  var G__25487 = count__25453_25482;
                  var G__25488 = i__25454_25483 + 1;
                  seq__25451_25480 = G__25485;
                  chunk__25452_25481 = G__25486;
                  count__25453_25482 = G__25487;
                  i__25454_25483 = G__25488;
                  continue;
                } else {
                  var temp__4092__auto___25489 = cljs.core.seq.call(null, seq__25451_25480);
                  if (temp__4092__auto___25489) {
                    var seq__25451_25490__$1 = temp__4092__auto___25489;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__25451_25490__$1)) {
                      var c__4197__auto___25491 = cljs.core.chunk_first.call(null, seq__25451_25490__$1);
                      var G__25492 = cljs.core.chunk_rest.call(null, seq__25451_25490__$1);
                      var G__25493 = c__4197__auto___25491;
                      var G__25494 = cljs.core.count.call(null, c__4197__auto___25491);
                      var G__25495 = 0;
                      seq__25451_25480 = G__25492;
                      chunk__25452_25481 = G__25493;
                      count__25453_25482 = G__25494;
                      i__25454_25483 = G__25495;
                      continue;
                    } else {
                      var x_25496__$1 = cljs.core.first.call(null, seq__25451_25490__$1);
                      arr.push(x_25496__$1);
                      var G__25497 = cljs.core.next.call(null, seq__25451_25490__$1);
                      var G__25498 = null;
                      var G__25499 = 0;
                      var G__25500 = 0;
                      seq__25451_25480 = G__25497;
                      chunk__25452_25481 = G__25498;
                      count__25453_25482 = G__25499;
                      i__25454_25483 = G__25500;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj25502 = {};
  return obj25502;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3437__auto__ = x;
    if (and__3437__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4076__auto__ = x == null ? null : x;
    return function() {
      var or__3449__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__25523__delegate = function(x, opts) {
      if (function() {
        var G__25513 = x;
        if (G__25513) {
          var bit__4099__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3449__auto__ = bit__4099__auto__;
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              return G__25513.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__25513.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__25513);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__25513);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__25514 = opts;
          var map__25514__$1 = cljs.core.seq_QMARK_.call(null, map__25514) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25514) : map__25514;
          var keywordize_keys = cljs.core.get.call(null, map__25514__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__25514, map__25514__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4166__auto__ = function(map__25514, map__25514__$1, keywordize_keys, keyfn) {
                          return function iter__25519(s__25520) {
                            return new cljs.core.LazySeq(null, function(map__25514, map__25514__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__25520__$1 = s__25520;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__25520__$1);
                                  if (temp__4092__auto__) {
                                    var s__25520__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__25520__$2)) {
                                      var c__4164__auto__ = cljs.core.chunk_first.call(null, s__25520__$2);
                                      var size__4165__auto__ = cljs.core.count.call(null, c__4164__auto__);
                                      var b__25522 = cljs.core.chunk_buffer.call(null, size__4165__auto__);
                                      if (function() {
                                        var i__25521 = 0;
                                        while (true) {
                                          if (i__25521 < size__4165__auto__) {
                                            var k = cljs.core._nth.call(null, c__4164__auto__, i__25521);
                                            cljs.core.chunk_append.call(null, b__25522, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__25524 = i__25521 + 1;
                                            i__25521 = G__25524;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__25522), iter__25519.call(null, cljs.core.chunk_rest.call(null, s__25520__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__25522), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__25520__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__25519.call(null, cljs.core.rest.call(null, s__25520__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__25514, map__25514__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__25514, map__25514__$1, keywordize_keys, keyfn);
                        return iter__4166__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__25514, map__25514__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__25523 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__25523__delegate.call(this, x, opts);
    };
    G__25523.cljs$lang$maxFixedArity = 1;
    G__25523.cljs$lang$applyTo = function(arglist__25525) {
      var x = cljs.core.first(arglist__25525);
      var opts = cljs.core.rest(arglist__25525);
      return G__25523__delegate(x, opts);
    };
    G__25523.cljs$core$IFn$_invoke$arity$variadic = G__25523__delegate;
    return G__25523;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__25526__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__25526 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__25526__delegate.call(this, args);
    };
    G__25526.cljs$lang$maxFixedArity = 0;
    G__25526.cljs$lang$applyTo = function(arglist__25527) {
      var args = cljs.core.seq(arglist__25527);
      return G__25526__delegate(args);
    };
    G__25526.cljs$core$IFn$_invoke$arity$variadic = G__25526__delegate;
    return G__25526;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__25528 = ret;
        f = G__25528;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__25529__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__25529 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__25529__delegate.call(this, f, args);
    };
    G__25529.cljs$lang$maxFixedArity = 1;
    G__25529.cljs$lang$applyTo = function(arglist__25530) {
      var f = cljs.core.first(arglist__25530);
      var args = cljs.core.rest(arglist__25530);
      return G__25529__delegate(f, args);
    };
    G__25529.cljs$core$IFn$_invoke$arity$variadic = G__25529__delegate;
    return G__25529;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__25531) {
    var f = cljs.core.first(arglist__25531);
    var args = cljs.core.rest(arglist__25531);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3449__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3449__auto__) {
      return or__3449__auto__;
    } else {
      var or__3449__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3449__auto____$1) {
        return or__3449__auto____$1;
      } else {
        var and__3437__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3437__auto__) {
          var and__3437__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3437__auto____$1) {
            var and__3437__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3437__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__25532 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__25533 = i + 1;
                  ret = G__25532;
                  i = G__25533;
                  continue;
                }
                break;
              }
            } else {
              return and__3437__auto____$2;
            }
          } else {
            return and__3437__auto____$1;
          }
        } else {
          return and__3437__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3449__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3449__auto__)) {
      return or__3449__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__25534_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__25534_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__25534_SHARP_), cljs.core.second.call(null, p1__25534_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__25535_SHARP_, p2__25536_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__25535_SHARP_, p2__25536_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3449__auto__ = cljs.core.truth_(function() {
    var and__3437__auto__ = xprefs;
    if (cljs.core.truth_(and__3437__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3437__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    var or__3449__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__25537 = cljs.core.rest.call(null, ps);
          ps = G__25537;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3449__auto____$1)) {
      return or__3449__auto____$1;
    } else {
      var or__3449__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__25538 = cljs.core.rest.call(null, ps);
            ps = G__25538;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3449__auto____$2)) {
        return or__3449__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3449__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__25541) {
    var vec__25542 = p__25541;
    var k = cljs.core.nth.call(null, vec__25542, 0, null);
    var _ = cljs.core.nth.call(null, vec__25542, 1, null);
    var e = vec__25542;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3449__auto__ = be == null;
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj25544 = {};
  return obj25544;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._reset[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._reset["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._add_method[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._add_method["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._remove_method[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._remove_method["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._prefer_method[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._get_method[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._get_method["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._methods[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._methods["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._prefers[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._prefers["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3437__auto__ = mf;
    if (and__3437__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4076__auto__ = mf == null ? null : mf;
    return function() {
      var or__3449__auto__ = cljs.core._dispatch[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core._dispatch["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__25545__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__25545 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__25545__delegate.call(this, _, args);
  };
  G__25545.cljs$lang$maxFixedArity = 1;
  G__25545.cljs$lang$applyTo = function(arglist__25546) {
    var _ = cljs.core.first(arglist__25546);
    var args = cljs.core.rest(arglist__25546);
    return G__25545__delegate(_, args);
  };
  G__25545.cljs$core$IFn$_invoke$arity$variadic = G__25545__delegate;
  return G__25545;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4019__auto__, writer__4020__auto__, opts__4021__auto__) {
  return cljs.core._write.call(null, writer__4020__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("compost.timer");
goog.require("cljs.core");
compost.timer.make_timer = function make_timer(duration, label, kwargs) {
  var map__9537 = kwargs;
  var map__9537__$1 = cljs.core.seq_QMARK_.call(null, map__9537) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9537) : map__9537;
  var state = cljs.core.get.call(null, map__9537__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  return cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "label", "label", 1116631654), label, new cljs.core.Keyword(null, "duration", "duration", 3316859142), duration, new cljs.core.Keyword(null, "remaining", "remaining", 1883742568), duration, new cljs.core.Keyword(null, "state", "state", 1123661827), state, new cljs.core.Keyword(null, "prev-state", "prev-state", 3562322921), state], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/timer.cljs"], null));
};
var next_id_9541 = cljs.core.atom.call(null, 0);
compost.timer.make_timer_BANG_ = function() {
  var make_timer_BANG___delegate = function(duration, label, p__9538) {
    var map__9540 = p__9538;
    var map__9540__$1 = cljs.core.seq_QMARK_.call(null, map__9540) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9540) : map__9540;
    var kwargs = map__9540__$1;
    var state = cljs.core.get.call(null, map__9540__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
    return cljs.core.assoc.call(null, compost.timer.make_timer.call(null, duration, label, kwargs), new cljs.core.Keyword(null, "id", "id", 1013907597), [cljs.core.str("timer-"), cljs.core.str(cljs.core.swap_BANG_.call(null, next_id_9541, cljs.core.inc))].join(""));
  };
  var make_timer_BANG_ = function(duration, label, var_args) {
    var p__9538 = null;
    if (arguments.length > 2) {
      p__9538 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return make_timer_BANG___delegate.call(this, duration, label, p__9538);
  };
  make_timer_BANG_.cljs$lang$maxFixedArity = 2;
  make_timer_BANG_.cljs$lang$applyTo = function(arglist__9542) {
    var duration = cljs.core.first(arglist__9542);
    arglist__9542 = cljs.core.next(arglist__9542);
    var label = cljs.core.first(arglist__9542);
    var p__9538 = cljs.core.rest(arglist__9542);
    return make_timer_BANG___delegate(duration, label, p__9538);
  };
  make_timer_BANG_.cljs$core$IFn$_invoke$arity$variadic = make_timer_BANG___delegate;
  return make_timer_BANG_;
}();
compost.timer.start_timer = function start_timer(timers, timer_id) {
  return cljs.core.into.call(null, cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/timer.cljs"], null)), cljs.core.map.call(null, function(t) {
    if (cljs.core._EQ_.call(null, timer_id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(t))) {
      return cljs.core.assoc.call(null, t, new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.Keyword(null, "run", "run", 1014017533));
    } else {
      return t;
    }
  }, timers));
};
compost.timer.reset = function reset(timer) {
  return cljs.core.assoc.call(null, timer, new cljs.core.Keyword(null, "remaining", "remaining", 1883742568), (new cljs.core.Keyword(null, "duration", "duration", 3316859142)).cljs$core$IFn$_invoke$arity$1(timer), new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.Keyword(null, "stop", "stop", 1017445236));
};
compost.timer.running_QMARK_ = function running_QMARK_(timer) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "run", "run", 1014017533), (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer));
};
compost.timer.stopped_QMARK_ = function stopped_QMARK_(timer) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "stop", "stop", 1017445236), (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer));
};
compost.timer.complete_QMARK_ = function complete_QMARK_(timer) {
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "complete", "complete", 4709426347), (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer)) && (new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(timer) > 0) {
    throw Error([cljs.core.str("Timer in inconsistent state:"), cljs.core.str(timer)].join(""));
  } else {
  }
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "complete", "complete", 4709426347), (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer));
};
compost.timer.time_remaining_QMARK_ = function time_remaining_QMARK_(timer) {
  return(new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(timer) > 0;
};
compost.timer.step_timer = function step_timer(timer) {
  if (!compost.timer.running_QMARK_.call(null, timer)) {
    return cljs.core.assoc.call(null, timer, new cljs.core.Keyword(null, "prev-state", "prev-state", 3562322921), (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer));
  } else {
    var updated = cljs.core.update_in.call(null, timer, cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/timer.cljs"], null)), function(p1__9543_SHARP_) {
      if (0 < p1__9543_SHARP_) {
        return p1__9543_SHARP_ - 1;
      } else {
        return p1__9543_SHARP_;
      }
    });
    return cljs.core.assoc.call(null, cljs.core.update_in.call(null, updated, cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state", "state", 1123661827)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/timer.cljs"], null)), function(state, rem) {
      if (rem > 0) {
        return new cljs.core.Keyword(null, "run", "run", 1014017533);
      } else {
        return new cljs.core.Keyword(null, "complete", "complete", 4709426347);
      }
    }, (new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(updated)), new cljs.core.Keyword(null, "prev-state", "prev-state", 3562322921), new cljs.core.Keyword(null, "run", "run", 1014017533));
  }
};
compost.timer.step_timers = function step_timers(timers) {
  return cljs.core.into.call(null, cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/timer.cljs"], null)), cljs.core.map.call(null, compost.timer.step_timer, timers));
};
compost.timer.next_available_timer = function next_available_timer(timers) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__9544_SHARP_) {
    return(new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(p1__9544_SHARP_) > 0;
  }, timers));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__25547 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__25547;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__25551 = cljs.core._EQ_;
    var expr__25552 = limit;
    if (cljs.core.truth_(pred__25551.call(null, 1, expr__25552))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__25551.call(null, 2, expr__25552))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__25554 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__25555 = limit__$1 - 1;
            var G__25556 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__25554;
            limit__$1 = G__25555;
            parts = G__25556;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__25557 = index - 1;
        index = G__25557;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___25558 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___25558)) {
        var replacement_25559 = temp__4090__auto___25558;
        buffer.append([cljs.core.str(replacement_25559)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__25560 = index + 1;
      index = G__25560;
      continue;
    }
    break;
  }
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3437__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3437__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3437__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__29307 = i + class$.length;
        start_from = G__29307;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4090__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var class_list = temp__4090__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4092__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4092__auto__)) {
      var class_name = temp__4092__auto__;
      var temp__4092__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4092__auto____$1)) {
        var i = temp__4092__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4090__auto___29332 = elem__$1.classList;
      if (cljs.core.truth_(temp__4090__auto___29332)) {
        var class_list_29333 = temp__4090__auto___29332;
        var seq__29320_29334 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__29321_29335 = null;
        var count__29322_29336 = 0;
        var i__29323_29337 = 0;
        while (true) {
          if (i__29323_29337 < count__29322_29336) {
            var class_29338 = cljs.core._nth.call(null, chunk__29321_29335, i__29323_29337);
            class_list_29333.add(class_29338);
            var G__29339 = seq__29320_29334;
            var G__29340 = chunk__29321_29335;
            var G__29341 = count__29322_29336;
            var G__29342 = i__29323_29337 + 1;
            seq__29320_29334 = G__29339;
            chunk__29321_29335 = G__29340;
            count__29322_29336 = G__29341;
            i__29323_29337 = G__29342;
            continue;
          } else {
            var temp__4092__auto___29343 = cljs.core.seq.call(null, seq__29320_29334);
            if (temp__4092__auto___29343) {
              var seq__29320_29344__$1 = temp__4092__auto___29343;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__29320_29344__$1)) {
                var c__4197__auto___29345 = cljs.core.chunk_first.call(null, seq__29320_29344__$1);
                var G__29346 = cljs.core.chunk_rest.call(null, seq__29320_29344__$1);
                var G__29347 = c__4197__auto___29345;
                var G__29348 = cljs.core.count.call(null, c__4197__auto___29345);
                var G__29349 = 0;
                seq__29320_29334 = G__29346;
                chunk__29321_29335 = G__29347;
                count__29322_29336 = G__29348;
                i__29323_29337 = G__29349;
                continue;
              } else {
                var class_29350 = cljs.core.first.call(null, seq__29320_29344__$1);
                class_list_29333.add(class_29350);
                var G__29351 = cljs.core.next.call(null, seq__29320_29344__$1);
                var G__29352 = null;
                var G__29353 = 0;
                var G__29354 = 0;
                seq__29320_29334 = G__29351;
                chunk__29321_29335 = G__29352;
                count__29322_29336 = G__29353;
                i__29323_29337 = G__29354;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_29355 = elem__$1.className;
        var seq__29324_29356 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__29325_29357 = null;
        var count__29326_29358 = 0;
        var i__29327_29359 = 0;
        while (true) {
          if (i__29327_29359 < count__29326_29358) {
            var class_29360 = cljs.core._nth.call(null, chunk__29325_29357, i__29327_29359);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_29355, class_29360))) {
            } else {
              elem__$1.className = class_name_29355 === "" ? class_29360 : [cljs.core.str(class_name_29355), cljs.core.str(" "), cljs.core.str(class_29360)].join("");
            }
            var G__29361 = seq__29324_29356;
            var G__29362 = chunk__29325_29357;
            var G__29363 = count__29326_29358;
            var G__29364 = i__29327_29359 + 1;
            seq__29324_29356 = G__29361;
            chunk__29325_29357 = G__29362;
            count__29326_29358 = G__29363;
            i__29327_29359 = G__29364;
            continue;
          } else {
            var temp__4092__auto___29365 = cljs.core.seq.call(null, seq__29324_29356);
            if (temp__4092__auto___29365) {
              var seq__29324_29366__$1 = temp__4092__auto___29365;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__29324_29366__$1)) {
                var c__4197__auto___29367 = cljs.core.chunk_first.call(null, seq__29324_29366__$1);
                var G__29368 = cljs.core.chunk_rest.call(null, seq__29324_29366__$1);
                var G__29369 = c__4197__auto___29367;
                var G__29370 = cljs.core.count.call(null, c__4197__auto___29367);
                var G__29371 = 0;
                seq__29324_29356 = G__29368;
                chunk__29325_29357 = G__29369;
                count__29326_29358 = G__29370;
                i__29327_29359 = G__29371;
                continue;
              } else {
                var class_29372 = cljs.core.first.call(null, seq__29324_29366__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_29355, class_29372))) {
                } else {
                  elem__$1.className = class_name_29355 === "" ? class_29372 : [cljs.core.str(class_name_29355), cljs.core.str(" "), cljs.core.str(class_29372)].join("");
                }
                var G__29373 = cljs.core.next.call(null, seq__29324_29366__$1);
                var G__29374 = null;
                var G__29375 = 0;
                var G__29376 = 0;
                seq__29324_29356 = G__29373;
                chunk__29325_29357 = G__29374;
                count__29326_29358 = G__29375;
                i__29327_29359 = G__29376;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__29377__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__29328_29378 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__29329_29379 = null;
      var count__29330_29380 = 0;
      var i__29331_29381 = 0;
      while (true) {
        if (i__29331_29381 < count__29330_29380) {
          var c_29382 = cljs.core._nth.call(null, chunk__29329_29379, i__29331_29381);
          add_class_BANG_.call(null, elem__$1, c_29382);
          var G__29383 = seq__29328_29378;
          var G__29384 = chunk__29329_29379;
          var G__29385 = count__29330_29380;
          var G__29386 = i__29331_29381 + 1;
          seq__29328_29378 = G__29383;
          chunk__29329_29379 = G__29384;
          count__29330_29380 = G__29385;
          i__29331_29381 = G__29386;
          continue;
        } else {
          var temp__4092__auto___29387 = cljs.core.seq.call(null, seq__29328_29378);
          if (temp__4092__auto___29387) {
            var seq__29328_29388__$1 = temp__4092__auto___29387;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29328_29388__$1)) {
              var c__4197__auto___29389 = cljs.core.chunk_first.call(null, seq__29328_29388__$1);
              var G__29390 = cljs.core.chunk_rest.call(null, seq__29328_29388__$1);
              var G__29391 = c__4197__auto___29389;
              var G__29392 = cljs.core.count.call(null, c__4197__auto___29389);
              var G__29393 = 0;
              seq__29328_29378 = G__29390;
              chunk__29329_29379 = G__29391;
              count__29330_29380 = G__29392;
              i__29331_29381 = G__29393;
              continue;
            } else {
              var c_29394 = cljs.core.first.call(null, seq__29328_29388__$1);
              add_class_BANG_.call(null, elem__$1, c_29394);
              var G__29395 = cljs.core.next.call(null, seq__29328_29388__$1);
              var G__29396 = null;
              var G__29397 = 0;
              var G__29398 = 0;
              seq__29328_29378 = G__29395;
              chunk__29329_29379 = G__29396;
              count__29330_29380 = G__29397;
              i__29331_29381 = G__29398;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__29377 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29377__delegate.call(this, elem, classes, more_classes);
    };
    G__29377.cljs$lang$maxFixedArity = 2;
    G__29377.cljs$lang$applyTo = function(arglist__29399) {
      var elem = cljs.core.first(arglist__29399);
      arglist__29399 = cljs.core.next(arglist__29399);
      var classes = cljs.core.first(arglist__29399);
      var more_classes = cljs.core.rest(arglist__29399);
      return G__29377__delegate(elem, classes, more_classes);
    };
    G__29377.cljs$core$IFn$_invoke$arity$variadic = G__29377__delegate;
    return G__29377;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4090__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var i = temp__4090__auto__;
      var G__29400 = function() {
        var end = i + class$.length;
        return[cljs.core.str(end < class_len ? [cljs.core.str(class_name.substring(0, i)), cljs.core.str(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1))].join("");
      }();
      class_name = G__29400;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4090__auto___29409 = elem__$1.classList;
    if (cljs.core.truth_(temp__4090__auto___29409)) {
      var class_list_29410 = temp__4090__auto___29409;
      class_list_29410.remove(class$__$1);
    } else {
      var class_name_29411 = elem__$1.className;
      var new_class_name_29412 = dommy.attrs.remove_class_str.call(null, class_name_29411, class$__$1);
      if (class_name_29411 === new_class_name_29412) {
      } else {
        elem__$1.className = new_class_name_29412;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__29413__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__29405 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__29406 = null;
      var count__29407 = 0;
      var i__29408 = 0;
      while (true) {
        if (i__29408 < count__29407) {
          var c = cljs.core._nth.call(null, chunk__29406, i__29408);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__29414 = seq__29405;
          var G__29415 = chunk__29406;
          var G__29416 = count__29407;
          var G__29417 = i__29408 + 1;
          seq__29405 = G__29414;
          chunk__29406 = G__29415;
          count__29407 = G__29416;
          i__29408 = G__29417;
          continue;
        } else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__29405);
          if (temp__4092__auto__) {
            var seq__29405__$1 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29405__$1)) {
              var c__4197__auto__ = cljs.core.chunk_first.call(null, seq__29405__$1);
              var G__29418 = cljs.core.chunk_rest.call(null, seq__29405__$1);
              var G__29419 = c__4197__auto__;
              var G__29420 = cljs.core.count.call(null, c__4197__auto__);
              var G__29421 = 0;
              seq__29405 = G__29418;
              chunk__29406 = G__29419;
              count__29407 = G__29420;
              i__29408 = G__29421;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__29405__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__29422 = cljs.core.next.call(null, seq__29405__$1);
              var G__29423 = null;
              var G__29424 = 0;
              var G__29425 = 0;
              seq__29405 = G__29422;
              chunk__29406 = G__29423;
              count__29407 = G__29424;
              i__29408 = G__29425;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__29413 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29413__delegate.call(this, elem, class$, classes);
    };
    G__29413.cljs$lang$maxFixedArity = 2;
    G__29413.cljs$lang$applyTo = function(arglist__29426) {
      var elem = cljs.core.first(arglist__29426);
      arglist__29426 = cljs.core.next(arglist__29426);
      var class$ = cljs.core.first(arglist__29426);
      var classes = cljs.core.rest(arglist__29426);
      return G__29413__delegate(elem, class$, classes);
    };
    G__29413.cljs$core$IFn$_invoke$arity$variadic = G__29413__delegate;
    return G__29413;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4090__auto___29427 = elem__$1.classList;
    if (cljs.core.truth_(temp__4090__auto___29427)) {
      var class_list_29428 = temp__4090__auto___29427;
      class_list_29428.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__29431) {
      var vec__29432 = p__29431;
      var k = cljs.core.nth.call(null, vec__29432, 0, null);
      var v = cljs.core.nth.call(null, vec__29432, 1, null);
      return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str(":"), cljs.core.str(cljs.core.name.call(null, v)), cljs.core.str(";")].join("");
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__29439_29445 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__29440_29446 = null;
    var count__29441_29447 = 0;
    var i__29442_29448 = 0;
    while (true) {
      if (i__29442_29448 < count__29441_29447) {
        var vec__29443_29449 = cljs.core._nth.call(null, chunk__29440_29446, i__29442_29448);
        var k_29450 = cljs.core.nth.call(null, vec__29443_29449, 0, null);
        var v_29451 = cljs.core.nth.call(null, vec__29443_29449, 1, null);
        style[cljs.core.name.call(null, k_29450)] = v_29451;
        var G__29452 = seq__29439_29445;
        var G__29453 = chunk__29440_29446;
        var G__29454 = count__29441_29447;
        var G__29455 = i__29442_29448 + 1;
        seq__29439_29445 = G__29452;
        chunk__29440_29446 = G__29453;
        count__29441_29447 = G__29454;
        i__29442_29448 = G__29455;
        continue;
      } else {
        var temp__4092__auto___29456 = cljs.core.seq.call(null, seq__29439_29445);
        if (temp__4092__auto___29456) {
          var seq__29439_29457__$1 = temp__4092__auto___29456;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29439_29457__$1)) {
            var c__4197__auto___29458 = cljs.core.chunk_first.call(null, seq__29439_29457__$1);
            var G__29459 = cljs.core.chunk_rest.call(null, seq__29439_29457__$1);
            var G__29460 = c__4197__auto___29458;
            var G__29461 = cljs.core.count.call(null, c__4197__auto___29458);
            var G__29462 = 0;
            seq__29439_29445 = G__29459;
            chunk__29440_29446 = G__29460;
            count__29441_29447 = G__29461;
            i__29442_29448 = G__29462;
            continue;
          } else {
            var vec__29444_29463 = cljs.core.first.call(null, seq__29439_29457__$1);
            var k_29464 = cljs.core.nth.call(null, vec__29444_29463, 0, null);
            var v_29465 = cljs.core.nth.call(null, vec__29444_29463, 1, null);
            style[cljs.core.name.call(null, k_29464)] = v_29465;
            var G__29466 = cljs.core.next.call(null, seq__29439_29457__$1);
            var G__29467 = null;
            var G__29468 = 0;
            var G__29469 = 0;
            seq__29439_29445 = G__29466;
            chunk__29440_29446 = G__29467;
            count__29441_29447 = G__29468;
            i__29442_29448 = G__29469;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__29470) {
    var elem = cljs.core.first(arglist__29470);
    var kvs = cljs.core.rest(arglist__29470);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -1640531420, null)))].join(""));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__29477_29483 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__29478_29484 = null;
    var count__29479_29485 = 0;
    var i__29480_29486 = 0;
    while (true) {
      if (i__29480_29486 < count__29479_29485) {
        var vec__29481_29487 = cljs.core._nth.call(null, chunk__29478_29484, i__29480_29486);
        var k_29488 = cljs.core.nth.call(null, vec__29481_29487, 0, null);
        var v_29489 = cljs.core.nth.call(null, vec__29481_29487, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_29488, [cljs.core.str(v_29489), cljs.core.str("px")].join(""));
        var G__29490 = seq__29477_29483;
        var G__29491 = chunk__29478_29484;
        var G__29492 = count__29479_29485;
        var G__29493 = i__29480_29486 + 1;
        seq__29477_29483 = G__29490;
        chunk__29478_29484 = G__29491;
        count__29479_29485 = G__29492;
        i__29480_29486 = G__29493;
        continue;
      } else {
        var temp__4092__auto___29494 = cljs.core.seq.call(null, seq__29477_29483);
        if (temp__4092__auto___29494) {
          var seq__29477_29495__$1 = temp__4092__auto___29494;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29477_29495__$1)) {
            var c__4197__auto___29496 = cljs.core.chunk_first.call(null, seq__29477_29495__$1);
            var G__29497 = cljs.core.chunk_rest.call(null, seq__29477_29495__$1);
            var G__29498 = c__4197__auto___29496;
            var G__29499 = cljs.core.count.call(null, c__4197__auto___29496);
            var G__29500 = 0;
            seq__29477_29483 = G__29497;
            chunk__29478_29484 = G__29498;
            count__29479_29485 = G__29499;
            i__29480_29486 = G__29500;
            continue;
          } else {
            var vec__29482_29501 = cljs.core.first.call(null, seq__29477_29495__$1);
            var k_29502 = cljs.core.nth.call(null, vec__29482_29501, 0, null);
            var v_29503 = cljs.core.nth.call(null, vec__29482_29501, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_29502, [cljs.core.str(v_29503), cljs.core.str("px")].join(""));
            var G__29504 = cljs.core.next.call(null, seq__29477_29495__$1);
            var G__29505 = null;
            var G__29506 = 0;
            var G__29507 = 0;
            seq__29477_29483 = G__29504;
            chunk__29478_29484 = G__29505;
            count__29479_29485 = G__29506;
            i__29480_29486 = G__29507;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__29508) {
    var elem = cljs.core.first(arglist__29508);
    var kvs = cljs.core.rest(arglist__29508);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__29517 = dommy.template.__GT_node_like.call(null, elem);
        G__29517[cljs.core.name.call(null, k)] = v;
        return G__29517;
      } else {
        var G__29518 = dommy.template.__GT_node_like.call(null, elem);
        G__29518.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", 1123684643) ? dommy.attrs.style_str.call(null, v) : v);
        return G__29518;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__29525__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__29519_29526 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__29520_29527 = null;
      var count__29521_29528 = 0;
      var i__29522_29529 = 0;
      while (true) {
        if (i__29522_29529 < count__29521_29528) {
          var vec__29523_29530 = cljs.core._nth.call(null, chunk__29520_29527, i__29522_29529);
          var k_29531__$1 = cljs.core.nth.call(null, vec__29523_29530, 0, null);
          var v_29532__$1 = cljs.core.nth.call(null, vec__29523_29530, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_29531__$1, v_29532__$1);
          var G__29533 = seq__29519_29526;
          var G__29534 = chunk__29520_29527;
          var G__29535 = count__29521_29528;
          var G__29536 = i__29522_29529 + 1;
          seq__29519_29526 = G__29533;
          chunk__29520_29527 = G__29534;
          count__29521_29528 = G__29535;
          i__29522_29529 = G__29536;
          continue;
        } else {
          var temp__4092__auto___29537 = cljs.core.seq.call(null, seq__29519_29526);
          if (temp__4092__auto___29537) {
            var seq__29519_29538__$1 = temp__4092__auto___29537;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29519_29538__$1)) {
              var c__4197__auto___29539 = cljs.core.chunk_first.call(null, seq__29519_29538__$1);
              var G__29540 = cljs.core.chunk_rest.call(null, seq__29519_29538__$1);
              var G__29541 = c__4197__auto___29539;
              var G__29542 = cljs.core.count.call(null, c__4197__auto___29539);
              var G__29543 = 0;
              seq__29519_29526 = G__29540;
              chunk__29520_29527 = G__29541;
              count__29521_29528 = G__29542;
              i__29522_29529 = G__29543;
              continue;
            } else {
              var vec__29524_29544 = cljs.core.first.call(null, seq__29519_29538__$1);
              var k_29545__$1 = cljs.core.nth.call(null, vec__29524_29544, 0, null);
              var v_29546__$1 = cljs.core.nth.call(null, vec__29524_29544, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_29545__$1, v_29546__$1);
              var G__29547 = cljs.core.next.call(null, seq__29519_29538__$1);
              var G__29548 = null;
              var G__29549 = 0;
              var G__29550 = 0;
              seq__29519_29526 = G__29547;
              chunk__29520_29527 = G__29548;
              count__29521_29528 = G__29549;
              i__29522_29529 = G__29550;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__29525 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29525__delegate.call(this, elem, k, v, kvs);
    };
    G__29525.cljs$lang$maxFixedArity = 3;
    G__29525.cljs$lang$applyTo = function(arglist__29551) {
      var elem = cljs.core.first(arglist__29551);
      arglist__29551 = cljs.core.next(arglist__29551);
      var k = cljs.core.first(arglist__29551);
      arglist__29551 = cljs.core.next(arglist__29551);
      var v = cljs.core.first(arglist__29551);
      var kvs = cljs.core.rest(arglist__29551);
      return G__29525__delegate(elem, k, v, kvs);
    };
    G__29525.cljs$core$IFn$_invoke$arity$variadic = G__29525__delegate;
    return G__29525;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__29560__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__29556_29561 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__29557_29562 = null;
      var count__29558_29563 = 0;
      var i__29559_29564 = 0;
      while (true) {
        if (i__29559_29564 < count__29558_29563) {
          var k_29565__$1 = cljs.core._nth.call(null, chunk__29557_29562, i__29559_29564);
          remove_attr_BANG_.call(null, elem__$1, k_29565__$1);
          var G__29566 = seq__29556_29561;
          var G__29567 = chunk__29557_29562;
          var G__29568 = count__29558_29563;
          var G__29569 = i__29559_29564 + 1;
          seq__29556_29561 = G__29566;
          chunk__29557_29562 = G__29567;
          count__29558_29563 = G__29568;
          i__29559_29564 = G__29569;
          continue;
        } else {
          var temp__4092__auto___29570 = cljs.core.seq.call(null, seq__29556_29561);
          if (temp__4092__auto___29570) {
            var seq__29556_29571__$1 = temp__4092__auto___29570;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29556_29571__$1)) {
              var c__4197__auto___29572 = cljs.core.chunk_first.call(null, seq__29556_29571__$1);
              var G__29573 = cljs.core.chunk_rest.call(null, seq__29556_29571__$1);
              var G__29574 = c__4197__auto___29572;
              var G__29575 = cljs.core.count.call(null, c__4197__auto___29572);
              var G__29576 = 0;
              seq__29556_29561 = G__29573;
              chunk__29557_29562 = G__29574;
              count__29558_29563 = G__29575;
              i__29559_29564 = G__29576;
              continue;
            } else {
              var k_29577__$1 = cljs.core.first.call(null, seq__29556_29571__$1);
              remove_attr_BANG_.call(null, elem__$1, k_29577__$1);
              var G__29578 = cljs.core.next.call(null, seq__29556_29571__$1);
              var G__29579 = null;
              var G__29580 = 0;
              var G__29581 = 0;
              seq__29556_29561 = G__29578;
              chunk__29557_29562 = G__29579;
              count__29558_29563 = G__29580;
              i__29559_29564 = G__29581;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__29560 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29560__delegate.call(this, elem, k, ks);
    };
    G__29560.cljs$lang$maxFixedArity = 2;
    G__29560.cljs$lang$applyTo = function(arglist__29582) {
      var elem = cljs.core.first(arglist__29582);
      arglist__29582 = cljs.core.next(arglist__29582);
      var k = cljs.core.first(arglist__29582);
      var ks = cljs.core.rest(arglist__29582);
      return G__29560__delegate(elem, k, ks);
    };
    G__29560.cljs$core$IFn$_invoke$arity$variadic = G__29560__delegate;
    return G__29560;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__29584 = dommy.template.__GT_node_like.call(null, elem);
    G__29584.style.display = show_QMARK_ ? "" : "none";
    return G__29584;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__29586 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__29586, false);
  return G__29586;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__29588 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__29588, true);
  return G__29588;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__29590 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__29590["constructor"] = Object;
    return G__29590;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", 1014019271)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj28658 = {};
  return obj28658;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3437__auto__ = port;
    if (and__3437__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4076__auto__ = port == null ? null : port;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj28660 = {};
  return obj28660;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3437__auto__ = port;
    if (and__3437__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4076__auto__ = port == null ? null : port;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj28662 = {};
  return obj28662;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3437__auto__ = chan;
    if (and__3437__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4076__auto__ = chan == null ? null : chan;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3437__auto__ = chan;
    if (and__3437__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4076__auto__ = chan == null ? null : chan;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj28664 = {};
  return obj28664;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3437__auto__ = h;
    if (and__3437__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4076__auto__ = h == null ? null : h;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3437__auto__ = h;
    if (and__3437__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4076__auto__ = h == null ? null : h;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj28666 = {};
  return obj28666;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3437__auto__ = b;
    if (and__3437__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4076__auto__ = b == null ? null : b;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3437__auto__ = b;
    if (and__3437__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4076__auto__ = b == null ? null : b;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__3437__auto__ = b;
    if (and__3437__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4076__auto__ = b == null ? null : b;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "itm", "itm", -1640426917, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj28668 = {};
  return obj28668;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__28699 = cnt + 1;
      cnt = G__28699;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4297__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4297__auto__) {
      var v_28700 = this$.pop();
      if (keep_QMARK_.call(null, v_28700)) {
        this$.unshift(v_28700);
      } else {
      }
      var G__28701 = x + 1;
      x = G__28701;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_28669 = 0;
  while (true) {
    var m_28670 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_28670 == null) {
    } else {
      m_28670.call(null);
      if (count_28669 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__28671 = count_28669 + 1;
        count_28669 = G__28671;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3437__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3437__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3437__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t28705 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t28705 = function(f, fn_handler, meta28706) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta28706 = meta28706;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t28705.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t28705.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t28705";
    cljs.core.async.impl.ioc_helpers.t28705.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.ioc-helpers/t28705");
    };
    cljs.core.async.impl.ioc_helpers.t28705.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t28705.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t28705.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t28705.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28707) {
      var self__ = this;
      var _28707__$1 = this;
      return self__.meta28706;
    };
    cljs.core.async.impl.ioc_helpers.t28705.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28707, meta28706__$1) {
      var self__ = this;
      var _28707__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t28705(self__.f, self__.fn_handler, meta28706__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t28705 = function __GT_t28705(f__$1, fn_handler__$1, meta28706) {
      return new cljs.core.async.impl.ioc_helpers.t28705(f__$1, fn_handler__$1, meta28706);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t28705(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e28709) {
    if (e28709 instanceof Object) {
      var ex = e28709;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e28709;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_28712_28714 = state;
    statearr_28712_28714[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_28712_28714[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_28713_28715 = state;
    statearr_28713_28715[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_28713_28715[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_28718_28720 = state;
    statearr_28718_28720[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_28718_28720[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_28719_28721 = state;
    statearr_28719_28721[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_28719_28721[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__28722) {
    var map__28727 = p__28722;
    var map__28727__$1 = cljs.core.seq_QMARK_.call(null, map__28727) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28727) : map__28727;
    var opts = map__28727__$1;
    var statearr_28728_28731 = state;
    statearr_28728_28731[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_28729_28732 = state;
      statearr_28729_28732[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_28730_28733 = state;
      statearr_28730_28733[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__28722 = null;
    if (arguments.length > 3) {
      p__28722 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__28722);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__28734) {
    var state = cljs.core.first(arglist__28734);
    arglist__28734 = cljs.core.next(arglist__28734);
    var cont_block = cljs.core.first(arglist__28734);
    arglist__28734 = cljs.core.next(arglist__28734);
    var ports = cljs.core.first(arglist__28734);
    var p__28722 = cljs.core.rest(arglist__28734);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__28722);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4030__auto__) {
  var self__ = this;
  var this__4030__auto____$1 = this;
  var h__3860__auto__ = self__.__hash;
  if (!(h__3860__auto__ == null)) {
    return h__3860__auto__;
  } else {
    var h__3860__auto____$1 = cljs.core.hash_imap.call(null, this__4030__auto____$1);
    self__.__hash = h__3860__auto____$1;
    return h__3860__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4035__auto__, k__4036__auto__) {
  var self__ = this;
  var this__4035__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4035__auto____$1, k__4036__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4037__auto__, k28736, else__4038__auto__) {
  var self__ = this;
  var this__4037__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k28736, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k28736, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k28736, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k28736, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k28736, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k28736, else__4038__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4042__auto__, k__4043__auto__, G__28735) {
  var self__ = this;
  var this__4042__auto____$1 = this;
  var pred__28738 = cljs.core.keyword_identical_QMARK_;
  var expr__28739 = k__4043__auto__;
  if (cljs.core.truth_(pred__28738.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__28739))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__28735, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28738.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__28739))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__28735, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__28738.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__28739))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__28735, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__28738.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__28739))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__28735, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__28738.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__28739))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__28735, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4043__auto__, G__28735), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  var self__ = this;
  var this__4049__auto____$1 = this;
  var pr_pair__4052__auto__ = function(keyval__4053__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__4050__auto__, cljs.core.pr_writer, "", " ", "", opts__4051__auto__, keyval__4053__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__4050__auto__, pr_pair__4052__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4051__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4040__auto__, entry__4041__auto__) {
  var self__ = this;
  var this__4040__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4041__auto__)) {
    return cljs.core._assoc.call(null, this__4040__auto____$1, cljs.core._nth.call(null, entry__4041__auto__, 0), cljs.core._nth.call(null, entry__4041__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4040__auto____$1, entry__4041__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4047__auto__) {
  var self__ = this;
  var this__4047__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4039__auto__) {
  var self__ = this;
  var this__4039__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4031__auto__, other__4032__auto__) {
  var self__ = this;
  var this__4031__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3437__auto__ = other__4032__auto__;
    if (cljs.core.truth_(and__3437__auto__)) {
      return this__4031__auto____$1.constructor === other__4032__auto__.constructor && cljs.core.equiv_map.call(null, this__4031__auto____$1, other__4032__auto__);
    } else {
      return and__3437__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4034__auto__, G__28735) {
  var self__ = this;
  var this__4034__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__28735, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4029__auto__) {
  var self__ = this;
  var this__4029__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4033__auto__) {
  var self__ = this;
  var this__4033__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4044__auto__, k__4045__auto__) {
  var self__ = this;
  var this__4044__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__4045__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4044__auto____$1), self__.__meta), k__4045__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4045__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4069__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4069__auto__, writer__4070__auto__) {
  return cljs.core._write.call(null, writer__4070__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__28737) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__28737), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__28737), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__28737), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__28737), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__28737), null, cljs.core.dissoc.call(null, G__28737, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_28742 = state;
  statearr_28742[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_28742;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3437__auto__ = exception;
      if (cljs.core.truth_(and__3437__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3437__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3437__auto__ = exception;
        if (cljs.core.truth_(and__3437__auto__)) {
          var and__3437__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3437__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3437__auto____$1;
          }
        } else {
          return and__3437__auto__;
        }
      }())) {
        var statearr_28748 = state;
        statearr_28748[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_28748[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_28748[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_28748[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_28748;
      } else {
        if (cljs.core.truth_(function() {
          var and__3437__auto__ = exception;
          if (cljs.core.truth_(and__3437__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3437__auto__;
          }
        }())) {
          var statearr_28749_28753 = state;
          statearr_28749_28753[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__28754 = state;
          state = G__28754;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3437__auto__ = exception;
            if (cljs.core.truth_(and__3437__auto__)) {
              var and__3437__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3437__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3437__auto____$1;
              }
            } else {
              return and__3437__auto__;
            }
          }())) {
            var statearr_28750 = state;
            statearr_28750[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_28750[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_28750;
          } else {
            if (cljs.core.truth_(function() {
              var and__3437__auto__ = cljs.core.not.call(null, exception);
              if (and__3437__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3437__auto__;
              }
            }())) {
              var statearr_28751 = state;
              statearr_28751[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_28751[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_28751;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_28752 = state;
                statearr_28752[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_28752[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_28752;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  throw new Error("No matching clause");
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t28675 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t28675 = function(val, box, meta28676) {
      this.val = val;
      this.box = box;
      this.meta28676 = meta28676;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t28675.cljs$lang$type = true;
    cljs.core.async.impl.channels.t28675.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t28675";
    cljs.core.async.impl.channels.t28675.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.channels/t28675");
    };
    cljs.core.async.impl.channels.t28675.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t28675.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28677) {
      var self__ = this;
      var _28677__$1 = this;
      return self__.meta28676;
    };
    cljs.core.async.impl.channels.t28675.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28677, meta28676__$1) {
      var self__ = this;
      var _28677__$1 = this;
      return new cljs.core.async.impl.channels.t28675(self__.val, self__.box, meta28676__$1);
    };
    cljs.core.async.impl.channels.__GT_t28675 = function __GT_t28675(val__$1, box__$1, meta28676) {
      return new cljs.core.async.impl.channels.t28675(val__$1, box__$1, meta28676);
    };
  }
  return new cljs.core.async.impl.channels.t28675(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4019__auto__, writer__4020__auto__, opts__4021__auto__) {
  return cljs.core._write.call(null, writer__4020__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj28679 = {};
  return obj28679;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__3437__auto__ = this$;
    if (and__3437__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4076__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3449__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__3437__auto__ = self__.buf;
      if (cljs.core.truth_(and__3437__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__3437__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_28680 = self__.takes.pop();
      if (taker_28680 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_28680)) {
          var take_cb_28681 = cljs.core.async.impl.protocols.commit.call(null, taker_28680);
          var val_28682 = cljs.core.truth_(function() {
            var and__3437__auto__ = self__.buf;
            if (cljs.core.truth_(and__3437__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__3437__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_28681, val_28682, taker_28680) {
            return function() {
              return take_cb_28681.call(null, val_28682);
            };
          }(take_cb_28681, val_28682, taker_28680));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_28683 = self__.puts.pop();
          if (putter_28683 == null) {
          } else {
            var put_handler_28684 = putter_28683.handler;
            var val_28685 = putter_28683.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_28684)) {
              var put_cb_28686 = cljs.core.async.impl.protocols.commit.call(null, put_handler_28684);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_28686, put_handler_28684, val_28685, putter_28683) {
                return function() {
                  return put_cb_28686.call(null, true);
                };
              }(put_cb_28686, put_handler_28684, val_28685, putter_28683));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_28685))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return put_cb.call(null, true);
        });
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__3437__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__3437__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__3437__auto__;
            }
          }())) {
            var has_val = function() {
              var and__3437__auto__ = self__.buf;
              if (cljs.core.truth_(and__3437__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__3437__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
            "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__3437__auto__ = self__.buf;
      if (cljs.core.truth_(and__3437__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__3437__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_28687 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_28687)) {
            var take_cb_28688 = cljs.core.async.impl.protocols.commit.call(null, taker_28687);
            var val_28689__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_28688, val_28689__$1, taker_28687) {
              return function() {
                return take_cb_28688.call(null, val_28689__$1);
              };
            }(take_cb_28688, val_28689__$1, taker_28687));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return take_cb.call(null, val);
        });
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_28690 = self__.puts.pop();
    if (putter_28690 == null) {
    } else {
      var put_handler_28691 = putter_28690.handler;
      var val_28692 = putter_28690.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_28691)) {
        var put_cb_28693 = cljs.core.async.impl.protocols.commit.call(null, put_handler_28691);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_28693, put_handler_28691, val_28692, putter_28690) {
          return function() {
            return put_cb_28693.call(null, true);
          };
        }(put_cb_28693, put_handler_28691, val_28692, putter_28690));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__3449__auto__ = exh;
    if (cljs.core.truth_(or__3449__auto__)) {
      return or__3449__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function() {
        var G__28698 = null;
        var G__28698__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e28696) {
            var t = e28696;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__28698__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e28697) {
            var t = e28697;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__28698 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__28698__1.call(this, buf__$1);
            case 2:
              return G__28698__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        return G__28698;
      }();
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__28633 = level + 1;
        level = G__28633;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_28634 = 0;
    while (true) {
      if (i_28634 < arr.length) {
        arr[i_28634] = null;
        var G__28635 = i_28634 + 1;
        i_28634 = G__28635;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__28636 = x_SINGLEQUOTE_;
                x__$1 = G__28636;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__28637 = x__$1;
        var G__28638 = k;
        var G__28639 = level - 1;
        var G__28640 = update;
        x = G__28637;
        k = G__28638;
        level = G__28639;
        update = G__28640;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
  return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_28641 = self__.level + 1;
      while (true) {
        if (i_28641 <= new_level + 1) {
          update[i_28641] = self__.header;
          var G__28642 = i_28641 + 1;
          i_28641 = G__28642;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_28643 = 0;
    while (true) {
      if (i_28643 <= self__.level) {
        var links_28644 = update[i_28643].forward;
        if (links_28644[i_28643] === x__$1) {
          links_28644[i_28643] = x__$1.forward[i_28643];
          var G__28645 = i_28643 + 1;
          i_28643 = G__28645;
          continue;
        } else {
          var G__28646 = i_28643 + 1;
          i_28643 = G__28646;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__28647 = x_SINGLEQUOTE_;
              x__$1 = G__28647;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__28648 = nx;
        var G__28649 = level__$1 - 1;
        x = G__28648;
        level__$1 = G__28649;
        continue;
      } else {
        var G__28650 = x;
        var G__28651 = level__$1 - 1;
        x = G__28650;
        level__$1 = G__28651;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__28652 = x_SINGLEQUOTE_;
              x__$1 = G__28652;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__28653 = nx;
        var G__28654 = level__$1 - 1;
        x = G__28653;
        level__$1 = G__28654;
        continue;
      } else {
        var G__28655 = x;
        var G__28656 = level__$1 - 1;
        x = G__28655;
        level__$1 = G__28656;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3449__auto__ = cljs.core.truth_(function() {
    var and__3437__auto__ = me;
    if (cljs.core.truth_(and__3437__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3437__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t25564 !== "undefined") {
  } else {
    cljs.core.async.t25564 = function(f, fn_handler, meta25565) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta25565 = meta25565;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25564.cljs$lang$type = true;
    cljs.core.async.t25564.cljs$lang$ctorStr = "cljs.core.async/t25564";
    cljs.core.async.t25564.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t25564");
    };
    cljs.core.async.t25564.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25564.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t25564.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t25564.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25566) {
      var self__ = this;
      var _25566__$1 = this;
      return self__.meta25565;
    };
    cljs.core.async.t25564.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25566, meta25565__$1) {
      var self__ = this;
      var _25566__$1 = this;
      return new cljs.core.async.t25564(self__.f, self__.fn_handler, meta25565__$1);
    };
    cljs.core.async.__GT_t25564 = function __GT_t25564(f__$1, fn_handler__$1, meta25565) {
      return new cljs.core.async.t25564(f__$1, fn_handler__$1, meta25565);
    };
  }
  return new cljs.core.async.t25564(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__25568 = buff;
  if (G__25568) {
    var bit__4099__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3449__auto__ = bit__4099__auto__;
      if (cljs.core.truth_(or__3449__auto__)) {
        return or__3449__auto__;
      } else {
        return G__25568.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__25568.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__25568);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__25568);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", 1080054743, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_25569 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_25569);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_25569);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var ret = temp__4090__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var retb = temp__4090__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, ret);
        });
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4297__auto___25570 = n;
  var x_25571 = 0;
  while (true) {
    if (x_25571 < n__4297__auto___25570) {
      a[x_25571] = 0;
      var G__25572 = x_25571 + 1;
      x_25571 = G__25572;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__25573 = i + 1;
      i = G__25573;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t25577 !== "undefined") {
  } else {
    cljs.core.async.t25577 = function(flag, alt_flag, meta25578) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta25578 = meta25578;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25577.cljs$lang$type = true;
    cljs.core.async.t25577.cljs$lang$ctorStr = "cljs.core.async/t25577";
    cljs.core.async.t25577.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t25577");
    };
    cljs.core.async.t25577.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25577.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t25577.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t25577.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25579) {
      var self__ = this;
      var _25579__$1 = this;
      return self__.meta25578;
    };
    cljs.core.async.t25577.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25579, meta25578__$1) {
      var self__ = this;
      var _25579__$1 = this;
      return new cljs.core.async.t25577(self__.flag, self__.alt_flag, meta25578__$1);
    };
    cljs.core.async.__GT_t25577 = function __GT_t25577(flag__$1, alt_flag__$1, meta25578) {
      return new cljs.core.async.t25577(flag__$1, alt_flag__$1, meta25578);
    };
  }
  return new cljs.core.async.t25577(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t25583 !== "undefined") {
  } else {
    cljs.core.async.t25583 = function(cb, flag, alt_handler, meta25584) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta25584 = meta25584;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25583.cljs$lang$type = true;
    cljs.core.async.t25583.cljs$lang$ctorStr = "cljs.core.async/t25583";
    cljs.core.async.t25583.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t25583");
    };
    cljs.core.async.t25583.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25583.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t25583.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t25583.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25585) {
      var self__ = this;
      var _25585__$1 = this;
      return self__.meta25584;
    };
    cljs.core.async.t25583.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25585, meta25584__$1) {
      var self__ = this;
      var _25585__$1 = this;
      return new cljs.core.async.t25583(self__.cb, self__.flag, self__.alt_handler, meta25584__$1);
    };
    cljs.core.async.__GT_t25583 = function __GT_t25583(cb__$1, flag__$1, alt_handler__$1, meta25584) {
      return new cljs.core.async.t25583(cb__$1, flag__$1, alt_handler__$1, meta25584);
    };
  }
  return new cljs.core.async.t25583(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__25586_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25586_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__25587_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25587_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3449__auto__ = wport;
            if (cljs.core.truth_(or__3449__auto__)) {
              return or__3449__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__25588 = i + 1;
          i = G__25588;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3449__auto__ = ret;
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3437__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3437__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3437__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__25589) {
    var map__25591 = p__25589;
    var map__25591__$1 = cljs.core.seq_QMARK_.call(null, map__25591) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25591) : map__25591;
    var opts = map__25591__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__25589 = null;
    if (arguments.length > 1) {
      p__25589 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__25589);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__25592) {
    var ports = cljs.core.first(arglist__25592);
    var p__25589 = cljs.core.rest(arglist__25592);
    return alts_BANG___delegate(ports, p__25589);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6151__auto___25687 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_25663) {
          var state_val_25664 = state_25663[1];
          if (state_val_25664 === 1) {
            var state_25663__$1 = state_25663;
            var statearr_25665_25688 = state_25663__$1;
            statearr_25665_25688[2] = null;
            statearr_25665_25688[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_25664 === 2) {
              var state_25663__$1 = state_25663;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25663__$1, 4, from);
            } else {
              if (state_val_25664 === 3) {
                var inst_25661 = state_25663[2];
                var state_25663__$1 = state_25663;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25663__$1, inst_25661);
              } else {
                if (state_val_25664 === 4) {
                  var inst_25642 = state_25663[7];
                  var inst_25642__$1 = state_25663[2];
                  var inst_25643 = inst_25642__$1 == null;
                  var state_25663__$1 = function() {
                    var statearr_25666 = state_25663;
                    statearr_25666[7] = inst_25642__$1;
                    return statearr_25666;
                  }();
                  if (cljs.core.truth_(inst_25643)) {
                    var statearr_25667_25689 = state_25663__$1;
                    statearr_25667_25689[1] = 5;
                  } else {
                    var statearr_25668_25690 = state_25663__$1;
                    statearr_25668_25690[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_25664 === 5) {
                    var state_25663__$1 = state_25663;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_25669_25691 = state_25663__$1;
                      statearr_25669_25691[1] = 8;
                    } else {
                      var statearr_25670_25692 = state_25663__$1;
                      statearr_25670_25692[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_25664 === 6) {
                      var inst_25642 = state_25663[7];
                      var state_25663__$1 = state_25663;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25663__$1, 11, to, inst_25642);
                    } else {
                      if (state_val_25664 === 7) {
                        var inst_25659 = state_25663[2];
                        var state_25663__$1 = state_25663;
                        var statearr_25671_25693 = state_25663__$1;
                        statearr_25671_25693[2] = inst_25659;
                        statearr_25671_25693[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_25664 === 8) {
                          var inst_25646 = cljs.core.async.close_BANG_.call(null, to);
                          var state_25663__$1 = state_25663;
                          var statearr_25672_25694 = state_25663__$1;
                          statearr_25672_25694[2] = inst_25646;
                          statearr_25672_25694[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_25664 === 9) {
                            var state_25663__$1 = state_25663;
                            var statearr_25673_25695 = state_25663__$1;
                            statearr_25673_25695[2] = null;
                            statearr_25673_25695[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_25664 === 10) {
                              var inst_25649 = state_25663[2];
                              var state_25663__$1 = state_25663;
                              var statearr_25674_25696 = state_25663__$1;
                              statearr_25674_25696[2] = inst_25649;
                              statearr_25674_25696[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_25664 === 11) {
                                var inst_25652 = state_25663[2];
                                var state_25663__$1 = state_25663;
                                if (cljs.core.truth_(inst_25652)) {
                                  var statearr_25675_25697 = state_25663__$1;
                                  statearr_25675_25697[1] = 12;
                                } else {
                                  var statearr_25676_25698 = state_25663__$1;
                                  statearr_25676_25698[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_25664 === 12) {
                                  var state_25663__$1 = state_25663;
                                  var statearr_25677_25699 = state_25663__$1;
                                  statearr_25677_25699[2] = null;
                                  statearr_25677_25699[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_25664 === 13) {
                                    var state_25663__$1 = state_25663;
                                    var statearr_25678_25700 = state_25663__$1;
                                    statearr_25678_25700[2] = null;
                                    statearr_25678_25700[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_25664 === 14) {
                                      var inst_25657 = state_25663[2];
                                      var state_25663__$1 = state_25663;
                                      var statearr_25679_25701 = state_25663__$1;
                                      statearr_25679_25701[2] = inst_25657;
                                      statearr_25679_25701[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_25683 = [null, null, null, null, null, null, null, null];
              statearr_25683[0] = state_machine__6137__auto__;
              statearr_25683[1] = 1;
              return statearr_25683;
            };
            var state_machine__6137__auto____1 = function(state_25663) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_25663);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e25684) {
                    if (e25684 instanceof Object) {
                      var ex__6140__auto__ = e25684;
                      var statearr_25685_25702 = state_25663;
                      statearr_25685_25702[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25663);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e25684;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__25703 = state_25663;
                  state_25663 = G__25703;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_25663) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_25663);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_25686 = f__6152__auto__.call(null);
        statearr_25686[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___25687;
        return statearr_25686;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -1637084636, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__25886) {
      var vec__25887 = p__25886;
      var v = cljs.core.nth.call(null, vec__25887, 0, null);
      var p = cljs.core.nth.call(null, vec__25887, 1, null);
      var job = vec__25887;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__6151__auto___26068 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results) {
          return function() {
            var f__6152__auto__ = function() {
              var switch__6136__auto__ = function(c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results) {
                return function(state_25892) {
                  var state_val_25893 = state_25892[1];
                  if (state_val_25893 === 2) {
                    var inst_25889 = state_25892[2];
                    var inst_25890 = cljs.core.async.close_BANG_.call(null, res);
                    var state_25892__$1 = function() {
                      var statearr_25894 = state_25892;
                      statearr_25894[7] = inst_25889;
                      return statearr_25894;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25892__$1, inst_25890);
                  } else {
                    if (state_val_25893 === 1) {
                      var state_25892__$1 = state_25892;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25892__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results);
              return function(switch__6136__auto__, c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results) {
                return function() {
                  var state_machine__6137__auto__ = null;
                  var state_machine__6137__auto____0 = function() {
                    var statearr_25898 = [null, null, null, null, null, null, null, null];
                    statearr_25898[0] = state_machine__6137__auto__;
                    statearr_25898[1] = 1;
                    return statearr_25898;
                  };
                  var state_machine__6137__auto____1 = function(state_25892) {
                    while (true) {
                      var ret_value__6138__auto__ = function() {
                        try {
                          while (true) {
                            var result__6139__auto__ = switch__6136__auto__.call(null, state_25892);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                              continue;
                            } else {
                              return result__6139__auto__;
                            }
                            break;
                          }
                        } catch (e25899) {
                          if (e25899 instanceof Object) {
                            var ex__6140__auto__ = e25899;
                            var statearr_25900_26069 = state_25892;
                            statearr_25900_26069[5] = ex__6140__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25892);
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              throw e25899;
                            } else {
                              return null;
                            }
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        var G__26070 = state_25892;
                        state_25892 = G__26070;
                        continue;
                      } else {
                        return ret_value__6138__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__6137__auto__ = function(state_25892) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__6137__auto____0.call(this);
                      case 1:
                        return state_machine__6137__auto____1.call(this, state_25892);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
                  state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
                  return state_machine__6137__auto__;
                }();
              }(switch__6136__auto__, c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results);
            }();
            var state__6153__auto__ = function() {
              var statearr_25901 = f__6152__auto__.call(null);
              statearr_25901[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26068;
              return statearr_25901;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
          };
        }(c__6151__auto___26068, res, vec__25887, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__25902) {
      var vec__25903 = p__25902;
      var v = cljs.core.nth.call(null, vec__25903, 0, null);
      var p = cljs.core.nth.call(null, vec__25903, 1, null);
      var job = vec__25903;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4297__auto___26071 = n;
  var __26072 = 0;
  while (true) {
    if (__26072 < n__4297__auto___26071) {
      var G__25904_26073 = type;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "async", "async", 1107031534), G__25904_26073)) {
        var c__6151__auto___26074 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(__26072, c__6151__auto___26074, G__25904_26073) {
          return function() {
            var f__6152__auto__ = function() {
              var switch__6136__auto__ = function(__26072, c__6151__auto___26074, G__25904_26073) {
                return function(state_25917) {
                  var state_val_25918 = state_25917[1];
                  if (state_val_25918 === 7) {
                    var inst_25913 = state_25917[2];
                    var state_25917__$1 = state_25917;
                    var statearr_25919_26075 = state_25917__$1;
                    statearr_25919_26075[2] = inst_25913;
                    statearr_25919_26075[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_25918 === 6) {
                      var state_25917__$1 = state_25917;
                      var statearr_25920_26076 = state_25917__$1;
                      statearr_25920_26076[2] = null;
                      statearr_25920_26076[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_25918 === 5) {
                        var state_25917__$1 = state_25917;
                        var statearr_25921_26077 = state_25917__$1;
                        statearr_25921_26077[2] = null;
                        statearr_25921_26077[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_25918 === 4) {
                          var inst_25907 = state_25917[2];
                          var inst_25908 = async.call(null, inst_25907);
                          var state_25917__$1 = state_25917;
                          if (cljs.core.truth_(inst_25908)) {
                            var statearr_25922_26078 = state_25917__$1;
                            statearr_25922_26078[1] = 5;
                          } else {
                            var statearr_25923_26079 = state_25917__$1;
                            statearr_25923_26079[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_25918 === 3) {
                            var inst_25915 = state_25917[2];
                            var state_25917__$1 = state_25917;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25917__$1, inst_25915);
                          } else {
                            if (state_val_25918 === 2) {
                              var state_25917__$1 = state_25917;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25917__$1, 4, jobs);
                            } else {
                              if (state_val_25918 === 1) {
                                var state_25917__$1 = state_25917;
                                var statearr_25924_26080 = state_25917__$1;
                                statearr_25924_26080[2] = null;
                                statearr_25924_26080[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
              }(__26072, c__6151__auto___26074, G__25904_26073);
              return function(__26072, switch__6136__auto__, c__6151__auto___26074, G__25904_26073) {
                return function() {
                  var state_machine__6137__auto__ = null;
                  var state_machine__6137__auto____0 = function() {
                    var statearr_25928 = [null, null, null, null, null, null, null];
                    statearr_25928[0] = state_machine__6137__auto__;
                    statearr_25928[1] = 1;
                    return statearr_25928;
                  };
                  var state_machine__6137__auto____1 = function(state_25917) {
                    while (true) {
                      var ret_value__6138__auto__ = function() {
                        try {
                          while (true) {
                            var result__6139__auto__ = switch__6136__auto__.call(null, state_25917);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                              continue;
                            } else {
                              return result__6139__auto__;
                            }
                            break;
                          }
                        } catch (e25929) {
                          if (e25929 instanceof Object) {
                            var ex__6140__auto__ = e25929;
                            var statearr_25930_26081 = state_25917;
                            statearr_25930_26081[5] = ex__6140__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25917);
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              throw e25929;
                            } else {
                              return null;
                            }
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        var G__26082 = state_25917;
                        state_25917 = G__26082;
                        continue;
                      } else {
                        return ret_value__6138__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__6137__auto__ = function(state_25917) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__6137__auto____0.call(this);
                      case 1:
                        return state_machine__6137__auto____1.call(this, state_25917);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
                  state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
                  return state_machine__6137__auto__;
                }();
              }(__26072, switch__6136__auto__, c__6151__auto___26074, G__25904_26073);
            }();
            var state__6153__auto__ = function() {
              var statearr_25931 = f__6152__auto__.call(null);
              statearr_25931[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26074;
              return statearr_25931;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
          };
        }(__26072, c__6151__auto___26074, G__25904_26073));
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "compute", "compute", 1964407721), G__25904_26073)) {
          var c__6151__auto___26083 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__26072, c__6151__auto___26083, G__25904_26073) {
            return function() {
              var f__6152__auto__ = function() {
                var switch__6136__auto__ = function(__26072, c__6151__auto___26083, G__25904_26073) {
                  return function(state_25944) {
                    var state_val_25945 = state_25944[1];
                    if (state_val_25945 === 7) {
                      var inst_25940 = state_25944[2];
                      var state_25944__$1 = state_25944;
                      var statearr_25946_26084 = state_25944__$1;
                      statearr_25946_26084[2] = inst_25940;
                      statearr_25946_26084[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_25945 === 6) {
                        var state_25944__$1 = state_25944;
                        var statearr_25947_26085 = state_25944__$1;
                        statearr_25947_26085[2] = null;
                        statearr_25947_26085[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_25945 === 5) {
                          var state_25944__$1 = state_25944;
                          var statearr_25948_26086 = state_25944__$1;
                          statearr_25948_26086[2] = null;
                          statearr_25948_26086[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_25945 === 4) {
                            var inst_25934 = state_25944[2];
                            var inst_25935 = process.call(null, inst_25934);
                            var state_25944__$1 = state_25944;
                            if (cljs.core.truth_(inst_25935)) {
                              var statearr_25949_26087 = state_25944__$1;
                              statearr_25949_26087[1] = 5;
                            } else {
                              var statearr_25950_26088 = state_25944__$1;
                              statearr_25950_26088[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_25945 === 3) {
                              var inst_25942 = state_25944[2];
                              var state_25944__$1 = state_25944;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25944__$1, inst_25942);
                            } else {
                              if (state_val_25945 === 2) {
                                var state_25944__$1 = state_25944;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25944__$1, 4, jobs);
                              } else {
                                if (state_val_25945 === 1) {
                                  var state_25944__$1 = state_25944;
                                  var statearr_25951_26089 = state_25944__$1;
                                  statearr_25951_26089[2] = null;
                                  statearr_25951_26089[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__26072, c__6151__auto___26083, G__25904_26073);
                return function(__26072, switch__6136__auto__, c__6151__auto___26083, G__25904_26073) {
                  return function() {
                    var state_machine__6137__auto__ = null;
                    var state_machine__6137__auto____0 = function() {
                      var statearr_25955 = [null, null, null, null, null, null, null];
                      statearr_25955[0] = state_machine__6137__auto__;
                      statearr_25955[1] = 1;
                      return statearr_25955;
                    };
                    var state_machine__6137__auto____1 = function(state_25944) {
                      while (true) {
                        var ret_value__6138__auto__ = function() {
                          try {
                            while (true) {
                              var result__6139__auto__ = switch__6136__auto__.call(null, state_25944);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                                continue;
                              } else {
                                return result__6139__auto__;
                              }
                              break;
                            }
                          } catch (e25956) {
                            if (e25956 instanceof Object) {
                              var ex__6140__auto__ = e25956;
                              var statearr_25957_26090 = state_25944;
                              statearr_25957_26090[5] = ex__6140__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25944);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                throw e25956;
                              } else {
                                return null;
                              }
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          var G__26091 = state_25944;
                          state_25944 = G__26091;
                          continue;
                        } else {
                          return ret_value__6138__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6137__auto__ = function(state_25944) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6137__auto____0.call(this);
                        case 1:
                          return state_machine__6137__auto____1.call(this, state_25944);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
                    state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
                    return state_machine__6137__auto__;
                  }();
                }(__26072, switch__6136__auto__, c__6151__auto___26083, G__25904_26073);
              }();
              var state__6153__auto__ = function() {
                var statearr_25958 = f__6152__auto__.call(null);
                statearr_25958[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26083;
                return statearr_25958;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
            };
          }(__26072, c__6151__auto___26083, G__25904_26073));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));
          } else {
          }
        }
      }
      var G__26092 = __26072 + 1;
      __26072 = G__26092;
      continue;
    } else {
    }
    break;
  }
  var c__6151__auto___26093 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_25979) {
        var state_val_25980 = state_25979[1];
        if (state_val_25980 === 9) {
          var inst_25972 = state_25979[2];
          var state_25979__$1 = function() {
            var statearr_25981 = state_25979;
            statearr_25981[7] = inst_25972;
            return statearr_25981;
          }();
          var statearr_25982_26094 = state_25979__$1;
          statearr_25982_26094[2] = null;
          statearr_25982_26094[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_25980 === 8) {
            var inst_25966 = state_25979[8];
            var inst_25970 = state_25979[2];
            var state_25979__$1 = function() {
              var statearr_25983 = state_25979;
              statearr_25983[9] = inst_25970;
              return statearr_25983;
            }();
            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25979__$1, 9, results, inst_25966);
          } else {
            if (state_val_25980 === 7) {
              var inst_25975 = state_25979[2];
              var state_25979__$1 = state_25979;
              var statearr_25984_26095 = state_25979__$1;
              statearr_25984_26095[2] = inst_25975;
              statearr_25984_26095[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_25980 === 6) {
                var inst_25966 = state_25979[8];
                var inst_25961 = state_25979[10];
                var inst_25966__$1 = cljs.core.async.chan.call(null, 1);
                var inst_25967 = [inst_25961, inst_25966__$1];
                var inst_25968 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_25967, null);
                var state_25979__$1 = function() {
                  var statearr_25985 = state_25979;
                  statearr_25985[8] = inst_25966__$1;
                  return statearr_25985;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25979__$1, 8, jobs, inst_25968);
              } else {
                if (state_val_25980 === 5) {
                  var inst_25964 = cljs.core.async.close_BANG_.call(null, jobs);
                  var state_25979__$1 = state_25979;
                  var statearr_25986_26096 = state_25979__$1;
                  statearr_25986_26096[2] = inst_25964;
                  statearr_25986_26096[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_25980 === 4) {
                    var inst_25961 = state_25979[10];
                    var inst_25961__$1 = state_25979[2];
                    var inst_25962 = inst_25961__$1 == null;
                    var state_25979__$1 = function() {
                      var statearr_25987 = state_25979;
                      statearr_25987[10] = inst_25961__$1;
                      return statearr_25987;
                    }();
                    if (cljs.core.truth_(inst_25962)) {
                      var statearr_25988_26097 = state_25979__$1;
                      statearr_25988_26097[1] = 5;
                    } else {
                      var statearr_25989_26098 = state_25979__$1;
                      statearr_25989_26098[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_25980 === 3) {
                      var inst_25977 = state_25979[2];
                      var state_25979__$1 = state_25979;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25979__$1, inst_25977);
                    } else {
                      if (state_val_25980 === 2) {
                        var state_25979__$1 = state_25979;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25979__$1, 4, from);
                      } else {
                        if (state_val_25980 === 1) {
                          var state_25979__$1 = state_25979;
                          var statearr_25990_26099 = state_25979__$1;
                          statearr_25990_26099[2] = null;
                          statearr_25990_26099[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_25994 = [null, null, null, null, null, null, null, null, null, null, null];
            statearr_25994[0] = state_machine__6137__auto__;
            statearr_25994[1] = 1;
            return statearr_25994;
          };
          var state_machine__6137__auto____1 = function(state_25979) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_25979);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e25995) {
                  if (e25995 instanceof Object) {
                    var ex__6140__auto__ = e25995;
                    var statearr_25996_26100 = state_25979;
                    statearr_25996_26100[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25979);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e25995;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__26101 = state_25979;
                state_25979 = G__26101;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_25979) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_25979);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_25997 = f__6152__auto__.call(null);
      statearr_25997[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26093;
      return statearr_25997;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  var c__6151__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_26035) {
        var state_val_26036 = state_26035[1];
        if (state_val_26036 === 1) {
          var state_26035__$1 = state_26035;
          var statearr_26037_26102 = state_26035__$1;
          statearr_26037_26102[2] = null;
          statearr_26037_26102[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_26036 === 2) {
            var state_26035__$1 = state_26035;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26035__$1, 4, results);
          } else {
            if (state_val_26036 === 3) {
              var inst_26033 = state_26035[2];
              var state_26035__$1 = state_26035;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26035__$1, inst_26033);
            } else {
              if (state_val_26036 === 4) {
                var inst_26000 = state_26035[7];
                var inst_26000__$1 = state_26035[2];
                var inst_26001 = inst_26000__$1 == null;
                var state_26035__$1 = function() {
                  var statearr_26038 = state_26035;
                  statearr_26038[7] = inst_26000__$1;
                  return statearr_26038;
                }();
                if (cljs.core.truth_(inst_26001)) {
                  var statearr_26039_26103 = state_26035__$1;
                  statearr_26039_26103[1] = 5;
                } else {
                  var statearr_26040_26104 = state_26035__$1;
                  statearr_26040_26104[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_26036 === 5) {
                  var state_26035__$1 = state_26035;
                  if (cljs.core.truth_(close_QMARK_)) {
                    var statearr_26041_26105 = state_26035__$1;
                    statearr_26041_26105[1] = 8;
                  } else {
                    var statearr_26042_26106 = state_26035__$1;
                    statearr_26042_26106[1] = 9;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_26036 === 6) {
                    var inst_26000 = state_26035[7];
                    var state_26035__$1 = state_26035;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26035__$1, 11, inst_26000);
                  } else {
                    if (state_val_26036 === 7) {
                      var inst_26031 = state_26035[2];
                      var state_26035__$1 = state_26035;
                      var statearr_26043_26107 = state_26035__$1;
                      statearr_26043_26107[2] = inst_26031;
                      statearr_26043_26107[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_26036 === 8) {
                        var inst_26004 = cljs.core.async.close_BANG_.call(null, to);
                        var state_26035__$1 = state_26035;
                        var statearr_26044_26108 = state_26035__$1;
                        statearr_26044_26108[2] = inst_26004;
                        statearr_26044_26108[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_26036 === 9) {
                          var state_26035__$1 = state_26035;
                          var statearr_26045_26109 = state_26035__$1;
                          statearr_26045_26109[2] = null;
                          statearr_26045_26109[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_26036 === 10) {
                            var inst_26007 = state_26035[2];
                            var state_26035__$1 = state_26035;
                            var statearr_26046_26110 = state_26035__$1;
                            statearr_26046_26110[2] = inst_26007;
                            statearr_26046_26110[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_26036 === 11) {
                              var inst_26010 = state_26035[2];
                              var state_26035__$1 = function() {
                                var statearr_26047 = state_26035;
                                statearr_26047[8] = inst_26010;
                                return statearr_26047;
                              }();
                              var statearr_26048_26111 = state_26035__$1;
                              statearr_26048_26111[2] = null;
                              statearr_26048_26111[1] = 12;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_26036 === 12) {
                                var inst_26010 = state_26035[8];
                                var state_26035__$1 = state_26035;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26035__$1, 14, inst_26010);
                              } else {
                                if (state_val_26036 === 13) {
                                  var inst_26028 = state_26035[2];
                                  var state_26035__$1 = function() {
                                    var statearr_26049 = state_26035;
                                    statearr_26049[9] = inst_26028;
                                    return statearr_26049;
                                  }();
                                  var statearr_26050_26112 = state_26035__$1;
                                  statearr_26050_26112[2] = null;
                                  statearr_26050_26112[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_26036 === 14) {
                                    var inst_26015 = state_26035[10];
                                    var inst_26013 = state_26035[11];
                                    var inst_26013__$1 = state_26035[2];
                                    var inst_26014 = inst_26013__$1 == null;
                                    var inst_26015__$1 = cljs.core.not.call(null, inst_26014);
                                    var state_26035__$1 = function() {
                                      var statearr_26051 = state_26035;
                                      statearr_26051[10] = inst_26015__$1;
                                      statearr_26051[11] = inst_26013__$1;
                                      return statearr_26051;
                                    }();
                                    if (inst_26015__$1) {
                                      var statearr_26052_26113 = state_26035__$1;
                                      statearr_26052_26113[1] = 15;
                                    } else {
                                      var statearr_26053_26114 = state_26035__$1;
                                      statearr_26053_26114[1] = 16;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_26036 === 15) {
                                      var inst_26013 = state_26035[11];
                                      var state_26035__$1 = state_26035;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26035__$1, 18, to, inst_26013);
                                    } else {
                                      if (state_val_26036 === 16) {
                                        var inst_26015 = state_26035[10];
                                        var state_26035__$1 = state_26035;
                                        var statearr_26054_26115 = state_26035__$1;
                                        statearr_26054_26115[2] = inst_26015;
                                        statearr_26054_26115[1] = 17;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_26036 === 17) {
                                          var inst_26021 = state_26035[2];
                                          var state_26035__$1 = state_26035;
                                          if (cljs.core.truth_(inst_26021)) {
                                            var statearr_26055_26116 = state_26035__$1;
                                            statearr_26055_26116[1] = 19;
                                          } else {
                                            var statearr_26056_26117 = state_26035__$1;
                                            statearr_26056_26117[1] = 20;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_26036 === 18) {
                                            var inst_26018 = state_26035[2];
                                            var state_26035__$1 = state_26035;
                                            var statearr_26057_26118 = state_26035__$1;
                                            statearr_26057_26118[2] = inst_26018;
                                            statearr_26057_26118[1] = 17;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_26036 === 19) {
                                              var state_26035__$1 = state_26035;
                                              var statearr_26058_26119 = state_26035__$1;
                                              statearr_26058_26119[2] = null;
                                              statearr_26058_26119[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_26036 === 20) {
                                                var state_26035__$1 = state_26035;
                                                var statearr_26059_26120 = state_26035__$1;
                                                statearr_26059_26120[2] = null;
                                                statearr_26059_26120[1] = 21;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_26036 === 21) {
                                                  var inst_26026 = state_26035[2];
                                                  var state_26035__$1 = state_26035;
                                                  var statearr_26060_26121 = state_26035__$1;
                                                  statearr_26060_26121[2] = inst_26026;
                                                  statearr_26060_26121[1] = 13;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_26064 = [null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_26064[0] = state_machine__6137__auto__;
            statearr_26064[1] = 1;
            return statearr_26064;
          };
          var state_machine__6137__auto____1 = function(state_26035) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_26035);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e26065) {
                  if (e26065 instanceof Object) {
                    var ex__6140__auto__ = e26065;
                    var statearr_26066_26122 = state_26035;
                    statearr_26066_26122[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26035);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e26065;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__26123 = state_26035;
                state_26035 = G__26123;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_26035) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_26035);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_26067 = f__6152__auto__.call(null);
      statearr_26067[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto__;
      return statearr_26067;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  return c__6151__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1107031534));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1964407721));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6151__auto___26224 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_26199) {
          var state_val_26200 = state_26199[1];
          if (state_val_26200 === 1) {
            var state_26199__$1 = state_26199;
            var statearr_26201_26225 = state_26199__$1;
            statearr_26201_26225[2] = null;
            statearr_26201_26225[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_26200 === 2) {
              var state_26199__$1 = state_26199;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26199__$1, 4, ch);
            } else {
              if (state_val_26200 === 3) {
                var inst_26197 = state_26199[2];
                var state_26199__$1 = state_26199;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26199__$1, inst_26197);
              } else {
                if (state_val_26200 === 4) {
                  var inst_26176 = state_26199[7];
                  var inst_26176__$1 = state_26199[2];
                  var inst_26177 = inst_26176__$1 == null;
                  var state_26199__$1 = function() {
                    var statearr_26202 = state_26199;
                    statearr_26202[7] = inst_26176__$1;
                    return statearr_26202;
                  }();
                  if (cljs.core.truth_(inst_26177)) {
                    var statearr_26203_26226 = state_26199__$1;
                    statearr_26203_26226[1] = 5;
                  } else {
                    var statearr_26204_26227 = state_26199__$1;
                    statearr_26204_26227[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_26200 === 5) {
                    var inst_26179 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_26180 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_26199__$1 = function() {
                      var statearr_26205 = state_26199;
                      statearr_26205[8] = inst_26179;
                      return statearr_26205;
                    }();
                    var statearr_26206_26228 = state_26199__$1;
                    statearr_26206_26228[2] = inst_26180;
                    statearr_26206_26228[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_26200 === 6) {
                      var inst_26176 = state_26199[7];
                      var inst_26182 = p.call(null, inst_26176);
                      var state_26199__$1 = state_26199;
                      if (cljs.core.truth_(inst_26182)) {
                        var statearr_26207_26229 = state_26199__$1;
                        statearr_26207_26229[1] = 9;
                      } else {
                        var statearr_26208_26230 = state_26199__$1;
                        statearr_26208_26230[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_26200 === 7) {
                        var inst_26195 = state_26199[2];
                        var state_26199__$1 = state_26199;
                        var statearr_26209_26231 = state_26199__$1;
                        statearr_26209_26231[2] = inst_26195;
                        statearr_26209_26231[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_26200 === 8) {
                          var inst_26188 = state_26199[2];
                          var state_26199__$1 = state_26199;
                          if (cljs.core.truth_(inst_26188)) {
                            var statearr_26210_26232 = state_26199__$1;
                            statearr_26210_26232[1] = 12;
                          } else {
                            var statearr_26211_26233 = state_26199__$1;
                            statearr_26211_26233[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_26200 === 9) {
                            var state_26199__$1 = state_26199;
                            var statearr_26212_26234 = state_26199__$1;
                            statearr_26212_26234[2] = tc;
                            statearr_26212_26234[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_26200 === 10) {
                              var state_26199__$1 = state_26199;
                              var statearr_26213_26235 = state_26199__$1;
                              statearr_26213_26235[2] = fc;
                              statearr_26213_26235[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_26200 === 11) {
                                var inst_26176 = state_26199[7];
                                var inst_26186 = state_26199[2];
                                var state_26199__$1 = state_26199;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26199__$1, 8, inst_26186, inst_26176);
                              } else {
                                if (state_val_26200 === 12) {
                                  var state_26199__$1 = state_26199;
                                  var statearr_26214_26236 = state_26199__$1;
                                  statearr_26214_26236[2] = null;
                                  statearr_26214_26236[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_26200 === 13) {
                                    var state_26199__$1 = state_26199;
                                    var statearr_26215_26237 = state_26199__$1;
                                    statearr_26215_26237[2] = null;
                                    statearr_26215_26237[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_26200 === 14) {
                                      var inst_26193 = state_26199[2];
                                      var state_26199__$1 = state_26199;
                                      var statearr_26216_26238 = state_26199__$1;
                                      statearr_26216_26238[2] = inst_26193;
                                      statearr_26216_26238[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_26220 = [null, null, null, null, null, null, null, null, null];
              statearr_26220[0] = state_machine__6137__auto__;
              statearr_26220[1] = 1;
              return statearr_26220;
            };
            var state_machine__6137__auto____1 = function(state_26199) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_26199);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e26221) {
                    if (e26221 instanceof Object) {
                      var ex__6140__auto__ = e26221;
                      var statearr_26222_26239 = state_26199;
                      statearr_26222_26239[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26199);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e26221;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__26240 = state_26199;
                  state_26199 = G__26240;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_26199) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_26199);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_26223 = f__6152__auto__.call(null);
        statearr_26223[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26224;
        return statearr_26223;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6151__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_26287) {
        var state_val_26288 = state_26287[1];
        if (state_val_26288 === 7) {
          var inst_26283 = state_26287[2];
          var state_26287__$1 = state_26287;
          var statearr_26289_26305 = state_26287__$1;
          statearr_26289_26305[2] = inst_26283;
          statearr_26289_26305[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_26288 === 6) {
            var inst_26276 = state_26287[7];
            var inst_26273 = state_26287[8];
            var inst_26280 = f.call(null, inst_26273, inst_26276);
            var inst_26273__$1 = inst_26280;
            var state_26287__$1 = function() {
              var statearr_26290 = state_26287;
              statearr_26290[8] = inst_26273__$1;
              return statearr_26290;
            }();
            var statearr_26291_26306 = state_26287__$1;
            statearr_26291_26306[2] = null;
            statearr_26291_26306[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_26288 === 5) {
              var inst_26273 = state_26287[8];
              var state_26287__$1 = state_26287;
              var statearr_26292_26307 = state_26287__$1;
              statearr_26292_26307[2] = inst_26273;
              statearr_26292_26307[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_26288 === 4) {
                var inst_26276 = state_26287[7];
                var inst_26276__$1 = state_26287[2];
                var inst_26277 = inst_26276__$1 == null;
                var state_26287__$1 = function() {
                  var statearr_26293 = state_26287;
                  statearr_26293[7] = inst_26276__$1;
                  return statearr_26293;
                }();
                if (cljs.core.truth_(inst_26277)) {
                  var statearr_26294_26308 = state_26287__$1;
                  statearr_26294_26308[1] = 5;
                } else {
                  var statearr_26295_26309 = state_26287__$1;
                  statearr_26295_26309[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_26288 === 3) {
                  var inst_26285 = state_26287[2];
                  var state_26287__$1 = state_26287;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26287__$1, inst_26285);
                } else {
                  if (state_val_26288 === 2) {
                    var state_26287__$1 = state_26287;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26287__$1, 4, ch);
                  } else {
                    if (state_val_26288 === 1) {
                      var inst_26273 = init;
                      var state_26287__$1 = function() {
                        var statearr_26296 = state_26287;
                        statearr_26296[8] = inst_26273;
                        return statearr_26296;
                      }();
                      var statearr_26297_26310 = state_26287__$1;
                      statearr_26297_26310[2] = null;
                      statearr_26297_26310[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_26301 = [null, null, null, null, null, null, null, null, null];
            statearr_26301[0] = state_machine__6137__auto__;
            statearr_26301[1] = 1;
            return statearr_26301;
          };
          var state_machine__6137__auto____1 = function(state_26287) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_26287);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e26302) {
                  if (e26302 instanceof Object) {
                    var ex__6140__auto__ = e26302;
                    var statearr_26303_26311 = state_26287;
                    statearr_26303_26311[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26287);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e26302;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__26312 = state_26287;
                state_26287 = G__26312;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_26287) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_26287);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_26304 = f__6152__auto__.call(null);
      statearr_26304[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto__;
      return statearr_26304;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  return c__6151__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6151__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_26386) {
          var state_val_26387 = state_26386[1];
          if (state_val_26387 === 1) {
            var inst_26362 = cljs.core.seq.call(null, coll);
            var inst_26363 = inst_26362;
            var state_26386__$1 = function() {
              var statearr_26388 = state_26386;
              statearr_26388[7] = inst_26363;
              return statearr_26388;
            }();
            var statearr_26389_26411 = state_26386__$1;
            statearr_26389_26411[2] = null;
            statearr_26389_26411[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_26387 === 2) {
              var inst_26363 = state_26386[7];
              var state_26386__$1 = state_26386;
              if (cljs.core.truth_(inst_26363)) {
                var statearr_26390_26412 = state_26386__$1;
                statearr_26390_26412[1] = 4;
              } else {
                var statearr_26391_26413 = state_26386__$1;
                statearr_26391_26413[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_26387 === 3) {
                var inst_26384 = state_26386[2];
                var state_26386__$1 = state_26386;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26386__$1, inst_26384);
              } else {
                if (state_val_26387 === 4) {
                  var inst_26363 = state_26386[7];
                  var inst_26366 = cljs.core.first.call(null, inst_26363);
                  var state_26386__$1 = state_26386;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26386__$1, 7, ch, inst_26366);
                } else {
                  if (state_val_26387 === 5) {
                    var inst_26363 = state_26386[7];
                    var state_26386__$1 = state_26386;
                    var statearr_26392_26414 = state_26386__$1;
                    statearr_26392_26414[2] = inst_26363;
                    statearr_26392_26414[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_26387 === 6) {
                      var inst_26371 = state_26386[2];
                      var state_26386__$1 = state_26386;
                      if (cljs.core.truth_(inst_26371)) {
                        var statearr_26393_26415 = state_26386__$1;
                        statearr_26393_26415[1] = 8;
                      } else {
                        var statearr_26394_26416 = state_26386__$1;
                        statearr_26394_26416[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_26387 === 7) {
                        var inst_26368 = state_26386[2];
                        var state_26386__$1 = state_26386;
                        var statearr_26395_26417 = state_26386__$1;
                        statearr_26395_26417[2] = inst_26368;
                        statearr_26395_26417[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_26387 === 8) {
                          var inst_26363 = state_26386[7];
                          var inst_26373 = cljs.core.next.call(null, inst_26363);
                          var inst_26363__$1 = inst_26373;
                          var state_26386__$1 = function() {
                            var statearr_26396 = state_26386;
                            statearr_26396[7] = inst_26363__$1;
                            return statearr_26396;
                          }();
                          var statearr_26397_26418 = state_26386__$1;
                          statearr_26397_26418[2] = null;
                          statearr_26397_26418[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_26387 === 9) {
                            var state_26386__$1 = state_26386;
                            if (cljs.core.truth_(close_QMARK_)) {
                              var statearr_26398_26419 = state_26386__$1;
                              statearr_26398_26419[1] = 11;
                            } else {
                              var statearr_26399_26420 = state_26386__$1;
                              statearr_26399_26420[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_26387 === 10) {
                              var inst_26382 = state_26386[2];
                              var state_26386__$1 = state_26386;
                              var statearr_26400_26421 = state_26386__$1;
                              statearr_26400_26421[2] = inst_26382;
                              statearr_26400_26421[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_26387 === 11) {
                                var inst_26377 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_26386__$1 = state_26386;
                                var statearr_26401_26422 = state_26386__$1;
                                statearr_26401_26422[2] = inst_26377;
                                statearr_26401_26422[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_26387 === 12) {
                                  var state_26386__$1 = state_26386;
                                  var statearr_26402_26423 = state_26386__$1;
                                  statearr_26402_26423[2] = null;
                                  statearr_26402_26423[1] = 13;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_26387 === 13) {
                                    var inst_26380 = state_26386[2];
                                    var state_26386__$1 = state_26386;
                                    var statearr_26403_26424 = state_26386__$1;
                                    statearr_26403_26424[2] = inst_26380;
                                    statearr_26403_26424[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_26407 = [null, null, null, null, null, null, null, null];
              statearr_26407[0] = state_machine__6137__auto__;
              statearr_26407[1] = 1;
              return statearr_26407;
            };
            var state_machine__6137__auto____1 = function(state_26386) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_26386);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e26408) {
                    if (e26408 instanceof Object) {
                      var ex__6140__auto__ = e26408;
                      var statearr_26409_26425 = state_26386;
                      statearr_26409_26425[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26386);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e26408;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__26426 = state_26386;
                  state_26386 = G__26426;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_26386) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_26386);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_26410 = f__6152__auto__.call(null);
        statearr_26410[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto__;
        return statearr_26410;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return c__6151__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj26428 = {};
  return obj26428;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3437__auto__ = _;
    if (and__3437__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4076__auto__ = _ == null ? null : _;
    return function() {
      var or__3449__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj26430 = {};
  return obj26430;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t26652 !== "undefined") {
    } else {
      cljs.core.async.t26652 = function(cs, ch, mult, meta26653) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta26653 = meta26653;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t26652.cljs$lang$type = true;
      cljs.core.async.t26652.cljs$lang$ctorStr = "cljs.core.async/t26652";
      cljs.core.async.t26652.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
          return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t26652");
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t26652.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t26652.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_26654) {
          var self__ = this;
          var _26654__$1 = this;
          return self__.meta26653;
        };
      }(cs);
      cljs.core.async.t26652.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_26654, meta26653__$1) {
          var self__ = this;
          var _26654__$1 = this;
          return new cljs.core.async.t26652(self__.cs, self__.ch, self__.mult, meta26653__$1);
        };
      }(cs);
      cljs.core.async.__GT_t26652 = function(cs) {
        return function __GT_t26652(cs__$1, ch__$1, mult__$1, meta26653) {
          return new cljs.core.async.t26652(cs__$1, ch__$1, mult__$1, meta26653);
        };
      }(cs);
    }
    return new cljs.core.async.t26652(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6151__auto___26873 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_26785) {
        var state_val_26786 = state_26785[1];
        if (state_val_26786 === 32) {
          var inst_26728 = state_26785[7];
          var inst_26725 = state_26785[8];
          var inst_26726 = state_26785[9];
          var inst_26727 = state_26785[10];
          var inst_26740 = state_26785[2];
          var inst_26741 = inst_26728 + 1;
          var tmp26787 = inst_26725;
          var tmp26788 = inst_26726;
          var tmp26789 = inst_26727;
          var inst_26725__$1 = tmp26787;
          var inst_26726__$1 = tmp26788;
          var inst_26727__$1 = tmp26789;
          var inst_26728__$1 = inst_26741;
          var state_26785__$1 = function() {
            var statearr_26790 = state_26785;
            statearr_26790[11] = inst_26740;
            statearr_26790[7] = inst_26728__$1;
            statearr_26790[8] = inst_26725__$1;
            statearr_26790[9] = inst_26726__$1;
            statearr_26790[10] = inst_26727__$1;
            return statearr_26790;
          }();
          var statearr_26791_26874 = state_26785__$1;
          statearr_26791_26874[2] = null;
          statearr_26791_26874[1] = 25;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_26786 === 1) {
            var state_26785__$1 = state_26785;
            var statearr_26792_26875 = state_26785__$1;
            statearr_26792_26875[2] = null;
            statearr_26792_26875[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_26786 === 33) {
              var inst_26744 = state_26785[12];
              var inst_26746 = cljs.core.chunked_seq_QMARK_.call(null, inst_26744);
              var state_26785__$1 = state_26785;
              if (inst_26746) {
                var statearr_26793_26876 = state_26785__$1;
                statearr_26793_26876[1] = 36;
              } else {
                var statearr_26794_26877 = state_26785__$1;
                statearr_26794_26877[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_26786 === 2) {
                var state_26785__$1 = state_26785;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26785__$1, 4, ch);
              } else {
                if (state_val_26786 === 34) {
                  var state_26785__$1 = state_26785;
                  var statearr_26795_26878 = state_26785__$1;
                  statearr_26795_26878[2] = null;
                  statearr_26795_26878[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_26786 === 3) {
                    var inst_26783 = state_26785[2];
                    var state_26785__$1 = state_26785;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26785__$1, inst_26783);
                  } else {
                    if (state_val_26786 === 35) {
                      var inst_26767 = state_26785[2];
                      var state_26785__$1 = state_26785;
                      var statearr_26796_26879 = state_26785__$1;
                      statearr_26796_26879[2] = inst_26767;
                      statearr_26796_26879[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_26786 === 4) {
                        var inst_26657 = state_26785[13];
                        var inst_26657__$1 = state_26785[2];
                        var inst_26658 = inst_26657__$1 == null;
                        var state_26785__$1 = function() {
                          var statearr_26797 = state_26785;
                          statearr_26797[13] = inst_26657__$1;
                          return statearr_26797;
                        }();
                        if (cljs.core.truth_(inst_26658)) {
                          var statearr_26798_26880 = state_26785__$1;
                          statearr_26798_26880[1] = 5;
                        } else {
                          var statearr_26799_26881 = state_26785__$1;
                          statearr_26799_26881[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_26786 === 36) {
                          var inst_26744 = state_26785[12];
                          var inst_26748 = cljs.core.chunk_first.call(null, inst_26744);
                          var inst_26749 = cljs.core.chunk_rest.call(null, inst_26744);
                          var inst_26750 = cljs.core.count.call(null, inst_26748);
                          var inst_26725 = inst_26749;
                          var inst_26726 = inst_26748;
                          var inst_26727 = inst_26750;
                          var inst_26728 = 0;
                          var state_26785__$1 = function() {
                            var statearr_26800 = state_26785;
                            statearr_26800[7] = inst_26728;
                            statearr_26800[8] = inst_26725;
                            statearr_26800[9] = inst_26726;
                            statearr_26800[10] = inst_26727;
                            return statearr_26800;
                          }();
                          var statearr_26801_26882 = state_26785__$1;
                          statearr_26801_26882[2] = null;
                          statearr_26801_26882[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_26786 === 5) {
                            var inst_26664 = cljs.core.deref.call(null, cs);
                            var inst_26665 = cljs.core.seq.call(null, inst_26664);
                            var inst_26666 = inst_26665;
                            var inst_26667 = null;
                            var inst_26668 = 0;
                            var inst_26669 = 0;
                            var state_26785__$1 = function() {
                              var statearr_26802 = state_26785;
                              statearr_26802[14] = inst_26669;
                              statearr_26802[15] = inst_26668;
                              statearr_26802[16] = inst_26667;
                              statearr_26802[17] = inst_26666;
                              return statearr_26802;
                            }();
                            var statearr_26803_26883 = state_26785__$1;
                            statearr_26803_26883[2] = null;
                            statearr_26803_26883[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_26786 === 37) {
                              var inst_26753 = state_26785[18];
                              var inst_26744 = state_26785[12];
                              var inst_26657 = state_26785[13];
                              var inst_26753__$1 = cljs.core.first.call(null, inst_26744);
                              var inst_26754 = cljs.core.async.put_BANG_.call(null, inst_26753__$1, inst_26657, done);
                              var state_26785__$1 = function() {
                                var statearr_26804 = state_26785;
                                statearr_26804[18] = inst_26753__$1;
                                return statearr_26804;
                              }();
                              if (cljs.core.truth_(inst_26754)) {
                                var statearr_26805_26884 = state_26785__$1;
                                statearr_26805_26884[1] = 39;
                              } else {
                                var statearr_26806_26885 = state_26785__$1;
                                statearr_26806_26885[1] = 40;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_26786 === 6) {
                                var inst_26717 = state_26785[19];
                                var inst_26716 = cljs.core.deref.call(null, cs);
                                var inst_26717__$1 = cljs.core.keys.call(null, inst_26716);
                                var inst_26718 = cljs.core.count.call(null, inst_26717__$1);
                                var inst_26719 = cljs.core.reset_BANG_.call(null, dctr, inst_26718);
                                var inst_26724 = cljs.core.seq.call(null, inst_26717__$1);
                                var inst_26725 = inst_26724;
                                var inst_26726 = null;
                                var inst_26727 = 0;
                                var inst_26728 = 0;
                                var state_26785__$1 = function() {
                                  var statearr_26807 = state_26785;
                                  statearr_26807[19] = inst_26717__$1;
                                  statearr_26807[20] = inst_26719;
                                  statearr_26807[7] = inst_26728;
                                  statearr_26807[8] = inst_26725;
                                  statearr_26807[9] = inst_26726;
                                  statearr_26807[10] = inst_26727;
                                  return statearr_26807;
                                }();
                                var statearr_26808_26886 = state_26785__$1;
                                statearr_26808_26886[2] = null;
                                statearr_26808_26886[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_26786 === 38) {
                                  var inst_26764 = state_26785[2];
                                  var state_26785__$1 = state_26785;
                                  var statearr_26809_26887 = state_26785__$1;
                                  statearr_26809_26887[2] = inst_26764;
                                  statearr_26809_26887[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_26786 === 7) {
                                    var inst_26781 = state_26785[2];
                                    var state_26785__$1 = state_26785;
                                    var statearr_26810_26888 = state_26785__$1;
                                    statearr_26810_26888[2] = inst_26781;
                                    statearr_26810_26888[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_26786 === 39) {
                                      var state_26785__$1 = state_26785;
                                      var statearr_26811_26889 = state_26785__$1;
                                      statearr_26811_26889[2] = null;
                                      statearr_26811_26889[1] = 41;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_26786 === 8) {
                                        var inst_26669 = state_26785[14];
                                        var inst_26668 = state_26785[15];
                                        var inst_26671 = inst_26669 < inst_26668;
                                        var inst_26672 = inst_26671;
                                        var state_26785__$1 = state_26785;
                                        if (cljs.core.truth_(inst_26672)) {
                                          var statearr_26812_26890 = state_26785__$1;
                                          statearr_26812_26890[1] = 10;
                                        } else {
                                          var statearr_26813_26891 = state_26785__$1;
                                          statearr_26813_26891[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_26786 === 40) {
                                          var inst_26753 = state_26785[18];
                                          var inst_26757 = done.call(null, null);
                                          var inst_26758 = cljs.core.async.untap_STAR_.call(null, m, inst_26753);
                                          var state_26785__$1 = function() {
                                            var statearr_26814 = state_26785;
                                            statearr_26814[21] = inst_26757;
                                            return statearr_26814;
                                          }();
                                          var statearr_26815_26892 = state_26785__$1;
                                          statearr_26815_26892[2] = inst_26758;
                                          statearr_26815_26892[1] = 41;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_26786 === 9) {
                                            var inst_26714 = state_26785[2];
                                            var state_26785__$1 = state_26785;
                                            var statearr_26816_26893 = state_26785__$1;
                                            statearr_26816_26893[2] = inst_26714;
                                            statearr_26816_26893[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_26786 === 41) {
                                              var inst_26744 = state_26785[12];
                                              var inst_26760 = state_26785[2];
                                              var inst_26761 = cljs.core.next.call(null, inst_26744);
                                              var inst_26725 = inst_26761;
                                              var inst_26726 = null;
                                              var inst_26727 = 0;
                                              var inst_26728 = 0;
                                              var state_26785__$1 = function() {
                                                var statearr_26817 = state_26785;
                                                statearr_26817[7] = inst_26728;
                                                statearr_26817[22] = inst_26760;
                                                statearr_26817[8] = inst_26725;
                                                statearr_26817[9] = inst_26726;
                                                statearr_26817[10] = inst_26727;
                                                return statearr_26817;
                                              }();
                                              var statearr_26818_26894 = state_26785__$1;
                                              statearr_26818_26894[2] = null;
                                              statearr_26818_26894[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_26786 === 10) {
                                                var inst_26669 = state_26785[14];
                                                var inst_26667 = state_26785[16];
                                                var inst_26675 = cljs.core._nth.call(null, inst_26667, inst_26669);
                                                var inst_26676 = cljs.core.nth.call(null, inst_26675, 0, null);
                                                var inst_26677 = cljs.core.nth.call(null, inst_26675, 1, null);
                                                var state_26785__$1 = function() {
                                                  var statearr_26819 = state_26785;
                                                  statearr_26819[23] = inst_26676;
                                                  return statearr_26819;
                                                }();
                                                if (cljs.core.truth_(inst_26677)) {
                                                  var statearr_26820_26895 = state_26785__$1;
                                                  statearr_26820_26895[1] = 13;
                                                } else {
                                                  var statearr_26821_26896 = state_26785__$1;
                                                  statearr_26821_26896[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_26786 === 42) {
                                                  var state_26785__$1 = state_26785;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26785__$1, 45, dchan);
                                                } else {
                                                  if (state_val_26786 === 11) {
                                                    var inst_26666 = state_26785[17];
                                                    var inst_26686 = state_26785[24];
                                                    var inst_26686__$1 = cljs.core.seq.call(null, inst_26666);
                                                    var state_26785__$1 = function() {
                                                      var statearr_26822 = state_26785;
                                                      statearr_26822[24] = inst_26686__$1;
                                                      return statearr_26822;
                                                    }();
                                                    if (inst_26686__$1) {
                                                      var statearr_26823_26897 = state_26785__$1;
                                                      statearr_26823_26897[1] = 16;
                                                    } else {
                                                      var statearr_26824_26898 = state_26785__$1;
                                                      statearr_26824_26898[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_26786 === 43) {
                                                      var state_26785__$1 = state_26785;
                                                      var statearr_26825_26899 = state_26785__$1;
                                                      statearr_26825_26899[2] = null;
                                                      statearr_26825_26899[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_26786 === 12) {
                                                        var inst_26712 = state_26785[2];
                                                        var state_26785__$1 = state_26785;
                                                        var statearr_26826_26900 = state_26785__$1;
                                                        statearr_26826_26900[2] = inst_26712;
                                                        statearr_26826_26900[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_26786 === 44) {
                                                          var inst_26778 = state_26785[2];
                                                          var state_26785__$1 = function() {
                                                            var statearr_26827 = state_26785;
                                                            statearr_26827[25] = inst_26778;
                                                            return statearr_26827;
                                                          }();
                                                          var statearr_26828_26901 = state_26785__$1;
                                                          statearr_26828_26901[2] = null;
                                                          statearr_26828_26901[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_26786 === 13) {
                                                            var inst_26676 = state_26785[23];
                                                            var inst_26679 = cljs.core.async.close_BANG_.call(null, inst_26676);
                                                            var state_26785__$1 = state_26785;
                                                            var statearr_26829_26902 = state_26785__$1;
                                                            statearr_26829_26902[2] = inst_26679;
                                                            statearr_26829_26902[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_26786 === 45) {
                                                              var inst_26775 = state_26785[2];
                                                              var state_26785__$1 = state_26785;
                                                              var statearr_26833_26903 = state_26785__$1;
                                                              statearr_26833_26903[2] = inst_26775;
                                                              statearr_26833_26903[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_26786 === 14) {
                                                                var state_26785__$1 = state_26785;
                                                                var statearr_26834_26904 = state_26785__$1;
                                                                statearr_26834_26904[2] = null;
                                                                statearr_26834_26904[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_26786 === 15) {
                                                                  var inst_26669 = state_26785[14];
                                                                  var inst_26668 = state_26785[15];
                                                                  var inst_26667 = state_26785[16];
                                                                  var inst_26666 = state_26785[17];
                                                                  var inst_26682 = state_26785[2];
                                                                  var inst_26683 = inst_26669 + 1;
                                                                  var tmp26830 = inst_26668;
                                                                  var tmp26831 = inst_26667;
                                                                  var tmp26832 = inst_26666;
                                                                  var inst_26666__$1 = tmp26832;
                                                                  var inst_26667__$1 = tmp26831;
                                                                  var inst_26668__$1 = tmp26830;
                                                                  var inst_26669__$1 = inst_26683;
                                                                  var state_26785__$1 = function() {
                                                                    var statearr_26835 = state_26785;
                                                                    statearr_26835[14] = inst_26669__$1;
                                                                    statearr_26835[15] = inst_26668__$1;
                                                                    statearr_26835[16] = inst_26667__$1;
                                                                    statearr_26835[17] = inst_26666__$1;
                                                                    statearr_26835[26] = inst_26682;
                                                                    return statearr_26835;
                                                                  }();
                                                                  var statearr_26836_26905 = state_26785__$1;
                                                                  statearr_26836_26905[2] = null;
                                                                  statearr_26836_26905[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_26786 === 16) {
                                                                    var inst_26686 = state_26785[24];
                                                                    var inst_26688 = cljs.core.chunked_seq_QMARK_.call(null, inst_26686);
                                                                    var state_26785__$1 = state_26785;
                                                                    if (inst_26688) {
                                                                      var statearr_26837_26906 = state_26785__$1;
                                                                      statearr_26837_26906[1] = 19;
                                                                    } else {
                                                                      var statearr_26838_26907 = state_26785__$1;
                                                                      statearr_26838_26907[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_26786 === 17) {
                                                                      var state_26785__$1 = state_26785;
                                                                      var statearr_26839_26908 = state_26785__$1;
                                                                      statearr_26839_26908[2] = null;
                                                                      statearr_26839_26908[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_26786 === 18) {
                                                                        var inst_26710 = state_26785[2];
                                                                        var state_26785__$1 = state_26785;
                                                                        var statearr_26840_26909 = state_26785__$1;
                                                                        statearr_26840_26909[2] = inst_26710;
                                                                        statearr_26840_26909[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_26786 === 19) {
                                                                          var inst_26686 = state_26785[24];
                                                                          var inst_26690 = cljs.core.chunk_first.call(null, inst_26686);
                                                                          var inst_26691 = cljs.core.chunk_rest.call(null, inst_26686);
                                                                          var inst_26692 = cljs.core.count.call(null, inst_26690);
                                                                          var inst_26666 = inst_26691;
                                                                          var inst_26667 = inst_26690;
                                                                          var inst_26668 = inst_26692;
                                                                          var inst_26669 = 0;
                                                                          var state_26785__$1 = function() {
                                                                            var statearr_26841 = state_26785;
                                                                            statearr_26841[14] = inst_26669;
                                                                            statearr_26841[15] = inst_26668;
                                                                            statearr_26841[16] = inst_26667;
                                                                            statearr_26841[17] = inst_26666;
                                                                            return statearr_26841;
                                                                          }();
                                                                          var statearr_26842_26910 = state_26785__$1;
                                                                          statearr_26842_26910[2] = null;
                                                                          statearr_26842_26910[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_26786 === 20) {
                                                                            var inst_26686 = state_26785[24];
                                                                            var inst_26696 = cljs.core.first.call(null, inst_26686);
                                                                            var inst_26697 = cljs.core.nth.call(null, inst_26696, 0, null);
                                                                            var inst_26698 = cljs.core.nth.call(null, inst_26696, 1, null);
                                                                            var state_26785__$1 = function() {
                                                                              var statearr_26843 = state_26785;
                                                                              statearr_26843[27] = inst_26697;
                                                                              return statearr_26843;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_26698)) {
                                                                              var statearr_26844_26911 = state_26785__$1;
                                                                              statearr_26844_26911[1] = 22;
                                                                            } else {
                                                                              var statearr_26845_26912 = state_26785__$1;
                                                                              statearr_26845_26912[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_26786 === 21) {
                                                                              var inst_26707 = state_26785[2];
                                                                              var state_26785__$1 = state_26785;
                                                                              var statearr_26846_26913 = state_26785__$1;
                                                                              statearr_26846_26913[2] = inst_26707;
                                                                              statearr_26846_26913[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_26786 === 22) {
                                                                                var inst_26697 = state_26785[27];
                                                                                var inst_26700 = cljs.core.async.close_BANG_.call(null, inst_26697);
                                                                                var state_26785__$1 = state_26785;
                                                                                var statearr_26847_26914 = state_26785__$1;
                                                                                statearr_26847_26914[2] = inst_26700;
                                                                                statearr_26847_26914[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_26786 === 23) {
                                                                                  var state_26785__$1 = state_26785;
                                                                                  var statearr_26848_26915 = state_26785__$1;
                                                                                  statearr_26848_26915[2] = null;
                                                                                  statearr_26848_26915[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_26786 === 24) {
                                                                                    var inst_26686 = state_26785[24];
                                                                                    var inst_26703 = state_26785[2];
                                                                                    var inst_26704 = cljs.core.next.call(null, inst_26686);
                                                                                    var inst_26666 = inst_26704;
                                                                                    var inst_26667 = null;
                                                                                    var inst_26668 = 0;
                                                                                    var inst_26669 = 0;
                                                                                    var state_26785__$1 = function() {
                                                                                      var statearr_26849 = state_26785;
                                                                                      statearr_26849[14] = inst_26669;
                                                                                      statearr_26849[28] = inst_26703;
                                                                                      statearr_26849[15] = inst_26668;
                                                                                      statearr_26849[16] = inst_26667;
                                                                                      statearr_26849[17] = inst_26666;
                                                                                      return statearr_26849;
                                                                                    }();
                                                                                    var statearr_26850_26916 = state_26785__$1;
                                                                                    statearr_26850_26916[2] = null;
                                                                                    statearr_26850_26916[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_26786 === 25) {
                                                                                      var inst_26728 = state_26785[7];
                                                                                      var inst_26727 = state_26785[10];
                                                                                      var inst_26730 = inst_26728 < inst_26727;
                                                                                      var inst_26731 = inst_26730;
                                                                                      var state_26785__$1 = state_26785;
                                                                                      if (cljs.core.truth_(inst_26731)) {
                                                                                        var statearr_26851_26917 = state_26785__$1;
                                                                                        statearr_26851_26917[1] = 27;
                                                                                      } else {
                                                                                        var statearr_26852_26918 = state_26785__$1;
                                                                                        statearr_26852_26918[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_26786 === 26) {
                                                                                        var inst_26717 = state_26785[19];
                                                                                        var inst_26771 = state_26785[2];
                                                                                        var inst_26772 = cljs.core.seq.call(null, inst_26717);
                                                                                        var state_26785__$1 = function() {
                                                                                          var statearr_26853 = state_26785;
                                                                                          statearr_26853[29] = inst_26771;
                                                                                          return statearr_26853;
                                                                                        }();
                                                                                        if (inst_26772) {
                                                                                          var statearr_26854_26919 = state_26785__$1;
                                                                                          statearr_26854_26919[1] = 42;
                                                                                        } else {
                                                                                          var statearr_26855_26920 = state_26785__$1;
                                                                                          statearr_26855_26920[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_26786 === 27) {
                                                                                          var inst_26728 = state_26785[7];
                                                                                          var inst_26657 = state_26785[13];
                                                                                          var inst_26733 = state_26785[30];
                                                                                          var inst_26726 = state_26785[9];
                                                                                          var inst_26733__$1 = cljs.core._nth.call(null, inst_26726, inst_26728);
                                                                                          var inst_26734 = cljs.core.async.put_BANG_.call(null, inst_26733__$1, inst_26657, done);
                                                                                          var state_26785__$1 = function() {
                                                                                            var statearr_26856 = state_26785;
                                                                                            statearr_26856[30] = inst_26733__$1;
                                                                                            return statearr_26856;
                                                                                          }();
                                                                                          if (cljs.core.truth_(inst_26734)) {
                                                                                            var statearr_26857_26921 = state_26785__$1;
                                                                                            statearr_26857_26921[1] = 30;
                                                                                          } else {
                                                                                            var statearr_26858_26922 = state_26785__$1;
                                                                                            statearr_26858_26922[1] = 31;
                                                                                          }
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_26786 === 28) {
                                                                                            var inst_26744 = state_26785[12];
                                                                                            var inst_26725 = state_26785[8];
                                                                                            var inst_26744__$1 = cljs.core.seq.call(null, inst_26725);
                                                                                            var state_26785__$1 = function() {
                                                                                              var statearr_26859 = state_26785;
                                                                                              statearr_26859[12] = inst_26744__$1;
                                                                                              return statearr_26859;
                                                                                            }();
                                                                                            if (inst_26744__$1) {
                                                                                              var statearr_26860_26923 = state_26785__$1;
                                                                                              statearr_26860_26923[1] = 33;
                                                                                            } else {
                                                                                              var statearr_26861_26924 = state_26785__$1;
                                                                                              statearr_26861_26924[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_26786 === 29) {
                                                                                              var inst_26769 = state_26785[2];
                                                                                              var state_26785__$1 = state_26785;
                                                                                              var statearr_26862_26925 = state_26785__$1;
                                                                                              statearr_26862_26925[2] = inst_26769;
                                                                                              statearr_26862_26925[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_26786 === 30) {
                                                                                                var state_26785__$1 = state_26785;
                                                                                                var statearr_26863_26926 = state_26785__$1;
                                                                                                statearr_26863_26926[2] = null;
                                                                                                statearr_26863_26926[1] = 32;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_26786 === 31) {
                                                                                                  var inst_26733 = state_26785[30];
                                                                                                  var inst_26737 = done.call(null, null);
                                                                                                  var inst_26738 = cljs.core.async.untap_STAR_.call(null, m, inst_26733);
                                                                                                  var state_26785__$1 = function() {
                                                                                                    var statearr_26864 = state_26785;
                                                                                                    statearr_26864[31] = inst_26737;
                                                                                                    return statearr_26864;
                                                                                                  }();
                                                                                                  var statearr_26865_26927 = state_26785__$1;
                                                                                                  statearr_26865_26927[2] = inst_26738;
                                                                                                  statearr_26865_26927[1] = 32;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_26869 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_26869[0] = state_machine__6137__auto__;
            statearr_26869[1] = 1;
            return statearr_26869;
          };
          var state_machine__6137__auto____1 = function(state_26785) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_26785);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e26870) {
                  if (e26870 instanceof Object) {
                    var ex__6140__auto__ = e26870;
                    var statearr_26871_26928 = state_26785;
                    statearr_26871_26928[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26785);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e26870;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__26929 = state_26785;
                state_26785 = G__26929;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_26785) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_26785);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_26872 = f__6152__auto__.call(null);
      statearr_26872[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___26873;
      return statearr_26872;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj26931 = {};
  return obj26931;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3437__auto__ = m;
    if (and__3437__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4076__auto__ = m == null ? null : m;
    return function() {
      var or__3449__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t27051 !== "undefined") {
    } else {
      cljs.core.async.t27051 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta27052) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta27052 = meta27052;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t27051.cljs$lang$type = true;
      cljs.core.async.t27051.cljs$lang$ctorStr = "cljs.core.async/t27051";
      cljs.core.async.t27051.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
          return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27051");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t27051.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_27053) {
          var self__ = this;
          var _27053__$1 = this;
          return self__.meta27052;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t27051.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_27053, meta27052__$1) {
          var self__ = this;
          var _27053__$1 = this;
          return new cljs.core.async.t27051(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta27052__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t27051 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t27051(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta27052) {
          return new cljs.core.async.t27051(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta27052);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t27051(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__6151__auto___27170 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_27123) {
        var state_val_27124 = state_27123[1];
        if (state_val_27124 === 1) {
          var inst_27057 = state_27123[7];
          var inst_27057__$1 = calc_state.call(null);
          var inst_27058 = cljs.core.seq_QMARK_.call(null, inst_27057__$1);
          var state_27123__$1 = function() {
            var statearr_27125 = state_27123;
            statearr_27125[7] = inst_27057__$1;
            return statearr_27125;
          }();
          if (inst_27058) {
            var statearr_27126_27171 = state_27123__$1;
            statearr_27126_27171[1] = 2;
          } else {
            var statearr_27127_27172 = state_27123__$1;
            statearr_27127_27172[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_27124 === 2) {
            var inst_27057 = state_27123[7];
            var inst_27060 = cljs.core.apply.call(null, cljs.core.hash_map, inst_27057);
            var state_27123__$1 = state_27123;
            var statearr_27128_27173 = state_27123__$1;
            statearr_27128_27173[2] = inst_27060;
            statearr_27128_27173[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27124 === 3) {
              var inst_27057 = state_27123[7];
              var state_27123__$1 = state_27123;
              var statearr_27129_27174 = state_27123__$1;
              statearr_27129_27174[2] = inst_27057;
              statearr_27129_27174[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_27124 === 4) {
                var inst_27057 = state_27123[7];
                var inst_27063 = state_27123[2];
                var inst_27064 = cljs.core.get.call(null, inst_27063, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_27065 = cljs.core.get.call(null, inst_27063, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_27066 = cljs.core.get.call(null, inst_27063, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_27067 = inst_27057;
                var state_27123__$1 = function() {
                  var statearr_27130 = state_27123;
                  statearr_27130[8] = inst_27065;
                  statearr_27130[9] = inst_27064;
                  statearr_27130[10] = inst_27067;
                  statearr_27130[11] = inst_27066;
                  return statearr_27130;
                }();
                var statearr_27131_27175 = state_27123__$1;
                statearr_27131_27175[2] = null;
                statearr_27131_27175[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_27124 === 5) {
                  var inst_27067 = state_27123[10];
                  var inst_27070 = cljs.core.seq_QMARK_.call(null, inst_27067);
                  var state_27123__$1 = state_27123;
                  if (inst_27070) {
                    var statearr_27132_27176 = state_27123__$1;
                    statearr_27132_27176[1] = 7;
                  } else {
                    var statearr_27133_27177 = state_27123__$1;
                    statearr_27133_27177[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_27124 === 6) {
                    var inst_27121 = state_27123[2];
                    var state_27123__$1 = state_27123;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27123__$1, inst_27121);
                  } else {
                    if (state_val_27124 === 7) {
                      var inst_27067 = state_27123[10];
                      var inst_27072 = cljs.core.apply.call(null, cljs.core.hash_map, inst_27067);
                      var state_27123__$1 = state_27123;
                      var statearr_27134_27178 = state_27123__$1;
                      statearr_27134_27178[2] = inst_27072;
                      statearr_27134_27178[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27124 === 8) {
                        var inst_27067 = state_27123[10];
                        var state_27123__$1 = state_27123;
                        var statearr_27135_27179 = state_27123__$1;
                        statearr_27135_27179[2] = inst_27067;
                        statearr_27135_27179[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27124 === 9) {
                          var inst_27075 = state_27123[12];
                          var inst_27075__$1 = state_27123[2];
                          var inst_27076 = cljs.core.get.call(null, inst_27075__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_27077 = cljs.core.get.call(null, inst_27075__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_27078 = cljs.core.get.call(null, inst_27075__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_27123__$1 = function() {
                            var statearr_27136 = state_27123;
                            statearr_27136[12] = inst_27075__$1;
                            statearr_27136[13] = inst_27078;
                            statearr_27136[14] = inst_27077;
                            return statearr_27136;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_27123__$1, 10, inst_27076);
                        } else {
                          if (state_val_27124 === 10) {
                            var inst_27082 = state_27123[15];
                            var inst_27083 = state_27123[16];
                            var inst_27081 = state_27123[2];
                            var inst_27082__$1 = cljs.core.nth.call(null, inst_27081, 0, null);
                            var inst_27083__$1 = cljs.core.nth.call(null, inst_27081, 1, null);
                            var inst_27084 = inst_27082__$1 == null;
                            var inst_27085 = cljs.core._EQ_.call(null, inst_27083__$1, change);
                            var inst_27086 = inst_27084 || inst_27085;
                            var state_27123__$1 = function() {
                              var statearr_27137 = state_27123;
                              statearr_27137[15] = inst_27082__$1;
                              statearr_27137[16] = inst_27083__$1;
                              return statearr_27137;
                            }();
                            if (cljs.core.truth_(inst_27086)) {
                              var statearr_27138_27180 = state_27123__$1;
                              statearr_27138_27180[1] = 11;
                            } else {
                              var statearr_27139_27181 = state_27123__$1;
                              statearr_27139_27181[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_27124 === 11) {
                              var inst_27082 = state_27123[15];
                              var inst_27088 = inst_27082 == null;
                              var state_27123__$1 = state_27123;
                              if (cljs.core.truth_(inst_27088)) {
                                var statearr_27140_27182 = state_27123__$1;
                                statearr_27140_27182[1] = 14;
                              } else {
                                var statearr_27141_27183 = state_27123__$1;
                                statearr_27141_27183[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27124 === 12) {
                                var inst_27078 = state_27123[13];
                                var inst_27083 = state_27123[16];
                                var inst_27097 = state_27123[17];
                                var inst_27097__$1 = inst_27078.call(null, inst_27083);
                                var state_27123__$1 = function() {
                                  var statearr_27142 = state_27123;
                                  statearr_27142[17] = inst_27097__$1;
                                  return statearr_27142;
                                }();
                                if (cljs.core.truth_(inst_27097__$1)) {
                                  var statearr_27143_27184 = state_27123__$1;
                                  statearr_27143_27184[1] = 17;
                                } else {
                                  var statearr_27144_27185 = state_27123__$1;
                                  statearr_27144_27185[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_27124 === 13) {
                                  var inst_27119 = state_27123[2];
                                  var state_27123__$1 = state_27123;
                                  var statearr_27145_27186 = state_27123__$1;
                                  statearr_27145_27186[2] = inst_27119;
                                  statearr_27145_27186[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_27124 === 14) {
                                    var inst_27083 = state_27123[16];
                                    var inst_27090 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_27083);
                                    var state_27123__$1 = state_27123;
                                    var statearr_27146_27187 = state_27123__$1;
                                    statearr_27146_27187[2] = inst_27090;
                                    statearr_27146_27187[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_27124 === 15) {
                                      var state_27123__$1 = state_27123;
                                      var statearr_27147_27188 = state_27123__$1;
                                      statearr_27147_27188[2] = null;
                                      statearr_27147_27188[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_27124 === 16) {
                                        var inst_27093 = state_27123[2];
                                        var inst_27094 = calc_state.call(null);
                                        var inst_27067 = inst_27094;
                                        var state_27123__$1 = function() {
                                          var statearr_27148 = state_27123;
                                          statearr_27148[18] = inst_27093;
                                          statearr_27148[10] = inst_27067;
                                          return statearr_27148;
                                        }();
                                        var statearr_27149_27189 = state_27123__$1;
                                        statearr_27149_27189[2] = null;
                                        statearr_27149_27189[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_27124 === 17) {
                                          var inst_27097 = state_27123[17];
                                          var state_27123__$1 = state_27123;
                                          var statearr_27150_27190 = state_27123__$1;
                                          statearr_27150_27190[2] = inst_27097;
                                          statearr_27150_27190[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_27124 === 18) {
                                            var inst_27078 = state_27123[13];
                                            var inst_27077 = state_27123[14];
                                            var inst_27083 = state_27123[16];
                                            var inst_27100 = cljs.core.empty_QMARK_.call(null, inst_27078);
                                            var inst_27101 = inst_27077.call(null, inst_27083);
                                            var inst_27102 = cljs.core.not.call(null, inst_27101);
                                            var inst_27103 = inst_27100 && inst_27102;
                                            var state_27123__$1 = state_27123;
                                            var statearr_27151_27191 = state_27123__$1;
                                            statearr_27151_27191[2] = inst_27103;
                                            statearr_27151_27191[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_27124 === 19) {
                                              var inst_27105 = state_27123[2];
                                              var state_27123__$1 = state_27123;
                                              if (cljs.core.truth_(inst_27105)) {
                                                var statearr_27152_27192 = state_27123__$1;
                                                statearr_27152_27192[1] = 20;
                                              } else {
                                                var statearr_27153_27193 = state_27123__$1;
                                                statearr_27153_27193[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_27124 === 20) {
                                                var inst_27082 = state_27123[15];
                                                var state_27123__$1 = state_27123;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27123__$1, 23, out, inst_27082);
                                              } else {
                                                if (state_val_27124 === 21) {
                                                  var inst_27075 = state_27123[12];
                                                  var inst_27067 = inst_27075;
                                                  var state_27123__$1 = function() {
                                                    var statearr_27154 = state_27123;
                                                    statearr_27154[10] = inst_27067;
                                                    return statearr_27154;
                                                  }();
                                                  var statearr_27155_27194 = state_27123__$1;
                                                  statearr_27155_27194[2] = null;
                                                  statearr_27155_27194[1] = 5;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_27124 === 22) {
                                                    var inst_27117 = state_27123[2];
                                                    var state_27123__$1 = state_27123;
                                                    var statearr_27156_27195 = state_27123__$1;
                                                    statearr_27156_27195[2] = inst_27117;
                                                    statearr_27156_27195[1] = 13;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_27124 === 23) {
                                                      var inst_27108 = state_27123[2];
                                                      var state_27123__$1 = state_27123;
                                                      if (cljs.core.truth_(inst_27108)) {
                                                        var statearr_27157_27196 = state_27123__$1;
                                                        statearr_27157_27196[1] = 24;
                                                      } else {
                                                        var statearr_27158_27197 = state_27123__$1;
                                                        statearr_27158_27197[1] = 25;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_27124 === 24) {
                                                        var inst_27075 = state_27123[12];
                                                        var inst_27067 = inst_27075;
                                                        var state_27123__$1 = function() {
                                                          var statearr_27159 = state_27123;
                                                          statearr_27159[10] = inst_27067;
                                                          return statearr_27159;
                                                        }();
                                                        var statearr_27160_27198 = state_27123__$1;
                                                        statearr_27160_27198[2] = null;
                                                        statearr_27160_27198[1] = 5;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_27124 === 25) {
                                                          var state_27123__$1 = state_27123;
                                                          var statearr_27161_27199 = state_27123__$1;
                                                          statearr_27161_27199[2] = null;
                                                          statearr_27161_27199[1] = 26;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_27124 === 26) {
                                                            var inst_27113 = state_27123[2];
                                                            var state_27123__$1 = state_27123;
                                                            var statearr_27162_27200 = state_27123__$1;
                                                            statearr_27162_27200[2] = inst_27113;
                                                            statearr_27162_27200[1] = 22;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_27166 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_27166[0] = state_machine__6137__auto__;
            statearr_27166[1] = 1;
            return statearr_27166;
          };
          var state_machine__6137__auto____1 = function(state_27123) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_27123);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e27167) {
                  if (e27167 instanceof Object) {
                    var ex__6140__auto__ = e27167;
                    var statearr_27168_27201 = state_27123;
                    statearr_27168_27201[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27123);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e27167;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__27202 = state_27123;
                state_27123 = G__27202;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_27123) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_27123);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_27169 = f__6152__auto__.call(null);
      statearr_27169[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27170;
      return statearr_27169;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj27204 = {};
  return obj27204;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3437__auto__ = p;
    if (and__3437__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4076__auto__ = p == null ? null : p;
    return function() {
      var or__3449__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3437__auto__ = p;
    if (and__3437__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4076__auto__ = p == null ? null : p;
    return function() {
      var or__3449__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3437__auto__ = p;
      if (and__3437__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4076__auto__ = p == null ? null : p;
      return function() {
        var or__3449__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3437__auto__ = p;
      if (and__3437__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3437__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4076__auto__ = p == null ? null : p;
      return function() {
        var or__3449__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4076__auto__)];
        if (or__3449__auto__) {
          return or__3449__auto__;
        } else {
          var or__3449__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3449__auto____$1) {
            return or__3449__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3449__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3449__auto__, mults) {
            return function(p1__27205_SHARP_) {
              if (cljs.core.truth_(p1__27205_SHARP_.call(null, topic))) {
                return p1__27205_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__27205_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3449__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t27328 !== "undefined") {
      } else {
        cljs.core.async.t27328 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta27329) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta27329 = meta27329;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t27328.cljs$lang$type = true;
        cljs.core.async.t27328.cljs$lang$ctorStr = "cljs.core.async/t27328";
        cljs.core.async.t27328.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
            return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27328");
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t27328.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t27328.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_27330) {
            var self__ = this;
            var _27330__$1 = this;
            return self__.meta27329;
          };
        }(mults, ensure_mult);
        cljs.core.async.t27328.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_27330, meta27329__$1) {
            var self__ = this;
            var _27330__$1 = this;
            return new cljs.core.async.t27328(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta27329__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t27328 = function(mults, ensure_mult) {
          return function __GT_t27328(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta27329) {
            return new cljs.core.async.t27328(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta27329);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t27328(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__6151__auto___27450 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_27402) {
          var state_val_27403 = state_27402[1];
          if (state_val_27403 === 1) {
            var state_27402__$1 = state_27402;
            var statearr_27404_27451 = state_27402__$1;
            statearr_27404_27451[2] = null;
            statearr_27404_27451[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27403 === 2) {
              var state_27402__$1 = state_27402;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27402__$1, 4, ch);
            } else {
              if (state_val_27403 === 3) {
                var inst_27400 = state_27402[2];
                var state_27402__$1 = state_27402;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27402__$1, inst_27400);
              } else {
                if (state_val_27403 === 4) {
                  var inst_27333 = state_27402[7];
                  var inst_27333__$1 = state_27402[2];
                  var inst_27334 = inst_27333__$1 == null;
                  var state_27402__$1 = function() {
                    var statearr_27405 = state_27402;
                    statearr_27405[7] = inst_27333__$1;
                    return statearr_27405;
                  }();
                  if (cljs.core.truth_(inst_27334)) {
                    var statearr_27406_27452 = state_27402__$1;
                    statearr_27406_27452[1] = 5;
                  } else {
                    var statearr_27407_27453 = state_27402__$1;
                    statearr_27407_27453[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_27403 === 5) {
                    var inst_27340 = cljs.core.deref.call(null, mults);
                    var inst_27341 = cljs.core.vals.call(null, inst_27340);
                    var inst_27342 = cljs.core.seq.call(null, inst_27341);
                    var inst_27343 = inst_27342;
                    var inst_27344 = null;
                    var inst_27345 = 0;
                    var inst_27346 = 0;
                    var state_27402__$1 = function() {
                      var statearr_27408 = state_27402;
                      statearr_27408[8] = inst_27345;
                      statearr_27408[9] = inst_27346;
                      statearr_27408[10] = inst_27343;
                      statearr_27408[11] = inst_27344;
                      return statearr_27408;
                    }();
                    var statearr_27409_27454 = state_27402__$1;
                    statearr_27409_27454[2] = null;
                    statearr_27409_27454[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_27403 === 6) {
                      var inst_27381 = state_27402[12];
                      var inst_27333 = state_27402[7];
                      var inst_27383 = state_27402[13];
                      var inst_27381__$1 = topic_fn.call(null, inst_27333);
                      var inst_27382 = cljs.core.deref.call(null, mults);
                      var inst_27383__$1 = cljs.core.get.call(null, inst_27382, inst_27381__$1);
                      var state_27402__$1 = function() {
                        var statearr_27410 = state_27402;
                        statearr_27410[12] = inst_27381__$1;
                        statearr_27410[13] = inst_27383__$1;
                        return statearr_27410;
                      }();
                      if (cljs.core.truth_(inst_27383__$1)) {
                        var statearr_27411_27455 = state_27402__$1;
                        statearr_27411_27455[1] = 19;
                      } else {
                        var statearr_27412_27456 = state_27402__$1;
                        statearr_27412_27456[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27403 === 7) {
                        var inst_27398 = state_27402[2];
                        var state_27402__$1 = state_27402;
                        var statearr_27413_27457 = state_27402__$1;
                        statearr_27413_27457[2] = inst_27398;
                        statearr_27413_27457[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27403 === 8) {
                          var inst_27345 = state_27402[8];
                          var inst_27346 = state_27402[9];
                          var inst_27348 = inst_27346 < inst_27345;
                          var inst_27349 = inst_27348;
                          var state_27402__$1 = state_27402;
                          if (cljs.core.truth_(inst_27349)) {
                            var statearr_27417_27458 = state_27402__$1;
                            statearr_27417_27458[1] = 10;
                          } else {
                            var statearr_27418_27459 = state_27402__$1;
                            statearr_27418_27459[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_27403 === 9) {
                            var inst_27379 = state_27402[2];
                            var state_27402__$1 = state_27402;
                            var statearr_27419_27460 = state_27402__$1;
                            statearr_27419_27460[2] = inst_27379;
                            statearr_27419_27460[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_27403 === 10) {
                              var inst_27345 = state_27402[8];
                              var inst_27346 = state_27402[9];
                              var inst_27343 = state_27402[10];
                              var inst_27344 = state_27402[11];
                              var inst_27351 = cljs.core._nth.call(null, inst_27344, inst_27346);
                              var inst_27352 = cljs.core.async.muxch_STAR_.call(null, inst_27351);
                              var inst_27353 = cljs.core.async.close_BANG_.call(null, inst_27352);
                              var inst_27354 = inst_27346 + 1;
                              var tmp27414 = inst_27345;
                              var tmp27415 = inst_27343;
                              var tmp27416 = inst_27344;
                              var inst_27343__$1 = tmp27415;
                              var inst_27344__$1 = tmp27416;
                              var inst_27345__$1 = tmp27414;
                              var inst_27346__$1 = inst_27354;
                              var state_27402__$1 = function() {
                                var statearr_27420 = state_27402;
                                statearr_27420[14] = inst_27353;
                                statearr_27420[8] = inst_27345__$1;
                                statearr_27420[9] = inst_27346__$1;
                                statearr_27420[10] = inst_27343__$1;
                                statearr_27420[11] = inst_27344__$1;
                                return statearr_27420;
                              }();
                              var statearr_27421_27461 = state_27402__$1;
                              statearr_27421_27461[2] = null;
                              statearr_27421_27461[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27403 === 11) {
                                var inst_27357 = state_27402[15];
                                var inst_27343 = state_27402[10];
                                var inst_27357__$1 = cljs.core.seq.call(null, inst_27343);
                                var state_27402__$1 = function() {
                                  var statearr_27422 = state_27402;
                                  statearr_27422[15] = inst_27357__$1;
                                  return statearr_27422;
                                }();
                                if (inst_27357__$1) {
                                  var statearr_27423_27462 = state_27402__$1;
                                  statearr_27423_27462[1] = 13;
                                } else {
                                  var statearr_27424_27463 = state_27402__$1;
                                  statearr_27424_27463[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_27403 === 12) {
                                  var inst_27377 = state_27402[2];
                                  var state_27402__$1 = state_27402;
                                  var statearr_27425_27464 = state_27402__$1;
                                  statearr_27425_27464[2] = inst_27377;
                                  statearr_27425_27464[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_27403 === 13) {
                                    var inst_27357 = state_27402[15];
                                    var inst_27359 = cljs.core.chunked_seq_QMARK_.call(null, inst_27357);
                                    var state_27402__$1 = state_27402;
                                    if (inst_27359) {
                                      var statearr_27426_27465 = state_27402__$1;
                                      statearr_27426_27465[1] = 16;
                                    } else {
                                      var statearr_27427_27466 = state_27402__$1;
                                      statearr_27427_27466[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_27403 === 14) {
                                      var state_27402__$1 = state_27402;
                                      var statearr_27428_27467 = state_27402__$1;
                                      statearr_27428_27467[2] = null;
                                      statearr_27428_27467[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_27403 === 15) {
                                        var inst_27375 = state_27402[2];
                                        var state_27402__$1 = state_27402;
                                        var statearr_27429_27468 = state_27402__$1;
                                        statearr_27429_27468[2] = inst_27375;
                                        statearr_27429_27468[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_27403 === 16) {
                                          var inst_27357 = state_27402[15];
                                          var inst_27361 = cljs.core.chunk_first.call(null, inst_27357);
                                          var inst_27362 = cljs.core.chunk_rest.call(null, inst_27357);
                                          var inst_27363 = cljs.core.count.call(null, inst_27361);
                                          var inst_27343 = inst_27362;
                                          var inst_27344 = inst_27361;
                                          var inst_27345 = inst_27363;
                                          var inst_27346 = 0;
                                          var state_27402__$1 = function() {
                                            var statearr_27430 = state_27402;
                                            statearr_27430[8] = inst_27345;
                                            statearr_27430[9] = inst_27346;
                                            statearr_27430[10] = inst_27343;
                                            statearr_27430[11] = inst_27344;
                                            return statearr_27430;
                                          }();
                                          var statearr_27431_27469 = state_27402__$1;
                                          statearr_27431_27469[2] = null;
                                          statearr_27431_27469[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_27403 === 17) {
                                            var inst_27357 = state_27402[15];
                                            var inst_27366 = cljs.core.first.call(null, inst_27357);
                                            var inst_27367 = cljs.core.async.muxch_STAR_.call(null, inst_27366);
                                            var inst_27368 = cljs.core.async.close_BANG_.call(null, inst_27367);
                                            var inst_27369 = cljs.core.next.call(null, inst_27357);
                                            var inst_27343 = inst_27369;
                                            var inst_27344 = null;
                                            var inst_27345 = 0;
                                            var inst_27346 = 0;
                                            var state_27402__$1 = function() {
                                              var statearr_27432 = state_27402;
                                              statearr_27432[16] = inst_27368;
                                              statearr_27432[8] = inst_27345;
                                              statearr_27432[9] = inst_27346;
                                              statearr_27432[10] = inst_27343;
                                              statearr_27432[11] = inst_27344;
                                              return statearr_27432;
                                            }();
                                            var statearr_27433_27470 = state_27402__$1;
                                            statearr_27433_27470[2] = null;
                                            statearr_27433_27470[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_27403 === 18) {
                                              var inst_27372 = state_27402[2];
                                              var state_27402__$1 = state_27402;
                                              var statearr_27434_27471 = state_27402__$1;
                                              statearr_27434_27471[2] = inst_27372;
                                              statearr_27434_27471[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_27403 === 19) {
                                                var inst_27333 = state_27402[7];
                                                var inst_27383 = state_27402[13];
                                                var inst_27385 = cljs.core.async.muxch_STAR_.call(null, inst_27383);
                                                var state_27402__$1 = state_27402;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27402__$1, 22, inst_27385, inst_27333);
                                              } else {
                                                if (state_val_27403 === 20) {
                                                  var state_27402__$1 = state_27402;
                                                  var statearr_27435_27472 = state_27402__$1;
                                                  statearr_27435_27472[2] = null;
                                                  statearr_27435_27472[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_27403 === 21) {
                                                    var inst_27395 = state_27402[2];
                                                    var state_27402__$1 = function() {
                                                      var statearr_27436 = state_27402;
                                                      statearr_27436[17] = inst_27395;
                                                      return statearr_27436;
                                                    }();
                                                    var statearr_27437_27473 = state_27402__$1;
                                                    statearr_27437_27473[2] = null;
                                                    statearr_27437_27473[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_27403 === 22) {
                                                      var inst_27387 = state_27402[2];
                                                      var state_27402__$1 = state_27402;
                                                      if (cljs.core.truth_(inst_27387)) {
                                                        var statearr_27438_27474 = state_27402__$1;
                                                        statearr_27438_27474[1] = 23;
                                                      } else {
                                                        var statearr_27439_27475 = state_27402__$1;
                                                        statearr_27439_27475[1] = 24;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_27403 === 23) {
                                                        var state_27402__$1 = state_27402;
                                                        var statearr_27440_27476 = state_27402__$1;
                                                        statearr_27440_27476[2] = null;
                                                        statearr_27440_27476[1] = 25;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_27403 === 24) {
                                                          var inst_27381 = state_27402[12];
                                                          var inst_27390 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_27381);
                                                          var state_27402__$1 = state_27402;
                                                          var statearr_27441_27477 = state_27402__$1;
                                                          statearr_27441_27477[2] = inst_27390;
                                                          statearr_27441_27477[1] = 25;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_27403 === 25) {
                                                            var inst_27392 = state_27402[2];
                                                            var state_27402__$1 = state_27402;
                                                            var statearr_27442_27478 = state_27402__$1;
                                                            statearr_27442_27478[2] = inst_27392;
                                                            statearr_27442_27478[1] = 21;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_27446 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27446[0] = state_machine__6137__auto__;
              statearr_27446[1] = 1;
              return statearr_27446;
            };
            var state_machine__6137__auto____1 = function(state_27402) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_27402);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e27447) {
                    if (e27447 instanceof Object) {
                      var ex__6140__auto__ = e27447;
                      var statearr_27448_27479 = state_27402;
                      statearr_27448_27479[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27402);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e27447;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__27480 = state_27402;
                  state_27402 = G__27480;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_27402) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_27402);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_27449 = f__6152__auto__.call(null);
        statearr_27449[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27450;
        return statearr_27449;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6151__auto___27617 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_27587) {
          var state_val_27588 = state_27587[1];
          if (state_val_27588 === 1) {
            var state_27587__$1 = state_27587;
            var statearr_27589_27618 = state_27587__$1;
            statearr_27589_27618[2] = null;
            statearr_27589_27618[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27588 === 2) {
              var inst_27550 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_27551 = 0;
              var state_27587__$1 = function() {
                var statearr_27590 = state_27587;
                statearr_27590[7] = inst_27551;
                statearr_27590[8] = inst_27550;
                return statearr_27590;
              }();
              var statearr_27591_27619 = state_27587__$1;
              statearr_27591_27619[2] = null;
              statearr_27591_27619[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_27588 === 3) {
                var inst_27585 = state_27587[2];
                var state_27587__$1 = state_27587;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27587__$1, inst_27585);
              } else {
                if (state_val_27588 === 4) {
                  var inst_27551 = state_27587[7];
                  var inst_27553 = inst_27551 < cnt;
                  var state_27587__$1 = state_27587;
                  if (cljs.core.truth_(inst_27553)) {
                    var statearr_27592_27620 = state_27587__$1;
                    statearr_27592_27620[1] = 6;
                  } else {
                    var statearr_27593_27621 = state_27587__$1;
                    statearr_27593_27621[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_27588 === 5) {
                    var inst_27571 = state_27587[2];
                    var state_27587__$1 = function() {
                      var statearr_27594 = state_27587;
                      statearr_27594[9] = inst_27571;
                      return statearr_27594;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27587__$1, 12, dchan);
                  } else {
                    if (state_val_27588 === 6) {
                      var state_27587__$1 = state_27587;
                      var statearr_27595_27622 = state_27587__$1;
                      statearr_27595_27622[2] = null;
                      statearr_27595_27622[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27588 === 7) {
                        var state_27587__$1 = state_27587;
                        var statearr_27596_27623 = state_27587__$1;
                        statearr_27596_27623[2] = null;
                        statearr_27596_27623[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27588 === 8) {
                          var inst_27569 = state_27587[2];
                          var state_27587__$1 = state_27587;
                          var statearr_27597_27624 = state_27587__$1;
                          statearr_27597_27624[2] = inst_27569;
                          statearr_27597_27624[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_27588 === 9) {
                            var inst_27551 = state_27587[7];
                            var inst_27564 = state_27587[2];
                            var inst_27565 = inst_27551 + 1;
                            var inst_27551__$1 = inst_27565;
                            var state_27587__$1 = function() {
                              var statearr_27598 = state_27587;
                              statearr_27598[7] = inst_27551__$1;
                              statearr_27598[10] = inst_27564;
                              return statearr_27598;
                            }();
                            var statearr_27599_27625 = state_27587__$1;
                            statearr_27599_27625[2] = null;
                            statearr_27599_27625[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_27588 === 10) {
                              var inst_27555 = state_27587[2];
                              var inst_27556 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_27587__$1 = function() {
                                var statearr_27600 = state_27587;
                                statearr_27600[11] = inst_27555;
                                return statearr_27600;
                              }();
                              var statearr_27601_27626 = state_27587__$1;
                              statearr_27601_27626[2] = inst_27556;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27587__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27588 === 11) {
                                var inst_27551 = state_27587[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_27587, 10, Object, null, 9);
                                var inst_27560 = chs__$1.call(null, inst_27551);
                                var inst_27561 = done.call(null, inst_27551);
                                var inst_27562 = cljs.core.async.take_BANG_.call(null, inst_27560, inst_27561);
                                var state_27587__$1 = state_27587;
                                var statearr_27602_27627 = state_27587__$1;
                                statearr_27602_27627[2] = inst_27562;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27587__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_27588 === 12) {
                                  var inst_27573 = state_27587[12];
                                  var inst_27573__$1 = state_27587[2];
                                  var inst_27574 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_27573__$1);
                                  var state_27587__$1 = function() {
                                    var statearr_27603 = state_27587;
                                    statearr_27603[12] = inst_27573__$1;
                                    return statearr_27603;
                                  }();
                                  if (cljs.core.truth_(inst_27574)) {
                                    var statearr_27604_27628 = state_27587__$1;
                                    statearr_27604_27628[1] = 13;
                                  } else {
                                    var statearr_27605_27629 = state_27587__$1;
                                    statearr_27605_27629[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_27588 === 13) {
                                    var inst_27576 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_27587__$1 = state_27587;
                                    var statearr_27606_27630 = state_27587__$1;
                                    statearr_27606_27630[2] = inst_27576;
                                    statearr_27606_27630[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_27588 === 14) {
                                      var inst_27573 = state_27587[12];
                                      var inst_27578 = cljs.core.apply.call(null, f, inst_27573);
                                      var state_27587__$1 = state_27587;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27587__$1, 16, out, inst_27578);
                                    } else {
                                      if (state_val_27588 === 15) {
                                        var inst_27583 = state_27587[2];
                                        var state_27587__$1 = state_27587;
                                        var statearr_27607_27631 = state_27587__$1;
                                        statearr_27607_27631[2] = inst_27583;
                                        statearr_27607_27631[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_27588 === 16) {
                                          var inst_27580 = state_27587[2];
                                          var state_27587__$1 = function() {
                                            var statearr_27608 = state_27587;
                                            statearr_27608[13] = inst_27580;
                                            return statearr_27608;
                                          }();
                                          var statearr_27609_27632 = state_27587__$1;
                                          statearr_27609_27632[2] = null;
                                          statearr_27609_27632[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_27613 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27613[0] = state_machine__6137__auto__;
              statearr_27613[1] = 1;
              return statearr_27613;
            };
            var state_machine__6137__auto____1 = function(state_27587) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_27587);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e27614) {
                    if (e27614 instanceof Object) {
                      var ex__6140__auto__ = e27614;
                      var statearr_27615_27633 = state_27587;
                      statearr_27615_27633[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27587);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e27614;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__27634 = state_27587;
                  state_27587 = G__27634;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_27587) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_27587);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_27616 = f__6152__auto__.call(null);
        statearr_27616[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27617;
        return statearr_27616;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___27742 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_27718) {
          var state_val_27719 = state_27718[1];
          if (state_val_27719 === 1) {
            var inst_27689 = cljs.core.vec.call(null, chs);
            var inst_27690 = inst_27689;
            var state_27718__$1 = function() {
              var statearr_27720 = state_27718;
              statearr_27720[7] = inst_27690;
              return statearr_27720;
            }();
            var statearr_27721_27743 = state_27718__$1;
            statearr_27721_27743[2] = null;
            statearr_27721_27743[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27719 === 2) {
              var inst_27690 = state_27718[7];
              var inst_27692 = cljs.core.count.call(null, inst_27690);
              var inst_27693 = inst_27692 > 0;
              var state_27718__$1 = state_27718;
              if (cljs.core.truth_(inst_27693)) {
                var statearr_27722_27744 = state_27718__$1;
                statearr_27722_27744[1] = 4;
              } else {
                var statearr_27723_27745 = state_27718__$1;
                statearr_27723_27745[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_27719 === 3) {
                var inst_27716 = state_27718[2];
                var state_27718__$1 = state_27718;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27718__$1, inst_27716);
              } else {
                if (state_val_27719 === 4) {
                  var inst_27690 = state_27718[7];
                  var state_27718__$1 = state_27718;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_27718__$1, 7, inst_27690);
                } else {
                  if (state_val_27719 === 5) {
                    var inst_27712 = cljs.core.async.close_BANG_.call(null, out);
                    var state_27718__$1 = state_27718;
                    var statearr_27724_27746 = state_27718__$1;
                    statearr_27724_27746[2] = inst_27712;
                    statearr_27724_27746[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_27719 === 6) {
                      var inst_27714 = state_27718[2];
                      var state_27718__$1 = state_27718;
                      var statearr_27725_27747 = state_27718__$1;
                      statearr_27725_27747[2] = inst_27714;
                      statearr_27725_27747[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27719 === 7) {
                        var inst_27697 = state_27718[8];
                        var inst_27698 = state_27718[9];
                        var inst_27697__$1 = state_27718[2];
                        var inst_27698__$1 = cljs.core.nth.call(null, inst_27697__$1, 0, null);
                        var inst_27699 = cljs.core.nth.call(null, inst_27697__$1, 1, null);
                        var inst_27700 = inst_27698__$1 == null;
                        var state_27718__$1 = function() {
                          var statearr_27726 = state_27718;
                          statearr_27726[8] = inst_27697__$1;
                          statearr_27726[9] = inst_27698__$1;
                          statearr_27726[10] = inst_27699;
                          return statearr_27726;
                        }();
                        if (cljs.core.truth_(inst_27700)) {
                          var statearr_27727_27748 = state_27718__$1;
                          statearr_27727_27748[1] = 8;
                        } else {
                          var statearr_27728_27749 = state_27718__$1;
                          statearr_27728_27749[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27719 === 8) {
                          var inst_27690 = state_27718[7];
                          var inst_27697 = state_27718[8];
                          var inst_27698 = state_27718[9];
                          var inst_27699 = state_27718[10];
                          var inst_27702 = function() {
                            var c = inst_27699;
                            var v = inst_27698;
                            var vec__27695 = inst_27697;
                            var cs = inst_27690;
                            return function(c, v, vec__27695, cs, inst_27690, inst_27697, inst_27698, inst_27699, state_val_27719) {
                              return function(p1__27635_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__27635_SHARP_);
                              };
                            }(c, v, vec__27695, cs, inst_27690, inst_27697, inst_27698, inst_27699, state_val_27719);
                          }();
                          var inst_27703 = cljs.core.filterv.call(null, inst_27702, inst_27690);
                          var inst_27690__$1 = inst_27703;
                          var state_27718__$1 = function() {
                            var statearr_27729 = state_27718;
                            statearr_27729[7] = inst_27690__$1;
                            return statearr_27729;
                          }();
                          var statearr_27730_27750 = state_27718__$1;
                          statearr_27730_27750[2] = null;
                          statearr_27730_27750[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_27719 === 9) {
                            var inst_27698 = state_27718[9];
                            var state_27718__$1 = state_27718;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27718__$1, 11, out, inst_27698);
                          } else {
                            if (state_val_27719 === 10) {
                              var inst_27710 = state_27718[2];
                              var state_27718__$1 = state_27718;
                              var statearr_27732_27751 = state_27718__$1;
                              statearr_27732_27751[2] = inst_27710;
                              statearr_27732_27751[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27719 === 11) {
                                var inst_27690 = state_27718[7];
                                var inst_27707 = state_27718[2];
                                var tmp27731 = inst_27690;
                                var inst_27690__$1 = tmp27731;
                                var state_27718__$1 = function() {
                                  var statearr_27733 = state_27718;
                                  statearr_27733[7] = inst_27690__$1;
                                  statearr_27733[11] = inst_27707;
                                  return statearr_27733;
                                }();
                                var statearr_27734_27752 = state_27718__$1;
                                statearr_27734_27752[2] = null;
                                statearr_27734_27752[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_27738 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27738[0] = state_machine__6137__auto__;
              statearr_27738[1] = 1;
              return statearr_27738;
            };
            var state_machine__6137__auto____1 = function(state_27718) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_27718);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e27739) {
                    if (e27739 instanceof Object) {
                      var ex__6140__auto__ = e27739;
                      var statearr_27740_27753 = state_27718;
                      statearr_27740_27753[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27718);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e27739;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__27754 = state_27718;
                  state_27718 = G__27754;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_27718) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_27718);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_27741 = f__6152__auto__.call(null);
        statearr_27741[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27742;
        return statearr_27741;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___27847 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_27824) {
          var state_val_27825 = state_27824[1];
          if (state_val_27825 === 1) {
            var inst_27801 = 0;
            var state_27824__$1 = function() {
              var statearr_27826 = state_27824;
              statearr_27826[7] = inst_27801;
              return statearr_27826;
            }();
            var statearr_27827_27848 = state_27824__$1;
            statearr_27827_27848[2] = null;
            statearr_27827_27848[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27825 === 2) {
              var inst_27801 = state_27824[7];
              var inst_27803 = inst_27801 < n;
              var state_27824__$1 = state_27824;
              if (cljs.core.truth_(inst_27803)) {
                var statearr_27828_27849 = state_27824__$1;
                statearr_27828_27849[1] = 4;
              } else {
                var statearr_27829_27850 = state_27824__$1;
                statearr_27829_27850[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_27825 === 3) {
                var inst_27821 = state_27824[2];
                var inst_27822 = cljs.core.async.close_BANG_.call(null, out);
                var state_27824__$1 = function() {
                  var statearr_27830 = state_27824;
                  statearr_27830[8] = inst_27821;
                  return statearr_27830;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27824__$1, inst_27822);
              } else {
                if (state_val_27825 === 4) {
                  var state_27824__$1 = state_27824;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27824__$1, 7, ch);
                } else {
                  if (state_val_27825 === 5) {
                    var state_27824__$1 = state_27824;
                    var statearr_27831_27851 = state_27824__$1;
                    statearr_27831_27851[2] = null;
                    statearr_27831_27851[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_27825 === 6) {
                      var inst_27819 = state_27824[2];
                      var state_27824__$1 = state_27824;
                      var statearr_27832_27852 = state_27824__$1;
                      statearr_27832_27852[2] = inst_27819;
                      statearr_27832_27852[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27825 === 7) {
                        var inst_27806 = state_27824[9];
                        var inst_27806__$1 = state_27824[2];
                        var inst_27807 = inst_27806__$1 == null;
                        var inst_27808 = cljs.core.not.call(null, inst_27807);
                        var state_27824__$1 = function() {
                          var statearr_27833 = state_27824;
                          statearr_27833[9] = inst_27806__$1;
                          return statearr_27833;
                        }();
                        if (inst_27808) {
                          var statearr_27834_27853 = state_27824__$1;
                          statearr_27834_27853[1] = 8;
                        } else {
                          var statearr_27835_27854 = state_27824__$1;
                          statearr_27835_27854[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27825 === 8) {
                          var inst_27806 = state_27824[9];
                          var state_27824__$1 = state_27824;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27824__$1, 11, out, inst_27806);
                        } else {
                          if (state_val_27825 === 9) {
                            var state_27824__$1 = state_27824;
                            var statearr_27836_27855 = state_27824__$1;
                            statearr_27836_27855[2] = null;
                            statearr_27836_27855[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_27825 === 10) {
                              var inst_27816 = state_27824[2];
                              var state_27824__$1 = state_27824;
                              var statearr_27837_27856 = state_27824__$1;
                              statearr_27837_27856[2] = inst_27816;
                              statearr_27837_27856[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27825 === 11) {
                                var inst_27801 = state_27824[7];
                                var inst_27811 = state_27824[2];
                                var inst_27812 = inst_27801 + 1;
                                var inst_27801__$1 = inst_27812;
                                var state_27824__$1 = function() {
                                  var statearr_27838 = state_27824;
                                  statearr_27838[7] = inst_27801__$1;
                                  statearr_27838[10] = inst_27811;
                                  return statearr_27838;
                                }();
                                var statearr_27839_27857 = state_27824__$1;
                                statearr_27839_27857[2] = null;
                                statearr_27839_27857[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_27843 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_27843[0] = state_machine__6137__auto__;
              statearr_27843[1] = 1;
              return statearr_27843;
            };
            var state_machine__6137__auto____1 = function(state_27824) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_27824);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e27844) {
                    if (e27844 instanceof Object) {
                      var ex__6140__auto__ = e27844;
                      var statearr_27845_27858 = state_27824;
                      statearr_27845_27858[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27824);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e27844;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__27859 = state_27824;
                  state_27824 = G__27859;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_27824) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_27824);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_27846 = f__6152__auto__.call(null);
        statearr_27846[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27847;
        return statearr_27846;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t27867 !== "undefined") {
  } else {
    cljs.core.async.t27867 = function(ch, f, map_LT_, meta27868) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta27868 = meta27868;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27867.cljs$lang$type = true;
    cljs.core.async.t27867.cljs$lang$ctorStr = "cljs.core.async/t27867";
    cljs.core.async.t27867.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27867");
    };
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t27870 !== "undefined") {
        } else {
          cljs.core.async.t27870 = function(fn1, _, meta27868, ch, f, map_LT_, meta27871) {
            this.fn1 = fn1;
            this._ = _;
            this.meta27868 = meta27868;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta27871 = meta27871;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t27870.cljs$lang$type = true;
          cljs.core.async.t27870.cljs$lang$ctorStr = "cljs.core.async/t27870";
          cljs.core.async.t27870.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
            return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27870");
          };
          cljs.core.async.t27870.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t27870.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t27870.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t27870.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__27860_SHARP_) {
                return f1.call(null, p1__27860_SHARP_ == null ? null : self__.f.call(null, p1__27860_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t27870.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27872) {
            var self__ = this;
            var _27872__$1 = this;
            return self__.meta27871;
          };
          cljs.core.async.t27870.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27872, meta27871__$1) {
            var self__ = this;
            var _27872__$1 = this;
            return new cljs.core.async.t27870(self__.fn1, self__._, self__.meta27868, self__.ch, self__.f, self__.map_LT_, meta27871__$1);
          };
          cljs.core.async.__GT_t27870 = function __GT_t27870(fn1__$1, ___$2, meta27868__$1, ch__$2, f__$2, map_LT___$2, meta27871) {
            return new cljs.core.async.t27870(fn1__$1, ___$2, meta27868__$1, ch__$2, f__$2, map_LT___$2, meta27871);
          };
        }
        return new cljs.core.async.t27870(fn1, ___$1, self__.meta27868, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3437__auto__ = ret;
        if (cljs.core.truth_(and__3437__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3437__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27867.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t27867.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27869) {
      var self__ = this;
      var _27869__$1 = this;
      return self__.meta27868;
    };
    cljs.core.async.t27867.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27869, meta27868__$1) {
      var self__ = this;
      var _27869__$1 = this;
      return new cljs.core.async.t27867(self__.ch, self__.f, self__.map_LT_, meta27868__$1);
    };
    cljs.core.async.__GT_t27867 = function __GT_t27867(ch__$1, f__$1, map_LT___$1, meta27868) {
      return new cljs.core.async.t27867(ch__$1, f__$1, map_LT___$1, meta27868);
    };
  }
  return new cljs.core.async.t27867(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t27876 !== "undefined") {
  } else {
    cljs.core.async.t27876 = function(ch, f, map_GT_, meta27877) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta27877 = meta27877;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27876.cljs$lang$type = true;
    cljs.core.async.t27876.cljs$lang$ctorStr = "cljs.core.async/t27876";
    cljs.core.async.t27876.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27876");
    };
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27876.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27876.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27878) {
      var self__ = this;
      var _27878__$1 = this;
      return self__.meta27877;
    };
    cljs.core.async.t27876.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27878, meta27877__$1) {
      var self__ = this;
      var _27878__$1 = this;
      return new cljs.core.async.t27876(self__.ch, self__.f, self__.map_GT_, meta27877__$1);
    };
    cljs.core.async.__GT_t27876 = function __GT_t27876(ch__$1, f__$1, map_GT___$1, meta27877) {
      return new cljs.core.async.t27876(ch__$1, f__$1, map_GT___$1, meta27877);
    };
  }
  return new cljs.core.async.t27876(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t27882 !== "undefined") {
  } else {
    cljs.core.async.t27882 = function(ch, p, filter_GT_, meta27883) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta27883 = meta27883;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27882.cljs$lang$type = true;
    cljs.core.async.t27882.cljs$lang$ctorStr = "cljs.core.async/t27882";
    cljs.core.async.t27882.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
      return cljs.core._write.call(null, writer__4017__auto__, "cljs.core.async/t27882");
    };
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27882.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t27882.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27884) {
      var self__ = this;
      var _27884__$1 = this;
      return self__.meta27883;
    };
    cljs.core.async.t27882.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27884, meta27883__$1) {
      var self__ = this;
      var _27884__$1 = this;
      return new cljs.core.async.t27882(self__.ch, self__.p, self__.filter_GT_, meta27883__$1);
    };
    cljs.core.async.__GT_t27882 = function __GT_t27882(ch__$1, p__$1, filter_GT___$1, meta27883) {
      return new cljs.core.async.t27882(ch__$1, p__$1, filter_GT___$1, meta27883);
    };
  }
  return new cljs.core.async.t27882(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___27967 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_27946) {
          var state_val_27947 = state_27946[1];
          if (state_val_27947 === 1) {
            var state_27946__$1 = state_27946;
            var statearr_27948_27968 = state_27946__$1;
            statearr_27948_27968[2] = null;
            statearr_27948_27968[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_27947 === 2) {
              var state_27946__$1 = state_27946;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27946__$1, 4, ch);
            } else {
              if (state_val_27947 === 3) {
                var inst_27944 = state_27946[2];
                var state_27946__$1 = state_27946;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27946__$1, inst_27944);
              } else {
                if (state_val_27947 === 4) {
                  var inst_27928 = state_27946[7];
                  var inst_27928__$1 = state_27946[2];
                  var inst_27929 = inst_27928__$1 == null;
                  var state_27946__$1 = function() {
                    var statearr_27949 = state_27946;
                    statearr_27949[7] = inst_27928__$1;
                    return statearr_27949;
                  }();
                  if (cljs.core.truth_(inst_27929)) {
                    var statearr_27950_27969 = state_27946__$1;
                    statearr_27950_27969[1] = 5;
                  } else {
                    var statearr_27951_27970 = state_27946__$1;
                    statearr_27951_27970[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_27947 === 5) {
                    var inst_27931 = cljs.core.async.close_BANG_.call(null, out);
                    var state_27946__$1 = state_27946;
                    var statearr_27952_27971 = state_27946__$1;
                    statearr_27952_27971[2] = inst_27931;
                    statearr_27952_27971[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_27947 === 6) {
                      var inst_27928 = state_27946[7];
                      var inst_27933 = p.call(null, inst_27928);
                      var state_27946__$1 = state_27946;
                      if (cljs.core.truth_(inst_27933)) {
                        var statearr_27953_27972 = state_27946__$1;
                        statearr_27953_27972[1] = 8;
                      } else {
                        var statearr_27954_27973 = state_27946__$1;
                        statearr_27954_27973[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_27947 === 7) {
                        var inst_27942 = state_27946[2];
                        var state_27946__$1 = state_27946;
                        var statearr_27955_27974 = state_27946__$1;
                        statearr_27955_27974[2] = inst_27942;
                        statearr_27955_27974[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_27947 === 8) {
                          var inst_27928 = state_27946[7];
                          var state_27946__$1 = state_27946;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27946__$1, 11, out, inst_27928);
                        } else {
                          if (state_val_27947 === 9) {
                            var state_27946__$1 = state_27946;
                            var statearr_27956_27975 = state_27946__$1;
                            statearr_27956_27975[2] = null;
                            statearr_27956_27975[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_27947 === 10) {
                              var inst_27939 = state_27946[2];
                              var state_27946__$1 = function() {
                                var statearr_27957 = state_27946;
                                statearr_27957[8] = inst_27939;
                                return statearr_27957;
                              }();
                              var statearr_27958_27976 = state_27946__$1;
                              statearr_27958_27976[2] = null;
                              statearr_27958_27976[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_27947 === 11) {
                                var inst_27936 = state_27946[2];
                                var state_27946__$1 = state_27946;
                                var statearr_27959_27977 = state_27946__$1;
                                statearr_27959_27977[2] = inst_27936;
                                statearr_27959_27977[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_27963 = [null, null, null, null, null, null, null, null, null];
              statearr_27963[0] = state_machine__6137__auto__;
              statearr_27963[1] = 1;
              return statearr_27963;
            };
            var state_machine__6137__auto____1 = function(state_27946) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_27946);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e27964) {
                    if (e27964 instanceof Object) {
                      var ex__6140__auto__ = e27964;
                      var statearr_27965_27978 = state_27946;
                      statearr_27965_27978[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27946);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e27964;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__27979 = state_27946;
                  state_27946 = G__27979;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_27946) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_27946);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_27966 = f__6152__auto__.call(null);
        statearr_27966[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___27967;
        return statearr_27966;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6151__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__6152__auto__ = function() {
      var switch__6136__auto__ = function(state_28145) {
        var state_val_28146 = state_28145[1];
        if (state_val_28146 === 1) {
          var state_28145__$1 = state_28145;
          var statearr_28147_28188 = state_28145__$1;
          statearr_28147_28188[2] = null;
          statearr_28147_28188[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_28146 === 2) {
            var state_28145__$1 = state_28145;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28145__$1, 4, in$);
          } else {
            if (state_val_28146 === 3) {
              var inst_28143 = state_28145[2];
              var state_28145__$1 = state_28145;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28145__$1, inst_28143);
            } else {
              if (state_val_28146 === 4) {
                var inst_28086 = state_28145[7];
                var inst_28086__$1 = state_28145[2];
                var inst_28087 = inst_28086__$1 == null;
                var state_28145__$1 = function() {
                  var statearr_28148 = state_28145;
                  statearr_28148[7] = inst_28086__$1;
                  return statearr_28148;
                }();
                if (cljs.core.truth_(inst_28087)) {
                  var statearr_28149_28189 = state_28145__$1;
                  statearr_28149_28189[1] = 5;
                } else {
                  var statearr_28150_28190 = state_28145__$1;
                  statearr_28150_28190[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_28146 === 5) {
                  var inst_28089 = cljs.core.async.close_BANG_.call(null, out);
                  var state_28145__$1 = state_28145;
                  var statearr_28151_28191 = state_28145__$1;
                  statearr_28151_28191[2] = inst_28089;
                  statearr_28151_28191[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_28146 === 6) {
                    var inst_28086 = state_28145[7];
                    var inst_28095 = f.call(null, inst_28086);
                    var inst_28096 = cljs.core.seq.call(null, inst_28095);
                    var inst_28097 = inst_28096;
                    var inst_28098 = null;
                    var inst_28099 = 0;
                    var inst_28100 = 0;
                    var state_28145__$1 = function() {
                      var statearr_28152 = state_28145;
                      statearr_28152[8] = inst_28099;
                      statearr_28152[9] = inst_28098;
                      statearr_28152[10] = inst_28097;
                      statearr_28152[11] = inst_28100;
                      return statearr_28152;
                    }();
                    var statearr_28153_28192 = state_28145__$1;
                    statearr_28153_28192[2] = null;
                    statearr_28153_28192[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_28146 === 7) {
                      var inst_28141 = state_28145[2];
                      var state_28145__$1 = state_28145;
                      var statearr_28154_28193 = state_28145__$1;
                      statearr_28154_28193[2] = inst_28141;
                      statearr_28154_28193[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_28146 === 8) {
                        var inst_28099 = state_28145[8];
                        var inst_28100 = state_28145[11];
                        var inst_28102 = inst_28100 < inst_28099;
                        var inst_28103 = inst_28102;
                        var state_28145__$1 = state_28145;
                        if (cljs.core.truth_(inst_28103)) {
                          var statearr_28155_28194 = state_28145__$1;
                          statearr_28155_28194[1] = 10;
                        } else {
                          var statearr_28156_28195 = state_28145__$1;
                          statearr_28156_28195[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_28146 === 9) {
                          var inst_28133 = state_28145[2];
                          var inst_28134 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                          var state_28145__$1 = function() {
                            var statearr_28157 = state_28145;
                            statearr_28157[12] = inst_28133;
                            return statearr_28157;
                          }();
                          if (cljs.core.truth_(inst_28134)) {
                            var statearr_28158_28196 = state_28145__$1;
                            statearr_28158_28196[1] = 21;
                          } else {
                            var statearr_28159_28197 = state_28145__$1;
                            statearr_28159_28197[1] = 22;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_28146 === 10) {
                            var inst_28098 = state_28145[9];
                            var inst_28100 = state_28145[11];
                            var inst_28105 = cljs.core._nth.call(null, inst_28098, inst_28100);
                            var state_28145__$1 = state_28145;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28145__$1, 13, out, inst_28105);
                          } else {
                            if (state_val_28146 === 11) {
                              var inst_28097 = state_28145[10];
                              var inst_28111 = state_28145[13];
                              var inst_28111__$1 = cljs.core.seq.call(null, inst_28097);
                              var state_28145__$1 = function() {
                                var statearr_28163 = state_28145;
                                statearr_28163[13] = inst_28111__$1;
                                return statearr_28163;
                              }();
                              if (inst_28111__$1) {
                                var statearr_28164_28198 = state_28145__$1;
                                statearr_28164_28198[1] = 14;
                              } else {
                                var statearr_28165_28199 = state_28145__$1;
                                statearr_28165_28199[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_28146 === 12) {
                                var inst_28131 = state_28145[2];
                                var state_28145__$1 = state_28145;
                                var statearr_28166_28200 = state_28145__$1;
                                statearr_28166_28200[2] = inst_28131;
                                statearr_28166_28200[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_28146 === 13) {
                                  var inst_28099 = state_28145[8];
                                  var inst_28098 = state_28145[9];
                                  var inst_28097 = state_28145[10];
                                  var inst_28100 = state_28145[11];
                                  var inst_28107 = state_28145[2];
                                  var inst_28108 = inst_28100 + 1;
                                  var tmp28160 = inst_28099;
                                  var tmp28161 = inst_28098;
                                  var tmp28162 = inst_28097;
                                  var inst_28097__$1 = tmp28162;
                                  var inst_28098__$1 = tmp28161;
                                  var inst_28099__$1 = tmp28160;
                                  var inst_28100__$1 = inst_28108;
                                  var state_28145__$1 = function() {
                                    var statearr_28167 = state_28145;
                                    statearr_28167[8] = inst_28099__$1;
                                    statearr_28167[9] = inst_28098__$1;
                                    statearr_28167[10] = inst_28097__$1;
                                    statearr_28167[11] = inst_28100__$1;
                                    statearr_28167[14] = inst_28107;
                                    return statearr_28167;
                                  }();
                                  var statearr_28168_28201 = state_28145__$1;
                                  statearr_28168_28201[2] = null;
                                  statearr_28168_28201[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_28146 === 14) {
                                    var inst_28111 = state_28145[13];
                                    var inst_28113 = cljs.core.chunked_seq_QMARK_.call(null, inst_28111);
                                    var state_28145__$1 = state_28145;
                                    if (inst_28113) {
                                      var statearr_28169_28202 = state_28145__$1;
                                      statearr_28169_28202[1] = 17;
                                    } else {
                                      var statearr_28170_28203 = state_28145__$1;
                                      statearr_28170_28203[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_28146 === 15) {
                                      var state_28145__$1 = state_28145;
                                      var statearr_28171_28204 = state_28145__$1;
                                      statearr_28171_28204[2] = null;
                                      statearr_28171_28204[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_28146 === 16) {
                                        var inst_28129 = state_28145[2];
                                        var state_28145__$1 = state_28145;
                                        var statearr_28172_28205 = state_28145__$1;
                                        statearr_28172_28205[2] = inst_28129;
                                        statearr_28172_28205[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_28146 === 17) {
                                          var inst_28111 = state_28145[13];
                                          var inst_28115 = cljs.core.chunk_first.call(null, inst_28111);
                                          var inst_28116 = cljs.core.chunk_rest.call(null, inst_28111);
                                          var inst_28117 = cljs.core.count.call(null, inst_28115);
                                          var inst_28097 = inst_28116;
                                          var inst_28098 = inst_28115;
                                          var inst_28099 = inst_28117;
                                          var inst_28100 = 0;
                                          var state_28145__$1 = function() {
                                            var statearr_28173 = state_28145;
                                            statearr_28173[8] = inst_28099;
                                            statearr_28173[9] = inst_28098;
                                            statearr_28173[10] = inst_28097;
                                            statearr_28173[11] = inst_28100;
                                            return statearr_28173;
                                          }();
                                          var statearr_28174_28206 = state_28145__$1;
                                          statearr_28174_28206[2] = null;
                                          statearr_28174_28206[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_28146 === 18) {
                                            var inst_28111 = state_28145[13];
                                            var inst_28120 = cljs.core.first.call(null, inst_28111);
                                            var state_28145__$1 = state_28145;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28145__$1, 20, out, inst_28120);
                                          } else {
                                            if (state_val_28146 === 19) {
                                              var inst_28126 = state_28145[2];
                                              var state_28145__$1 = state_28145;
                                              var statearr_28175_28207 = state_28145__$1;
                                              statearr_28175_28207[2] = inst_28126;
                                              statearr_28175_28207[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_28146 === 20) {
                                                var inst_28111 = state_28145[13];
                                                var inst_28122 = state_28145[2];
                                                var inst_28123 = cljs.core.next.call(null, inst_28111);
                                                var inst_28097 = inst_28123;
                                                var inst_28098 = null;
                                                var inst_28099 = 0;
                                                var inst_28100 = 0;
                                                var state_28145__$1 = function() {
                                                  var statearr_28176 = state_28145;
                                                  statearr_28176[15] = inst_28122;
                                                  statearr_28176[8] = inst_28099;
                                                  statearr_28176[9] = inst_28098;
                                                  statearr_28176[10] = inst_28097;
                                                  statearr_28176[11] = inst_28100;
                                                  return statearr_28176;
                                                }();
                                                var statearr_28177_28208 = state_28145__$1;
                                                statearr_28177_28208[2] = null;
                                                statearr_28177_28208[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_28146 === 21) {
                                                  var state_28145__$1 = state_28145;
                                                  var statearr_28178_28209 = state_28145__$1;
                                                  statearr_28178_28209[2] = null;
                                                  statearr_28178_28209[1] = 23;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_28146 === 22) {
                                                    var state_28145__$1 = state_28145;
                                                    var statearr_28179_28210 = state_28145__$1;
                                                    statearr_28179_28210[2] = null;
                                                    statearr_28179_28210[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_28146 === 23) {
                                                      var inst_28139 = state_28145[2];
                                                      var state_28145__$1 = state_28145;
                                                      var statearr_28180_28211 = state_28145__$1;
                                                      statearr_28180_28211[2] = inst_28139;
                                                      statearr_28180_28211[1] = 7;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__6136__auto__) {
        return function() {
          var state_machine__6137__auto__ = null;
          var state_machine__6137__auto____0 = function() {
            var statearr_28184 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_28184[0] = state_machine__6137__auto__;
            statearr_28184[1] = 1;
            return statearr_28184;
          };
          var state_machine__6137__auto____1 = function(state_28145) {
            while (true) {
              var ret_value__6138__auto__ = function() {
                try {
                  while (true) {
                    var result__6139__auto__ = switch__6136__auto__.call(null, state_28145);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__6139__auto__;
                    }
                    break;
                  }
                } catch (e28185) {
                  if (e28185 instanceof Object) {
                    var ex__6140__auto__ = e28185;
                    var statearr_28186_28212 = state_28145;
                    statearr_28186_28212[5] = ex__6140__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28145);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e28185;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__28213 = state_28145;
                state_28145 = G__28213;
                continue;
              } else {
                return ret_value__6138__auto__;
              }
              break;
            }
          };
          state_machine__6137__auto__ = function(state_28145) {
            switch(arguments.length) {
              case 0:
                return state_machine__6137__auto____0.call(this);
              case 1:
                return state_machine__6137__auto____1.call(this, state_28145);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
          state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
          return state_machine__6137__auto__;
        }();
      }(switch__6136__auto__);
    }();
    var state__6153__auto__ = function() {
      var statearr_28187 = f__6152__auto__.call(null);
      statearr_28187[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto__;
      return statearr_28187;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
  });
  return c__6151__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___28310 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_28285) {
          var state_val_28286 = state_28285[1];
          if (state_val_28286 === 1) {
            var inst_28262 = null;
            var state_28285__$1 = function() {
              var statearr_28287 = state_28285;
              statearr_28287[7] = inst_28262;
              return statearr_28287;
            }();
            var statearr_28288_28311 = state_28285__$1;
            statearr_28288_28311[2] = null;
            statearr_28288_28311[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_28286 === 2) {
              var state_28285__$1 = state_28285;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28285__$1, 4, ch);
            } else {
              if (state_val_28286 === 3) {
                var inst_28282 = state_28285[2];
                var inst_28283 = cljs.core.async.close_BANG_.call(null, out);
                var state_28285__$1 = function() {
                  var statearr_28289 = state_28285;
                  statearr_28289[8] = inst_28282;
                  return statearr_28289;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28285__$1, inst_28283);
              } else {
                if (state_val_28286 === 4) {
                  var inst_28265 = state_28285[9];
                  var inst_28265__$1 = state_28285[2];
                  var inst_28266 = inst_28265__$1 == null;
                  var inst_28267 = cljs.core.not.call(null, inst_28266);
                  var state_28285__$1 = function() {
                    var statearr_28290 = state_28285;
                    statearr_28290[9] = inst_28265__$1;
                    return statearr_28290;
                  }();
                  if (inst_28267) {
                    var statearr_28291_28312 = state_28285__$1;
                    statearr_28291_28312[1] = 5;
                  } else {
                    var statearr_28292_28313 = state_28285__$1;
                    statearr_28292_28313[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_28286 === 5) {
                    var inst_28262 = state_28285[7];
                    var inst_28265 = state_28285[9];
                    var inst_28269 = cljs.core._EQ_.call(null, inst_28265, inst_28262);
                    var state_28285__$1 = state_28285;
                    if (inst_28269) {
                      var statearr_28293_28314 = state_28285__$1;
                      statearr_28293_28314[1] = 8;
                    } else {
                      var statearr_28294_28315 = state_28285__$1;
                      statearr_28294_28315[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_28286 === 6) {
                      var state_28285__$1 = state_28285;
                      var statearr_28296_28316 = state_28285__$1;
                      statearr_28296_28316[2] = null;
                      statearr_28296_28316[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_28286 === 7) {
                        var inst_28280 = state_28285[2];
                        var state_28285__$1 = state_28285;
                        var statearr_28297_28317 = state_28285__$1;
                        statearr_28297_28317[2] = inst_28280;
                        statearr_28297_28317[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_28286 === 8) {
                          var inst_28262 = state_28285[7];
                          var tmp28295 = inst_28262;
                          var inst_28262__$1 = tmp28295;
                          var state_28285__$1 = function() {
                            var statearr_28298 = state_28285;
                            statearr_28298[7] = inst_28262__$1;
                            return statearr_28298;
                          }();
                          var statearr_28299_28318 = state_28285__$1;
                          statearr_28299_28318[2] = null;
                          statearr_28299_28318[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_28286 === 9) {
                            var inst_28265 = state_28285[9];
                            var state_28285__$1 = state_28285;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28285__$1, 11, out, inst_28265);
                          } else {
                            if (state_val_28286 === 10) {
                              var inst_28277 = state_28285[2];
                              var state_28285__$1 = state_28285;
                              var statearr_28300_28319 = state_28285__$1;
                              statearr_28300_28319[2] = inst_28277;
                              statearr_28300_28319[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_28286 === 11) {
                                var inst_28265 = state_28285[9];
                                var inst_28274 = state_28285[2];
                                var inst_28262 = inst_28265;
                                var state_28285__$1 = function() {
                                  var statearr_28301 = state_28285;
                                  statearr_28301[7] = inst_28262;
                                  statearr_28301[10] = inst_28274;
                                  return statearr_28301;
                                }();
                                var statearr_28302_28320 = state_28285__$1;
                                statearr_28302_28320[2] = null;
                                statearr_28302_28320[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_28306 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_28306[0] = state_machine__6137__auto__;
              statearr_28306[1] = 1;
              return statearr_28306;
            };
            var state_machine__6137__auto____1 = function(state_28285) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_28285);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e28307) {
                    if (e28307 instanceof Object) {
                      var ex__6140__auto__ = e28307;
                      var statearr_28308_28321 = state_28285;
                      statearr_28308_28321[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28285);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e28307;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__28322 = state_28285;
                  state_28285 = G__28322;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_28285) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_28285);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_28309 = f__6152__auto__.call(null);
        statearr_28309[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___28310;
        return statearr_28309;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___28457 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_28427) {
          var state_val_28428 = state_28427[1];
          if (state_val_28428 === 1) {
            var inst_28390 = new Array(n);
            var inst_28391 = inst_28390;
            var inst_28392 = 0;
            var state_28427__$1 = function() {
              var statearr_28429 = state_28427;
              statearr_28429[7] = inst_28391;
              statearr_28429[8] = inst_28392;
              return statearr_28429;
            }();
            var statearr_28430_28458 = state_28427__$1;
            statearr_28430_28458[2] = null;
            statearr_28430_28458[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_28428 === 2) {
              var state_28427__$1 = state_28427;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28427__$1, 4, ch);
            } else {
              if (state_val_28428 === 3) {
                var inst_28425 = state_28427[2];
                var state_28427__$1 = state_28427;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28427__$1, inst_28425);
              } else {
                if (state_val_28428 === 4) {
                  var inst_28395 = state_28427[9];
                  var inst_28395__$1 = state_28427[2];
                  var inst_28396 = inst_28395__$1 == null;
                  var inst_28397 = cljs.core.not.call(null, inst_28396);
                  var state_28427__$1 = function() {
                    var statearr_28431 = state_28427;
                    statearr_28431[9] = inst_28395__$1;
                    return statearr_28431;
                  }();
                  if (inst_28397) {
                    var statearr_28432_28459 = state_28427__$1;
                    statearr_28432_28459[1] = 5;
                  } else {
                    var statearr_28433_28460 = state_28427__$1;
                    statearr_28433_28460[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_28428 === 5) {
                    var inst_28391 = state_28427[7];
                    var inst_28392 = state_28427[8];
                    var inst_28400 = state_28427[10];
                    var inst_28395 = state_28427[9];
                    var inst_28399 = inst_28391[inst_28392] = inst_28395;
                    var inst_28400__$1 = inst_28392 + 1;
                    var inst_28401 = inst_28400__$1 < n;
                    var state_28427__$1 = function() {
                      var statearr_28434 = state_28427;
                      statearr_28434[10] = inst_28400__$1;
                      statearr_28434[11] = inst_28399;
                      return statearr_28434;
                    }();
                    if (cljs.core.truth_(inst_28401)) {
                      var statearr_28435_28461 = state_28427__$1;
                      statearr_28435_28461[1] = 8;
                    } else {
                      var statearr_28436_28462 = state_28427__$1;
                      statearr_28436_28462[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_28428 === 6) {
                      var inst_28392 = state_28427[8];
                      var inst_28413 = inst_28392 > 0;
                      var state_28427__$1 = state_28427;
                      if (cljs.core.truth_(inst_28413)) {
                        var statearr_28438_28463 = state_28427__$1;
                        statearr_28438_28463[1] = 12;
                      } else {
                        var statearr_28439_28464 = state_28427__$1;
                        statearr_28439_28464[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_28428 === 7) {
                        var inst_28423 = state_28427[2];
                        var state_28427__$1 = state_28427;
                        var statearr_28440_28465 = state_28427__$1;
                        statearr_28440_28465[2] = inst_28423;
                        statearr_28440_28465[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_28428 === 8) {
                          var inst_28391 = state_28427[7];
                          var inst_28400 = state_28427[10];
                          var tmp28437 = inst_28391;
                          var inst_28391__$1 = tmp28437;
                          var inst_28392 = inst_28400;
                          var state_28427__$1 = function() {
                            var statearr_28441 = state_28427;
                            statearr_28441[7] = inst_28391__$1;
                            statearr_28441[8] = inst_28392;
                            return statearr_28441;
                          }();
                          var statearr_28442_28466 = state_28427__$1;
                          statearr_28442_28466[2] = null;
                          statearr_28442_28466[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_28428 === 9) {
                            var inst_28391 = state_28427[7];
                            var inst_28405 = cljs.core.vec.call(null, inst_28391);
                            var state_28427__$1 = state_28427;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28427__$1, 11, out, inst_28405);
                          } else {
                            if (state_val_28428 === 10) {
                              var inst_28411 = state_28427[2];
                              var state_28427__$1 = state_28427;
                              var statearr_28443_28467 = state_28427__$1;
                              statearr_28443_28467[2] = inst_28411;
                              statearr_28443_28467[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_28428 === 11) {
                                var inst_28407 = state_28427[2];
                                var inst_28408 = new Array(n);
                                var inst_28391 = inst_28408;
                                var inst_28392 = 0;
                                var state_28427__$1 = function() {
                                  var statearr_28444 = state_28427;
                                  statearr_28444[7] = inst_28391;
                                  statearr_28444[8] = inst_28392;
                                  statearr_28444[12] = inst_28407;
                                  return statearr_28444;
                                }();
                                var statearr_28445_28468 = state_28427__$1;
                                statearr_28445_28468[2] = null;
                                statearr_28445_28468[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_28428 === 12) {
                                  var inst_28391 = state_28427[7];
                                  var inst_28415 = cljs.core.vec.call(null, inst_28391);
                                  var state_28427__$1 = state_28427;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28427__$1, 15, out, inst_28415);
                                } else {
                                  if (state_val_28428 === 13) {
                                    var state_28427__$1 = state_28427;
                                    var statearr_28446_28469 = state_28427__$1;
                                    statearr_28446_28469[2] = null;
                                    statearr_28446_28469[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_28428 === 14) {
                                      var inst_28420 = state_28427[2];
                                      var inst_28421 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_28427__$1 = function() {
                                        var statearr_28447 = state_28427;
                                        statearr_28447[13] = inst_28420;
                                        return statearr_28447;
                                      }();
                                      var statearr_28448_28470 = state_28427__$1;
                                      statearr_28448_28470[2] = inst_28421;
                                      statearr_28448_28470[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_28428 === 15) {
                                        var inst_28417 = state_28427[2];
                                        var state_28427__$1 = state_28427;
                                        var statearr_28449_28471 = state_28427__$1;
                                        statearr_28449_28471[2] = inst_28417;
                                        statearr_28449_28471[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_28453 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_28453[0] = state_machine__6137__auto__;
              statearr_28453[1] = 1;
              return statearr_28453;
            };
            var state_machine__6137__auto____1 = function(state_28427) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_28427);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e28454) {
                    if (e28454 instanceof Object) {
                      var ex__6140__auto__ = e28454;
                      var statearr_28455_28472 = state_28427;
                      statearr_28455_28472[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28427);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e28454;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__28473 = state_28427;
                  state_28427 = G__28473;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_28427) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_28427);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_28456 = f__6152__auto__.call(null);
        statearr_28456[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___28457;
        return statearr_28456;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6151__auto___28616 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__6152__auto__ = function() {
        var switch__6136__auto__ = function(state_28586) {
          var state_val_28587 = state_28586[1];
          if (state_val_28587 === 1) {
            var inst_28545 = [];
            var inst_28546 = inst_28545;
            var inst_28547 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_28586__$1 = function() {
              var statearr_28588 = state_28586;
              statearr_28588[7] = inst_28547;
              statearr_28588[8] = inst_28546;
              return statearr_28588;
            }();
            var statearr_28589_28617 = state_28586__$1;
            statearr_28589_28617[2] = null;
            statearr_28589_28617[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_28587 === 2) {
              var state_28586__$1 = state_28586;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28586__$1, 4, ch);
            } else {
              if (state_val_28587 === 3) {
                var inst_28584 = state_28586[2];
                var state_28586__$1 = state_28586;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28586__$1, inst_28584);
              } else {
                if (state_val_28587 === 4) {
                  var inst_28550 = state_28586[9];
                  var inst_28550__$1 = state_28586[2];
                  var inst_28551 = inst_28550__$1 == null;
                  var inst_28552 = cljs.core.not.call(null, inst_28551);
                  var state_28586__$1 = function() {
                    var statearr_28590 = state_28586;
                    statearr_28590[9] = inst_28550__$1;
                    return statearr_28590;
                  }();
                  if (inst_28552) {
                    var statearr_28591_28618 = state_28586__$1;
                    statearr_28591_28618[1] = 5;
                  } else {
                    var statearr_28592_28619 = state_28586__$1;
                    statearr_28592_28619[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_28587 === 5) {
                    var inst_28554 = state_28586[10];
                    var inst_28550 = state_28586[9];
                    var inst_28547 = state_28586[7];
                    var inst_28554__$1 = f.call(null, inst_28550);
                    var inst_28555 = cljs.core._EQ_.call(null, inst_28554__$1, inst_28547);
                    var inst_28556 = cljs.core.keyword_identical_QMARK_.call(null, inst_28547, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_28557 = inst_28555 || inst_28556;
                    var state_28586__$1 = function() {
                      var statearr_28593 = state_28586;
                      statearr_28593[10] = inst_28554__$1;
                      return statearr_28593;
                    }();
                    if (cljs.core.truth_(inst_28557)) {
                      var statearr_28594_28620 = state_28586__$1;
                      statearr_28594_28620[1] = 8;
                    } else {
                      var statearr_28595_28621 = state_28586__$1;
                      statearr_28595_28621[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_28587 === 6) {
                      var inst_28546 = state_28586[8];
                      var inst_28571 = inst_28546.length;
                      var inst_28572 = inst_28571 > 0;
                      var state_28586__$1 = state_28586;
                      if (cljs.core.truth_(inst_28572)) {
                        var statearr_28597_28622 = state_28586__$1;
                        statearr_28597_28622[1] = 12;
                      } else {
                        var statearr_28598_28623 = state_28586__$1;
                        statearr_28598_28623[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_28587 === 7) {
                        var inst_28582 = state_28586[2];
                        var state_28586__$1 = state_28586;
                        var statearr_28599_28624 = state_28586__$1;
                        statearr_28599_28624[2] = inst_28582;
                        statearr_28599_28624[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_28587 === 8) {
                          var inst_28554 = state_28586[10];
                          var inst_28550 = state_28586[9];
                          var inst_28546 = state_28586[8];
                          var inst_28559 = inst_28546.push(inst_28550);
                          var tmp28596 = inst_28546;
                          var inst_28546__$1 = tmp28596;
                          var inst_28547 = inst_28554;
                          var state_28586__$1 = function() {
                            var statearr_28600 = state_28586;
                            statearr_28600[11] = inst_28559;
                            statearr_28600[7] = inst_28547;
                            statearr_28600[8] = inst_28546__$1;
                            return statearr_28600;
                          }();
                          var statearr_28601_28625 = state_28586__$1;
                          statearr_28601_28625[2] = null;
                          statearr_28601_28625[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_28587 === 9) {
                            var inst_28546 = state_28586[8];
                            var inst_28562 = cljs.core.vec.call(null, inst_28546);
                            var state_28586__$1 = state_28586;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28586__$1, 11, out, inst_28562);
                          } else {
                            if (state_val_28587 === 10) {
                              var inst_28569 = state_28586[2];
                              var state_28586__$1 = state_28586;
                              var statearr_28602_28626 = state_28586__$1;
                              statearr_28602_28626[2] = inst_28569;
                              statearr_28602_28626[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_28587 === 11) {
                                var inst_28554 = state_28586[10];
                                var inst_28550 = state_28586[9];
                                var inst_28564 = state_28586[2];
                                var inst_28565 = [];
                                var inst_28566 = inst_28565.push(inst_28550);
                                var inst_28546 = inst_28565;
                                var inst_28547 = inst_28554;
                                var state_28586__$1 = function() {
                                  var statearr_28603 = state_28586;
                                  statearr_28603[12] = inst_28566;
                                  statearr_28603[13] = inst_28564;
                                  statearr_28603[7] = inst_28547;
                                  statearr_28603[8] = inst_28546;
                                  return statearr_28603;
                                }();
                                var statearr_28604_28627 = state_28586__$1;
                                statearr_28604_28627[2] = null;
                                statearr_28604_28627[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_28587 === 12) {
                                  var inst_28546 = state_28586[8];
                                  var inst_28574 = cljs.core.vec.call(null, inst_28546);
                                  var state_28586__$1 = state_28586;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28586__$1, 15, out, inst_28574);
                                } else {
                                  if (state_val_28587 === 13) {
                                    var state_28586__$1 = state_28586;
                                    var statearr_28605_28628 = state_28586__$1;
                                    statearr_28605_28628[2] = null;
                                    statearr_28605_28628[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_28587 === 14) {
                                      var inst_28579 = state_28586[2];
                                      var inst_28580 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_28586__$1 = function() {
                                        var statearr_28606 = state_28586;
                                        statearr_28606[14] = inst_28579;
                                        return statearr_28606;
                                      }();
                                      var statearr_28607_28629 = state_28586__$1;
                                      statearr_28607_28629[2] = inst_28580;
                                      statearr_28607_28629[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_28587 === 15) {
                                        var inst_28576 = state_28586[2];
                                        var state_28586__$1 = state_28586;
                                        var statearr_28608_28630 = state_28586__$1;
                                        statearr_28608_28630[2] = inst_28576;
                                        statearr_28608_28630[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__6136__auto__) {
          return function() {
            var state_machine__6137__auto__ = null;
            var state_machine__6137__auto____0 = function() {
              var statearr_28612 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_28612[0] = state_machine__6137__auto__;
              statearr_28612[1] = 1;
              return statearr_28612;
            };
            var state_machine__6137__auto____1 = function(state_28586) {
              while (true) {
                var ret_value__6138__auto__ = function() {
                  try {
                    while (true) {
                      var result__6139__auto__ = switch__6136__auto__.call(null, state_28586);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6139__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6139__auto__;
                      }
                      break;
                    }
                  } catch (e28613) {
                    if (e28613 instanceof Object) {
                      var ex__6140__auto__ = e28613;
                      var statearr_28614_28631 = state_28586;
                      statearr_28614_28631[5] = ex__6140__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28586);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e28613;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6138__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__28632 = state_28586;
                  state_28586 = G__28632;
                  continue;
                } else {
                  return ret_value__6138__auto__;
                }
                break;
              }
            };
            state_machine__6137__auto__ = function(state_28586) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6137__auto____0.call(this);
                case 1:
                  return state_machine__6137__auto____1.call(this, state_28586);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6137__auto____0;
            state_machine__6137__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6137__auto____1;
            return state_machine__6137__auto__;
          }();
        }(switch__6136__auto__);
      }();
      var state__6153__auto__ = function() {
        var statearr_28615 = f__6152__auto__.call(null);
        statearr_28615[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6151__auto___28616;
        return statearr_28615;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6153__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj29154 = {};
  return obj29154;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3437__auto__ = this$;
    if (and__3437__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3437__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4076__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3449__auto__ = dommy.template._elem[goog.typeOf(x__4076__auto__)];
      if (or__3449__auto__) {
        return or__3449__auto__;
      } else {
        var or__3449__auto____$1 = dommy.template._elem["_"];
        if (or__3449__auto____$1) {
          return or__3449__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", 1017020587) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_29157 = node_str.substring(base_idx);
    while (true) {
      var next_idx_29158 = dommy.template.next_css_index.call(null, str_29157, 1);
      var frag_29159 = next_idx_29158 >= 0 ? str_29157.substring(0, next_idx_29158) : str_29157;
      var G__29156_29160 = frag_29159.charAt(0);
      if (cljs.core._EQ_.call(null, "#", G__29156_29160)) {
        node.setAttribute("id", frag_29159.substring(1));
      } else {
        if (cljs.core._EQ_.call(null, ".", G__29156_29160)) {
          dommy.attrs.add_class_BANG_.call(null, node, frag_29159.substring(1));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(frag_29159.charAt(0))].join(""));
          } else {
          }
        }
      }
      if (next_idx_29158 >= 0) {
        var G__29161 = str_29157.substring(next_idx_29158);
        str_29157 = G__29161;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw[cljs.core.str("Don't know how to make node from: "), cljs.core.str(cljs.core.pr_str.call(null, node_data))].join("");
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__29167 = data;
      if (G__29167) {
        var bit__4099__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3449__auto__ = bit__4099__auto__;
          if (cljs.core.truth_(or__3449__auto__)) {
            return or__3449__auto__;
          } else {
            return G__29167.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__29167.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29167);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29167);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__29168_29172 = cljs.core.seq.call(null, data);
        var chunk__29169_29173 = null;
        var count__29170_29174 = 0;
        var i__29171_29175 = 0;
        while (true) {
          if (i__29171_29175 < count__29170_29174) {
            var child_29176 = cljs.core._nth.call(null, chunk__29169_29173, i__29171_29175);
            __GT_document_fragment.call(null, result_frag, child_29176);
            var G__29177 = seq__29168_29172;
            var G__29178 = chunk__29169_29173;
            var G__29179 = count__29170_29174;
            var G__29180 = i__29171_29175 + 1;
            seq__29168_29172 = G__29177;
            chunk__29169_29173 = G__29178;
            count__29170_29174 = G__29179;
            i__29171_29175 = G__29180;
            continue;
          } else {
            var temp__4092__auto___29181 = cljs.core.seq.call(null, seq__29168_29172);
            if (temp__4092__auto___29181) {
              var seq__29168_29182__$1 = temp__4092__auto___29181;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__29168_29182__$1)) {
                var c__4197__auto___29183 = cljs.core.chunk_first.call(null, seq__29168_29182__$1);
                var G__29184 = cljs.core.chunk_rest.call(null, seq__29168_29182__$1);
                var G__29185 = c__4197__auto___29183;
                var G__29186 = cljs.core.count.call(null, c__4197__auto___29183);
                var G__29187 = 0;
                seq__29168_29172 = G__29184;
                chunk__29169_29173 = G__29185;
                count__29170_29174 = G__29186;
                i__29171_29175 = G__29187;
                continue;
              } else {
                var child_29188 = cljs.core.first.call(null, seq__29168_29182__$1);
                __GT_document_fragment.call(null, result_frag, child_29188);
                var G__29189 = cljs.core.next.call(null, seq__29168_29182__$1);
                var G__29190 = null;
                var G__29191 = 0;
                var G__29192 = 0;
                seq__29168_29172 = G__29189;
                chunk__29169_29173 = G__29190;
                count__29170_29174 = G__29191;
                i__29171_29175 = G__29192;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__29194 = data;
    if (G__29194) {
      var bit__4099__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3449__auto__ = bit__4099__auto__;
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return G__29194.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__29194.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29194);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29194);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__29195) {
  var vec__29215 = p__29195;
  var tag_name = cljs.core.nth.call(null, vec__29215, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__29215, 1, null);
  var children = cljs.core.nthnext.call(null, vec__29215, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__29217 = maybe_attrs;
    if (G__29217) {
      var bit__4099__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3449__auto__ = bit__4099__auto__;
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return G__29217.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__29217.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29217);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29217);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__29218_29234 = cljs.core.seq.call(null, attrs);
  var chunk__29219_29235 = null;
  var count__29220_29236 = 0;
  var i__29221_29237 = 0;
  while (true) {
    if (i__29221_29237 < count__29220_29236) {
      var vec__29222_29238 = cljs.core._nth.call(null, chunk__29219_29235, i__29221_29237);
      var k_29239 = cljs.core.nth.call(null, vec__29222_29238, 0, null);
      var v_29240 = cljs.core.nth.call(null, vec__29222_29238, 1, null);
      var G__29223_29241 = k_29239;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__29223_29241)) {
        var seq__29224_29242 = cljs.core.seq.call(null, v_29240);
        var chunk__29225_29243 = null;
        var count__29226_29244 = 0;
        var i__29227_29245 = 0;
        while (true) {
          if (i__29227_29245 < count__29226_29244) {
            var c_29246 = cljs.core._nth.call(null, chunk__29225_29243, i__29227_29245);
            dommy.attrs.add_class_BANG_.call(null, n, c_29246);
            var G__29247 = seq__29224_29242;
            var G__29248 = chunk__29225_29243;
            var G__29249 = count__29226_29244;
            var G__29250 = i__29227_29245 + 1;
            seq__29224_29242 = G__29247;
            chunk__29225_29243 = G__29248;
            count__29226_29244 = G__29249;
            i__29227_29245 = G__29250;
            continue;
          } else {
            var temp__4092__auto___29251 = cljs.core.seq.call(null, seq__29224_29242);
            if (temp__4092__auto___29251) {
              var seq__29224_29252__$1 = temp__4092__auto___29251;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__29224_29252__$1)) {
                var c__4197__auto___29253 = cljs.core.chunk_first.call(null, seq__29224_29252__$1);
                var G__29254 = cljs.core.chunk_rest.call(null, seq__29224_29252__$1);
                var G__29255 = c__4197__auto___29253;
                var G__29256 = cljs.core.count.call(null, c__4197__auto___29253);
                var G__29257 = 0;
                seq__29224_29242 = G__29254;
                chunk__29225_29243 = G__29255;
                count__29226_29244 = G__29256;
                i__29227_29245 = G__29257;
                continue;
              } else {
                var c_29258 = cljs.core.first.call(null, seq__29224_29252__$1);
                dommy.attrs.add_class_BANG_.call(null, n, c_29258);
                var G__29259 = cljs.core.next.call(null, seq__29224_29252__$1);
                var G__29260 = null;
                var G__29261 = 0;
                var G__29262 = 0;
                seq__29224_29242 = G__29259;
                chunk__29225_29243 = G__29260;
                count__29226_29244 = G__29261;
                i__29227_29245 = G__29262;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__29223_29241)) {
          dommy.attrs.add_class_BANG_.call(null, n, v_29240);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            dommy.attrs.set_attr_BANG_.call(null, n, k_29239, v_29240);
          } else {
          }
        }
      }
      var G__29263 = seq__29218_29234;
      var G__29264 = chunk__29219_29235;
      var G__29265 = count__29220_29236;
      var G__29266 = i__29221_29237 + 1;
      seq__29218_29234 = G__29263;
      chunk__29219_29235 = G__29264;
      count__29220_29236 = G__29265;
      i__29221_29237 = G__29266;
      continue;
    } else {
      var temp__4092__auto___29267 = cljs.core.seq.call(null, seq__29218_29234);
      if (temp__4092__auto___29267) {
        var seq__29218_29268__$1 = temp__4092__auto___29267;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29218_29268__$1)) {
          var c__4197__auto___29269 = cljs.core.chunk_first.call(null, seq__29218_29268__$1);
          var G__29270 = cljs.core.chunk_rest.call(null, seq__29218_29268__$1);
          var G__29271 = c__4197__auto___29269;
          var G__29272 = cljs.core.count.call(null, c__4197__auto___29269);
          var G__29273 = 0;
          seq__29218_29234 = G__29270;
          chunk__29219_29235 = G__29271;
          count__29220_29236 = G__29272;
          i__29221_29237 = G__29273;
          continue;
        } else {
          var vec__29228_29274 = cljs.core.first.call(null, seq__29218_29268__$1);
          var k_29275 = cljs.core.nth.call(null, vec__29228_29274, 0, null);
          var v_29276 = cljs.core.nth.call(null, vec__29228_29274, 1, null);
          var G__29229_29277 = k_29275;
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__29229_29277)) {
            var seq__29230_29278 = cljs.core.seq.call(null, v_29276);
            var chunk__29231_29279 = null;
            var count__29232_29280 = 0;
            var i__29233_29281 = 0;
            while (true) {
              if (i__29233_29281 < count__29232_29280) {
                var c_29282 = cljs.core._nth.call(null, chunk__29231_29279, i__29233_29281);
                dommy.attrs.add_class_BANG_.call(null, n, c_29282);
                var G__29283 = seq__29230_29278;
                var G__29284 = chunk__29231_29279;
                var G__29285 = count__29232_29280;
                var G__29286 = i__29233_29281 + 1;
                seq__29230_29278 = G__29283;
                chunk__29231_29279 = G__29284;
                count__29232_29280 = G__29285;
                i__29233_29281 = G__29286;
                continue;
              } else {
                var temp__4092__auto___29287__$1 = cljs.core.seq.call(null, seq__29230_29278);
                if (temp__4092__auto___29287__$1) {
                  var seq__29230_29288__$1 = temp__4092__auto___29287__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__29230_29288__$1)) {
                    var c__4197__auto___29289 = cljs.core.chunk_first.call(null, seq__29230_29288__$1);
                    var G__29290 = cljs.core.chunk_rest.call(null, seq__29230_29288__$1);
                    var G__29291 = c__4197__auto___29289;
                    var G__29292 = cljs.core.count.call(null, c__4197__auto___29289);
                    var G__29293 = 0;
                    seq__29230_29278 = G__29290;
                    chunk__29231_29279 = G__29291;
                    count__29232_29280 = G__29292;
                    i__29233_29281 = G__29293;
                    continue;
                  } else {
                    var c_29294 = cljs.core.first.call(null, seq__29230_29288__$1);
                    dommy.attrs.add_class_BANG_.call(null, n, c_29294);
                    var G__29295 = cljs.core.next.call(null, seq__29230_29288__$1);
                    var G__29296 = null;
                    var G__29297 = 0;
                    var G__29298 = 0;
                    seq__29230_29278 = G__29295;
                    chunk__29231_29279 = G__29296;
                    count__29232_29280 = G__29297;
                    i__29233_29281 = G__29298;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__29229_29277)) {
              dommy.attrs.add_class_BANG_.call(null, n, v_29276);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                dommy.attrs.set_attr_BANG_.call(null, n, k_29275, v_29276);
              } else {
              }
            }
          }
          var G__29299 = cljs.core.next.call(null, seq__29218_29268__$1);
          var G__29300 = null;
          var G__29301 = 0;
          var G__29302 = 0;
          seq__29218_29234 = G__29299;
          chunk__29219_29235 = G__29300;
          count__29220_29236 = G__29301;
          i__29221_29237 = G__29302;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode([cljs.core.str(this$)].join(""));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode([cljs.core.str(this$)].join(""));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e29303) {
  if (e29303 instanceof ReferenceError) {
    var __29304 = e29303;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      throw e29303;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__29306 = data;
    if (G__29306) {
      var bit__4099__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3449__auto__ = bit__4099__auto__;
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return G__29306.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__29306.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29306);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__29306);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__29150) {
  var vec__29152 = p__29150;
  var k = cljs.core.nth.call(null, vec__29152, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__29152, 1);
  if (cljs.core.truth_(m)) {
    var temp__4090__auto__ = function() {
      var and__3437__auto__ = ks;
      if (and__3437__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3437__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3449__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__28760 = dommy.template.__GT_node_like.call(null, parent);
    G__28760.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__28760;
  };
  var append_BANG___3 = function() {
    var G__28765__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__28761_28766 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__28762_28767 = null;
      var count__28763_28768 = 0;
      var i__28764_28769 = 0;
      while (true) {
        if (i__28764_28769 < count__28763_28768) {
          var c_28770 = cljs.core._nth.call(null, chunk__28762_28767, i__28764_28769);
          append_BANG_.call(null, parent__$1, c_28770);
          var G__28771 = seq__28761_28766;
          var G__28772 = chunk__28762_28767;
          var G__28773 = count__28763_28768;
          var G__28774 = i__28764_28769 + 1;
          seq__28761_28766 = G__28771;
          chunk__28762_28767 = G__28772;
          count__28763_28768 = G__28773;
          i__28764_28769 = G__28774;
          continue;
        } else {
          var temp__4092__auto___28775 = cljs.core.seq.call(null, seq__28761_28766);
          if (temp__4092__auto___28775) {
            var seq__28761_28776__$1 = temp__4092__auto___28775;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__28761_28776__$1)) {
              var c__4197__auto___28777 = cljs.core.chunk_first.call(null, seq__28761_28776__$1);
              var G__28778 = cljs.core.chunk_rest.call(null, seq__28761_28776__$1);
              var G__28779 = c__4197__auto___28777;
              var G__28780 = cljs.core.count.call(null, c__4197__auto___28777);
              var G__28781 = 0;
              seq__28761_28766 = G__28778;
              chunk__28762_28767 = G__28779;
              count__28763_28768 = G__28780;
              i__28764_28769 = G__28781;
              continue;
            } else {
              var c_28782 = cljs.core.first.call(null, seq__28761_28776__$1);
              append_BANG_.call(null, parent__$1, c_28782);
              var G__28783 = cljs.core.next.call(null, seq__28761_28776__$1);
              var G__28784 = null;
              var G__28785 = 0;
              var G__28786 = 0;
              seq__28761_28766 = G__28783;
              chunk__28762_28767 = G__28784;
              count__28763_28768 = G__28785;
              i__28764_28769 = G__28786;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__28765 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__28765__delegate.call(this, parent, child, more_children);
    };
    G__28765.cljs$lang$maxFixedArity = 2;
    G__28765.cljs$lang$applyTo = function(arglist__28787) {
      var parent = cljs.core.first(arglist__28787);
      arglist__28787 = cljs.core.next(arglist__28787);
      var child = cljs.core.first(arglist__28787);
      var more_children = cljs.core.rest(arglist__28787);
      return G__28765__delegate(parent, child, more_children);
    };
    G__28765.cljs$core$IFn$_invoke$arity$variadic = G__28765__delegate;
    return G__28765;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__28796__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__28792_28797 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__28793_28798 = null;
      var count__28794_28799 = 0;
      var i__28795_28800 = 0;
      while (true) {
        if (i__28795_28800 < count__28794_28799) {
          var c_28801 = cljs.core._nth.call(null, chunk__28793_28798, i__28795_28800);
          prepend_BANG_.call(null, parent__$1, c_28801);
          var G__28802 = seq__28792_28797;
          var G__28803 = chunk__28793_28798;
          var G__28804 = count__28794_28799;
          var G__28805 = i__28795_28800 + 1;
          seq__28792_28797 = G__28802;
          chunk__28793_28798 = G__28803;
          count__28794_28799 = G__28804;
          i__28795_28800 = G__28805;
          continue;
        } else {
          var temp__4092__auto___28806 = cljs.core.seq.call(null, seq__28792_28797);
          if (temp__4092__auto___28806) {
            var seq__28792_28807__$1 = temp__4092__auto___28806;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__28792_28807__$1)) {
              var c__4197__auto___28808 = cljs.core.chunk_first.call(null, seq__28792_28807__$1);
              var G__28809 = cljs.core.chunk_rest.call(null, seq__28792_28807__$1);
              var G__28810 = c__4197__auto___28808;
              var G__28811 = cljs.core.count.call(null, c__4197__auto___28808);
              var G__28812 = 0;
              seq__28792_28797 = G__28809;
              chunk__28793_28798 = G__28810;
              count__28794_28799 = G__28811;
              i__28795_28800 = G__28812;
              continue;
            } else {
              var c_28813 = cljs.core.first.call(null, seq__28792_28807__$1);
              prepend_BANG_.call(null, parent__$1, c_28813);
              var G__28814 = cljs.core.next.call(null, seq__28792_28807__$1);
              var G__28815 = null;
              var G__28816 = 0;
              var G__28817 = 0;
              seq__28792_28797 = G__28814;
              chunk__28793_28798 = G__28815;
              count__28794_28799 = G__28816;
              i__28795_28800 = G__28817;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__28796 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__28796__delegate.call(this, parent, child, more_children);
    };
    G__28796.cljs$lang$maxFixedArity = 2;
    G__28796.cljs$lang$applyTo = function(arglist__28818) {
      var parent = cljs.core.first(arglist__28818);
      arglist__28818 = cljs.core.next(arglist__28818);
      var child = cljs.core.first(arglist__28818);
      var more_children = cljs.core.rest(arglist__28818);
      return G__28796__delegate(parent, child, more_children);
    };
    G__28796.cljs$core$IFn$_invoke$arity$variadic = G__28796__delegate;
    return G__28796;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "other", "other", -1534461751, null))))].join(""));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4090__auto___28819 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4090__auto___28819)) {
    var next_28820 = temp__4090__auto___28819;
    parent.insertBefore(actual_node, next_28820);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "elem", "elem", -1637415608, null))))].join(""));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__28822 = dommy.template.__GT_node_like.call(null, parent);
  G__28822.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__28822, node_like);
  return G__28822;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__28824 = elem__$1.parentNode;
  G__28824.removeChild(elem__$1);
  return G__28824;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", 602947571))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -2051487815, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 19054414, null), new cljs.core.Keyword(null, "container", "container", 602947571)))))].join(""));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", 602947571), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__28830) {
    var vec__28831 = p__28830;
    var k = cljs.core.nth.call(null, vec__28831, 0, null);
    var v = cljs.core.nth.call(null, vec__28831, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", 1017226334)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
      if (typeof dommy.core.t28832 !== "undefined") {
      } else {
        dommy.core.t28832 = function(v, k, vec__28831, p__28830, container, key_selectors_map, template, selector_map, meta28833) {
          this.v = v;
          this.k = k;
          this.vec__28831 = vec__28831;
          this.p__28830 = p__28830;
          this.container = container;
          this.key_selectors_map = key_selectors_map;
          this.template = template;
          this.selector_map = selector_map;
          this.meta28833 = meta28833;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 425984;
        };
        dommy.core.t28832.cljs$lang$type = true;
        dommy.core.t28832.cljs$lang$ctorStr = "dommy.core/t28832";
        dommy.core.t28832.cljs$lang$ctorPrWriter = function(this__4016__auto__, writer__4017__auto__, opt__4018__auto__) {
          return cljs.core._write.call(null, writer__4017__auto__, "dommy.core/t28832");
        };
        dommy.core.t28832.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
          var self__ = this;
          var this$__$1 = this;
          return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
        };
        dommy.core.t28832.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28834) {
          var self__ = this;
          var _28834__$1 = this;
          return self__.meta28833;
        };
        dommy.core.t28832.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28834, meta28833__$1) {
          var self__ = this;
          var _28834__$1 = this;
          return new dommy.core.t28832(self__.v, self__.k, self__.vec__28831, self__.p__28830, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta28833__$1);
        };
        dommy.core.__GT_t28832 = function __GT_t28832(v__$1, k__$1, vec__28831__$1, p__28830__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta28833) {
          return new dommy.core.t28832(v__$1, k__$1, vec__28831__$1, p__28830__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta28833);
        };
      }
      return new dommy.core.t28832(v, k, vec__28831, p__28830, container, key_selectors_map, template, selector_map, null);
    }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
  }, key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__28835_SHARP_) {
    return p1__28835_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(elem) {
      return matches.indexOf(elem) >= 0;
    };
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(p1__28836_SHARP_) {
      return!(p1__28836_SHARP_ === base__$1);
    }, dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__28837) {
  var vec__28838 = p__28837;
  var special_mouse_event = cljs.core.nth.call(null, vec__28838, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__28838, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(f) {
    return function(event) {
      var related_target = event.relatedTarget;
      var listener_target = function() {
        var or__3449__auto__ = event.selectedTarget;
        if (cljs.core.truth_(or__3449__auto__)) {
          return or__3449__auto__;
        } else {
          return event.currentTarget;
        }
      }();
      if (cljs.core.truth_(function() {
        var and__3437__auto__ = related_target;
        if (cljs.core.truth_(and__3437__auto__)) {
          return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
        } else {
          return and__3437__auto__;
        }
      }())) {
        return null;
      } else {
        return f.call(null, event);
      }
    };
  }], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", 2027084997), new cljs.core.Keyword(null, "mouseover", "mouseover", 1601081963), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 2033263780), new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3437__auto__ = selected_target;
      if (cljs.core.truth_(and__3437__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", 1284845038)));
      } else {
        return and__3437__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3449__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3449__auto__)) {
    return or__3449__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__28839) {
    var elem = cljs.core.first(arglist__28839);
    arglist__28839 = cljs.core.next(arglist__28839);
    var f = cljs.core.first(arglist__28839);
    var args = cljs.core.rest(arglist__28839);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__28840_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__28840_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__28864_28887 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_28888 = cljs.core.nth.call(null, vec__28864_28887, 0, null);
    var selector_28889 = cljs.core.nth.call(null, vec__28864_28887, 1, null);
    var seq__28865_28890 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__28872_28891 = null;
    var count__28873_28892 = 0;
    var i__28874_28893 = 0;
    while (true) {
      if (i__28874_28893 < count__28873_28892) {
        var vec__28881_28894 = cljs.core._nth.call(null, chunk__28872_28891, i__28874_28893);
        var orig_type_28895 = cljs.core.nth.call(null, vec__28881_28894, 0, null);
        var f_28896 = cljs.core.nth.call(null, vec__28881_28894, 1, null);
        var seq__28875_28897 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_28895, new cljs.core.PersistentArrayMap.fromArray([orig_type_28895, cljs.core.identity], true, false)));
        var chunk__28877_28898 = null;
        var count__28878_28899 = 0;
        var i__28879_28900 = 0;
        while (true) {
          if (i__28879_28900 < count__28878_28899) {
            var vec__28882_28901 = cljs.core._nth.call(null, chunk__28877_28898, i__28879_28900);
            var actual_type_28902 = cljs.core.nth.call(null, vec__28882_28901, 0, null);
            var factory_28903 = cljs.core.nth.call(null, vec__28882_28901, 1, null);
            var canonical_f_28904 = (cljs.core.truth_(selector_28889) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_28888, selector_28889) : cljs.core.identity).call(null, factory_28903.call(null, f_28896));
            dommy.core.update_event_listeners_BANG_.call(null, elem_28888, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_28889, actual_type_28902, f_28896], null), canonical_f_28904);
            if (cljs.core.truth_(elem_28888.addEventListener)) {
              elem_28888.addEventListener(cljs.core.name.call(null, actual_type_28902), canonical_f_28904);
            } else {
              elem_28888.attachEvent(cljs.core.name.call(null, actual_type_28902), canonical_f_28904);
            }
            var G__28905 = seq__28875_28897;
            var G__28906 = chunk__28877_28898;
            var G__28907 = count__28878_28899;
            var G__28908 = i__28879_28900 + 1;
            seq__28875_28897 = G__28905;
            chunk__28877_28898 = G__28906;
            count__28878_28899 = G__28907;
            i__28879_28900 = G__28908;
            continue;
          } else {
            var temp__4092__auto___28909 = cljs.core.seq.call(null, seq__28875_28897);
            if (temp__4092__auto___28909) {
              var seq__28875_28910__$1 = temp__4092__auto___28909;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__28875_28910__$1)) {
                var c__4197__auto___28911 = cljs.core.chunk_first.call(null, seq__28875_28910__$1);
                var G__28912 = cljs.core.chunk_rest.call(null, seq__28875_28910__$1);
                var G__28913 = c__4197__auto___28911;
                var G__28914 = cljs.core.count.call(null, c__4197__auto___28911);
                var G__28915 = 0;
                seq__28875_28897 = G__28912;
                chunk__28877_28898 = G__28913;
                count__28878_28899 = G__28914;
                i__28879_28900 = G__28915;
                continue;
              } else {
                var vec__28883_28916 = cljs.core.first.call(null, seq__28875_28910__$1);
                var actual_type_28917 = cljs.core.nth.call(null, vec__28883_28916, 0, null);
                var factory_28918 = cljs.core.nth.call(null, vec__28883_28916, 1, null);
                var canonical_f_28919 = (cljs.core.truth_(selector_28889) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_28888, selector_28889) : cljs.core.identity).call(null, factory_28918.call(null, f_28896));
                dommy.core.update_event_listeners_BANG_.call(null, elem_28888, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_28889, actual_type_28917, f_28896], null), canonical_f_28919);
                if (cljs.core.truth_(elem_28888.addEventListener)) {
                  elem_28888.addEventListener(cljs.core.name.call(null, actual_type_28917), canonical_f_28919);
                } else {
                  elem_28888.attachEvent(cljs.core.name.call(null, actual_type_28917), canonical_f_28919);
                }
                var G__28920 = cljs.core.next.call(null, seq__28875_28910__$1);
                var G__28921 = null;
                var G__28922 = 0;
                var G__28923 = 0;
                seq__28875_28897 = G__28920;
                chunk__28877_28898 = G__28921;
                count__28878_28899 = G__28922;
                i__28879_28900 = G__28923;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__28924 = seq__28865_28890;
        var G__28925 = chunk__28872_28891;
        var G__28926 = count__28873_28892;
        var G__28927 = i__28874_28893 + 1;
        seq__28865_28890 = G__28924;
        chunk__28872_28891 = G__28925;
        count__28873_28892 = G__28926;
        i__28874_28893 = G__28927;
        continue;
      } else {
        var temp__4092__auto___28928 = cljs.core.seq.call(null, seq__28865_28890);
        if (temp__4092__auto___28928) {
          var seq__28865_28929__$1 = temp__4092__auto___28928;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28865_28929__$1)) {
            var c__4197__auto___28930 = cljs.core.chunk_first.call(null, seq__28865_28929__$1);
            var G__28931 = cljs.core.chunk_rest.call(null, seq__28865_28929__$1);
            var G__28932 = c__4197__auto___28930;
            var G__28933 = cljs.core.count.call(null, c__4197__auto___28930);
            var G__28934 = 0;
            seq__28865_28890 = G__28931;
            chunk__28872_28891 = G__28932;
            count__28873_28892 = G__28933;
            i__28874_28893 = G__28934;
            continue;
          } else {
            var vec__28884_28935 = cljs.core.first.call(null, seq__28865_28929__$1);
            var orig_type_28936 = cljs.core.nth.call(null, vec__28884_28935, 0, null);
            var f_28937 = cljs.core.nth.call(null, vec__28884_28935, 1, null);
            var seq__28866_28938 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_28936, new cljs.core.PersistentArrayMap.fromArray([orig_type_28936, cljs.core.identity], true, false)));
            var chunk__28868_28939 = null;
            var count__28869_28940 = 0;
            var i__28870_28941 = 0;
            while (true) {
              if (i__28870_28941 < count__28869_28940) {
                var vec__28885_28942 = cljs.core._nth.call(null, chunk__28868_28939, i__28870_28941);
                var actual_type_28943 = cljs.core.nth.call(null, vec__28885_28942, 0, null);
                var factory_28944 = cljs.core.nth.call(null, vec__28885_28942, 1, null);
                var canonical_f_28945 = (cljs.core.truth_(selector_28889) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_28888, selector_28889) : cljs.core.identity).call(null, factory_28944.call(null, f_28937));
                dommy.core.update_event_listeners_BANG_.call(null, elem_28888, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_28889, actual_type_28943, f_28937], null), canonical_f_28945);
                if (cljs.core.truth_(elem_28888.addEventListener)) {
                  elem_28888.addEventListener(cljs.core.name.call(null, actual_type_28943), canonical_f_28945);
                } else {
                  elem_28888.attachEvent(cljs.core.name.call(null, actual_type_28943), canonical_f_28945);
                }
                var G__28946 = seq__28866_28938;
                var G__28947 = chunk__28868_28939;
                var G__28948 = count__28869_28940;
                var G__28949 = i__28870_28941 + 1;
                seq__28866_28938 = G__28946;
                chunk__28868_28939 = G__28947;
                count__28869_28940 = G__28948;
                i__28870_28941 = G__28949;
                continue;
              } else {
                var temp__4092__auto___28950__$1 = cljs.core.seq.call(null, seq__28866_28938);
                if (temp__4092__auto___28950__$1) {
                  var seq__28866_28951__$1 = temp__4092__auto___28950__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__28866_28951__$1)) {
                    var c__4197__auto___28952 = cljs.core.chunk_first.call(null, seq__28866_28951__$1);
                    var G__28953 = cljs.core.chunk_rest.call(null, seq__28866_28951__$1);
                    var G__28954 = c__4197__auto___28952;
                    var G__28955 = cljs.core.count.call(null, c__4197__auto___28952);
                    var G__28956 = 0;
                    seq__28866_28938 = G__28953;
                    chunk__28868_28939 = G__28954;
                    count__28869_28940 = G__28955;
                    i__28870_28941 = G__28956;
                    continue;
                  } else {
                    var vec__28886_28957 = cljs.core.first.call(null, seq__28866_28951__$1);
                    var actual_type_28958 = cljs.core.nth.call(null, vec__28886_28957, 0, null);
                    var factory_28959 = cljs.core.nth.call(null, vec__28886_28957, 1, null);
                    var canonical_f_28960 = (cljs.core.truth_(selector_28889) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_28888, selector_28889) : cljs.core.identity).call(null, factory_28959.call(null, f_28937));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_28888, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_28889, actual_type_28958, f_28937], null), canonical_f_28960);
                    if (cljs.core.truth_(elem_28888.addEventListener)) {
                      elem_28888.addEventListener(cljs.core.name.call(null, actual_type_28958), canonical_f_28960);
                    } else {
                      elem_28888.attachEvent(cljs.core.name.call(null, actual_type_28958), canonical_f_28960);
                    }
                    var G__28961 = cljs.core.next.call(null, seq__28866_28951__$1);
                    var G__28962 = null;
                    var G__28963 = 0;
                    var G__28964 = 0;
                    seq__28866_28938 = G__28961;
                    chunk__28868_28939 = G__28962;
                    count__28869_28940 = G__28963;
                    i__28870_28941 = G__28964;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__28965 = cljs.core.next.call(null, seq__28865_28929__$1);
            var G__28966 = null;
            var G__28967 = 0;
            var G__28968 = 0;
            seq__28865_28890 = G__28965;
            chunk__28872_28891 = G__28966;
            count__28873_28892 = G__28967;
            i__28874_28893 = G__28968;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__28969) {
    var elem_sel = cljs.core.first(arglist__28969);
    var type_fs = cljs.core.rest(arglist__28969);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__28993_29016 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_29017 = cljs.core.nth.call(null, vec__28993_29016, 0, null);
    var selector_29018 = cljs.core.nth.call(null, vec__28993_29016, 1, null);
    var seq__28994_29019 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__29001_29020 = null;
    var count__29002_29021 = 0;
    var i__29003_29022 = 0;
    while (true) {
      if (i__29003_29022 < count__29002_29021) {
        var vec__29010_29023 = cljs.core._nth.call(null, chunk__29001_29020, i__29003_29022);
        var orig_type_29024 = cljs.core.nth.call(null, vec__29010_29023, 0, null);
        var f_29025 = cljs.core.nth.call(null, vec__29010_29023, 1, null);
        var seq__29004_29026 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_29024, new cljs.core.PersistentArrayMap.fromArray([orig_type_29024, cljs.core.identity], true, false)));
        var chunk__29006_29027 = null;
        var count__29007_29028 = 0;
        var i__29008_29029 = 0;
        while (true) {
          if (i__29008_29029 < count__29007_29028) {
            var vec__29011_29030 = cljs.core._nth.call(null, chunk__29006_29027, i__29008_29029);
            var actual_type_29031 = cljs.core.nth.call(null, vec__29011_29030, 0, null);
            var __29032 = cljs.core.nth.call(null, vec__29011_29030, 1, null);
            var keys_29033 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_29018, actual_type_29031, f_29025], null);
            var canonical_f_29034 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_29017), keys_29033);
            dommy.core.update_event_listeners_BANG_.call(null, elem_29017, dommy.utils.dissoc_in, keys_29033);
            if (cljs.core.truth_(elem_29017.removeEventListener)) {
              elem_29017.removeEventListener(cljs.core.name.call(null, actual_type_29031), canonical_f_29034);
            } else {
              elem_29017.detachEvent(cljs.core.name.call(null, actual_type_29031), canonical_f_29034);
            }
            var G__29035 = seq__29004_29026;
            var G__29036 = chunk__29006_29027;
            var G__29037 = count__29007_29028;
            var G__29038 = i__29008_29029 + 1;
            seq__29004_29026 = G__29035;
            chunk__29006_29027 = G__29036;
            count__29007_29028 = G__29037;
            i__29008_29029 = G__29038;
            continue;
          } else {
            var temp__4092__auto___29039 = cljs.core.seq.call(null, seq__29004_29026);
            if (temp__4092__auto___29039) {
              var seq__29004_29040__$1 = temp__4092__auto___29039;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__29004_29040__$1)) {
                var c__4197__auto___29041 = cljs.core.chunk_first.call(null, seq__29004_29040__$1);
                var G__29042 = cljs.core.chunk_rest.call(null, seq__29004_29040__$1);
                var G__29043 = c__4197__auto___29041;
                var G__29044 = cljs.core.count.call(null, c__4197__auto___29041);
                var G__29045 = 0;
                seq__29004_29026 = G__29042;
                chunk__29006_29027 = G__29043;
                count__29007_29028 = G__29044;
                i__29008_29029 = G__29045;
                continue;
              } else {
                var vec__29012_29046 = cljs.core.first.call(null, seq__29004_29040__$1);
                var actual_type_29047 = cljs.core.nth.call(null, vec__29012_29046, 0, null);
                var __29048 = cljs.core.nth.call(null, vec__29012_29046, 1, null);
                var keys_29049 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_29018, actual_type_29047, f_29025], null);
                var canonical_f_29050 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_29017), keys_29049);
                dommy.core.update_event_listeners_BANG_.call(null, elem_29017, dommy.utils.dissoc_in, keys_29049);
                if (cljs.core.truth_(elem_29017.removeEventListener)) {
                  elem_29017.removeEventListener(cljs.core.name.call(null, actual_type_29047), canonical_f_29050);
                } else {
                  elem_29017.detachEvent(cljs.core.name.call(null, actual_type_29047), canonical_f_29050);
                }
                var G__29051 = cljs.core.next.call(null, seq__29004_29040__$1);
                var G__29052 = null;
                var G__29053 = 0;
                var G__29054 = 0;
                seq__29004_29026 = G__29051;
                chunk__29006_29027 = G__29052;
                count__29007_29028 = G__29053;
                i__29008_29029 = G__29054;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__29055 = seq__28994_29019;
        var G__29056 = chunk__29001_29020;
        var G__29057 = count__29002_29021;
        var G__29058 = i__29003_29022 + 1;
        seq__28994_29019 = G__29055;
        chunk__29001_29020 = G__29056;
        count__29002_29021 = G__29057;
        i__29003_29022 = G__29058;
        continue;
      } else {
        var temp__4092__auto___29059 = cljs.core.seq.call(null, seq__28994_29019);
        if (temp__4092__auto___29059) {
          var seq__28994_29060__$1 = temp__4092__auto___29059;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28994_29060__$1)) {
            var c__4197__auto___29061 = cljs.core.chunk_first.call(null, seq__28994_29060__$1);
            var G__29062 = cljs.core.chunk_rest.call(null, seq__28994_29060__$1);
            var G__29063 = c__4197__auto___29061;
            var G__29064 = cljs.core.count.call(null, c__4197__auto___29061);
            var G__29065 = 0;
            seq__28994_29019 = G__29062;
            chunk__29001_29020 = G__29063;
            count__29002_29021 = G__29064;
            i__29003_29022 = G__29065;
            continue;
          } else {
            var vec__29013_29066 = cljs.core.first.call(null, seq__28994_29060__$1);
            var orig_type_29067 = cljs.core.nth.call(null, vec__29013_29066, 0, null);
            var f_29068 = cljs.core.nth.call(null, vec__29013_29066, 1, null);
            var seq__28995_29069 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_29067, new cljs.core.PersistentArrayMap.fromArray([orig_type_29067, cljs.core.identity], true, false)));
            var chunk__28997_29070 = null;
            var count__28998_29071 = 0;
            var i__28999_29072 = 0;
            while (true) {
              if (i__28999_29072 < count__28998_29071) {
                var vec__29014_29073 = cljs.core._nth.call(null, chunk__28997_29070, i__28999_29072);
                var actual_type_29074 = cljs.core.nth.call(null, vec__29014_29073, 0, null);
                var __29075 = cljs.core.nth.call(null, vec__29014_29073, 1, null);
                var keys_29076 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_29018, actual_type_29074, f_29068], null);
                var canonical_f_29077 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_29017), keys_29076);
                dommy.core.update_event_listeners_BANG_.call(null, elem_29017, dommy.utils.dissoc_in, keys_29076);
                if (cljs.core.truth_(elem_29017.removeEventListener)) {
                  elem_29017.removeEventListener(cljs.core.name.call(null, actual_type_29074), canonical_f_29077);
                } else {
                  elem_29017.detachEvent(cljs.core.name.call(null, actual_type_29074), canonical_f_29077);
                }
                var G__29078 = seq__28995_29069;
                var G__29079 = chunk__28997_29070;
                var G__29080 = count__28998_29071;
                var G__29081 = i__28999_29072 + 1;
                seq__28995_29069 = G__29078;
                chunk__28997_29070 = G__29079;
                count__28998_29071 = G__29080;
                i__28999_29072 = G__29081;
                continue;
              } else {
                var temp__4092__auto___29082__$1 = cljs.core.seq.call(null, seq__28995_29069);
                if (temp__4092__auto___29082__$1) {
                  var seq__28995_29083__$1 = temp__4092__auto___29082__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__28995_29083__$1)) {
                    var c__4197__auto___29084 = cljs.core.chunk_first.call(null, seq__28995_29083__$1);
                    var G__29085 = cljs.core.chunk_rest.call(null, seq__28995_29083__$1);
                    var G__29086 = c__4197__auto___29084;
                    var G__29087 = cljs.core.count.call(null, c__4197__auto___29084);
                    var G__29088 = 0;
                    seq__28995_29069 = G__29085;
                    chunk__28997_29070 = G__29086;
                    count__28998_29071 = G__29087;
                    i__28999_29072 = G__29088;
                    continue;
                  } else {
                    var vec__29015_29089 = cljs.core.first.call(null, seq__28995_29083__$1);
                    var actual_type_29090 = cljs.core.nth.call(null, vec__29015_29089, 0, null);
                    var __29091 = cljs.core.nth.call(null, vec__29015_29089, 1, null);
                    var keys_29092 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_29018, actual_type_29090, f_29068], null);
                    var canonical_f_29093 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_29017), keys_29092);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_29017, dommy.utils.dissoc_in, keys_29092);
                    if (cljs.core.truth_(elem_29017.removeEventListener)) {
                      elem_29017.removeEventListener(cljs.core.name.call(null, actual_type_29090), canonical_f_29093);
                    } else {
                      elem_29017.detachEvent(cljs.core.name.call(null, actual_type_29090), canonical_f_29093);
                    }
                    var G__29094 = cljs.core.next.call(null, seq__28995_29083__$1);
                    var G__29095 = null;
                    var G__29096 = 0;
                    var G__29097 = 0;
                    seq__28995_29069 = G__29094;
                    chunk__28997_29070 = G__29095;
                    count__28998_29071 = G__29096;
                    i__28999_29072 = G__29097;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__29098 = cljs.core.next.call(null, seq__28994_29060__$1);
            var G__29099 = null;
            var G__29100 = 0;
            var G__29101 = 0;
            seq__28994_29019 = G__29098;
            chunk__29001_29020 = G__29099;
            count__29002_29021 = G__29100;
            i__29003_29022 = G__29101;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__29102) {
    var elem_sel = cljs.core.first(arglist__29102);
    var type_fs = cljs.core.rest(arglist__29102);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__29110_29117 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_29118 = cljs.core.nth.call(null, vec__29110_29117, 0, null);
    var selector_29119 = cljs.core.nth.call(null, vec__29110_29117, 1, null);
    var seq__29111_29120 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__29112_29121 = null;
    var count__29113_29122 = 0;
    var i__29114_29123 = 0;
    while (true) {
      if (i__29114_29123 < count__29113_29122) {
        var vec__29115_29124 = cljs.core._nth.call(null, chunk__29112_29121, i__29114_29123);
        var type_29125 = cljs.core.nth.call(null, vec__29115_29124, 0, null);
        var f_29126 = cljs.core.nth.call(null, vec__29115_29124, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_29125, function(seq__29111_29120, chunk__29112_29121, count__29113_29122, i__29114_29123, vec__29115_29124, type_29125, f_29126) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_29125, this_fn);
            return f_29126.call(null, e);
          };
        }(seq__29111_29120, chunk__29112_29121, count__29113_29122, i__29114_29123, vec__29115_29124, type_29125, f_29126));
        var G__29127 = seq__29111_29120;
        var G__29128 = chunk__29112_29121;
        var G__29129 = count__29113_29122;
        var G__29130 = i__29114_29123 + 1;
        seq__29111_29120 = G__29127;
        chunk__29112_29121 = G__29128;
        count__29113_29122 = G__29129;
        i__29114_29123 = G__29130;
        continue;
      } else {
        var temp__4092__auto___29131 = cljs.core.seq.call(null, seq__29111_29120);
        if (temp__4092__auto___29131) {
          var seq__29111_29132__$1 = temp__4092__auto___29131;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29111_29132__$1)) {
            var c__4197__auto___29133 = cljs.core.chunk_first.call(null, seq__29111_29132__$1);
            var G__29134 = cljs.core.chunk_rest.call(null, seq__29111_29132__$1);
            var G__29135 = c__4197__auto___29133;
            var G__29136 = cljs.core.count.call(null, c__4197__auto___29133);
            var G__29137 = 0;
            seq__29111_29120 = G__29134;
            chunk__29112_29121 = G__29135;
            count__29113_29122 = G__29136;
            i__29114_29123 = G__29137;
            continue;
          } else {
            var vec__29116_29138 = cljs.core.first.call(null, seq__29111_29132__$1);
            var type_29139 = cljs.core.nth.call(null, vec__29116_29138, 0, null);
            var f_29140 = cljs.core.nth.call(null, vec__29116_29138, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_29139, function(seq__29111_29120, chunk__29112_29121, count__29113_29122, i__29114_29123, vec__29116_29138, type_29139, f_29140, seq__29111_29132__$1, temp__4092__auto___29131) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_29139, this_fn);
                return f_29140.call(null, e);
              };
            }(seq__29111_29120, chunk__29112_29121, count__29113_29122, i__29114_29123, vec__29116_29138, type_29139, f_29140, seq__29111_29132__$1, temp__4092__auto___29131));
            var G__29141 = cljs.core.next.call(null, seq__29111_29132__$1);
            var G__29142 = null;
            var G__29143 = 0;
            var G__29144 = 0;
            seq__29111_29120 = G__29141;
            chunk__29112_29121 = G__29142;
            count__29113_29122 = G__29143;
            i__29114_29123 = G__29144;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__29145) {
    var elem_sel = cljs.core.first(arglist__29145);
    var type_fs = cljs.core.rest(arglist__29145);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__29146) {
    var vec__29148 = p__29146;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__29148, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1886221157, null), new cljs.core.Symbol(null, "node", "node", -1637144645, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", -1449696112, null))))].join(""));
    }
    var update_event_BANG___$1 = function() {
      var or__3449__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3449__auto__)) {
        return or__3449__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent([cljs.core.str("on"), cljs.core.str(cljs.core.name.call(null, event_type))].join(""), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__29146 = null;
    if (arguments.length > 2) {
      p__29146 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__29146);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__29149) {
    var node = cljs.core.first(arglist__29149);
    arglist__29149 = cljs.core.next(arglist__29149);
    var event_type = cljs.core.first(arglist__29149);
    var p__29146 = cljs.core.rest(arglist__29149);
    return fire_BANG___delegate(node, event_type, p__29146);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("compost.main");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("compost.timer");
goog.require("compost.timer");
goog.require("clojure.string");
goog.require("clojure.string");
compost.main.timer_list = cljs.core.atom.call(null, cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
compost.main.default_title = "{compost}";
compost.main.default_time = "-- : --";
compost.main.default_label = "?";
compost.main.batch_comment = ";; Enter intervals here, with each on its own line.\n;; Lines starting with semicolons (;) will be ignored.\n;; Fields are comma-separated, in this order:\n;; Interval Name, hh:mm:ss";
compost.main.log_enabled = false;
compost.main.timer_event_chan = cljs.core.async.chan.call(null);
compost.main.audio_enabled = cljs.core.atom.call(null, true);
compost.main.short_beep = new Audio("/audio/short-beep.ogg");
compost.main.long_beep = new Audio("/audio/long-beep.ogg");
compost.main.short_beep.load();
compost.main.long_beep.load();
compost.main.log_event_BANG_ = function log_event_BANG_(category, action) {
  return ga("send", "event", category, action);
};
compost.main.start_or_step_timers = function start_or_step_timers(timers) {
  if (cljs.core.not.call(null, cljs.core.some.call(null, compost.timer.running_QMARK_, timers))) {
    var next_timer = compost.timer.next_available_timer.call(null, timers);
    if (!(next_timer == null)) {
      if (cljs.core.truth_(compost.main.log_enabled)) {
        console.log("No timers running, starting timer", next_timer);
      } else {
      }
      cljs.core.async.put_BANG_.call(null, compost.main.timer_event_chan, cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "timer-start", "timer-start", 3842280268), new cljs.core.Keyword(null, "timer", "timer", 1124268727), next_timer], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
      return compost.timer.start_timer.call(null, timers, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(next_timer));
    } else {
      if (cljs.core.truth_(compost.main.log_enabled)) {
        console.log("No timers available.");
      } else {
      }
      cljs.core.async.put_BANG_.call(null, compost.main.timer_event_chan, cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "timers-exhausted", "timers-exhausted", 766053756)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
      return timers;
    }
  } else {
    if (cljs.core.truth_(compost.main.log_enabled)) {
      console.log("Some timers are running, not starting new ones.");
    } else {
    }
    var results = compost.timer.step_timers.call(null, timers);
    cljs.core.async.put_BANG_.call(null, compost.main.timer_event_chan, cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "timer-step", "timer-step", 2629162950), new cljs.core.Keyword(null, "results", "results", 2111450984), results], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
    return results;
  }
};
compost.main.to_padded_string = function to_padded_string(val) {
  return[cljs.core.str(val < 10 ? "0" : ""), cljs.core.str(val)].join("");
};
compost.main.time__GT_strings = function time__GT_strings(time) {
  var hours = Math.floor(time / 3600);
  var minutes = Math.floor(cljs.core.rem.call(null, time, 3600) / 60);
  var seconds = cljs.core.rem.call(null, time, 60);
  return cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "hours", "hours", 1113373313), compost.main.to_padded_string.call(null, hours), new cljs.core.Keyword(null, "minutes", "minutes", 2078806097), compost.main.to_padded_string.call(null, minutes), new cljs.core.Keyword(null, "seconds", "seconds", 2984001009), compost.main.to_padded_string.call(null, seconds)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 
  1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null));
};
compost.main.make_id = function() {
  var make_id = null;
  var make_id__1 = function(timer) {
    return make_id.call(null, timer, null);
  };
  var make_id__2 = function(timer, type) {
    return[cljs.core.str(timer), cljs.core.str(function() {
      var G__9322 = type;
      if (cljs.core._EQ_.call(null, null, G__9322)) {
        return "";
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "time-cell", "time-cell", 1003881428), G__9322)) {
          return "-time";
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "button", "button", 3931183780), G__9322)) {
            return "-btn";
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw Error([cljs.core.str("Invalid ID key "), cljs.core.str(type)].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }())].join("");
  };
  make_id = function(timer, type) {
    switch(arguments.length) {
      case 1:
        return make_id__1.call(this, timer);
      case 2:
        return make_id__2.call(this, timer, type);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_id.cljs$core$IFn$_invoke$arity$1 = make_id__1;
  make_id.cljs$core$IFn$_invoke$arity$2 = make_id__2;
  return make_id;
}();
compost.main.render_time = function render_time(timer) {
  var map__9324 = compost.main.time__GT_strings.call(null, (new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(timer));
  var map__9324__$1 = cljs.core.seq_QMARK_.call(null, map__9324) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9324) : map__9324;
  var seconds = cljs.core.get.call(null, map__9324__$1, new cljs.core.Keyword(null, "seconds", "seconds", 2984001009));
  var minutes = cljs.core.get.call(null, map__9324__$1, new cljs.core.Keyword(null, "minutes", "minutes", 2078806097));
  var hours = cljs.core.get.call(null, map__9324__$1, new cljs.core.Keyword(null, "hours", "hours", 1113373313));
  return[cljs.core.str(hours > 0 ? [cljs.core.str(hours), cljs.core.str(":")].join("") : null), cljs.core.str(minutes), cljs.core.str(":"), cljs.core.str(seconds)].join("");
};
compost.main.render_timer = function render_timer(timer) {
  var map__9333 = timer;
  var map__9333__$1 = cljs.core.seq_QMARK_.call(null, map__9333) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9333) : map__9333;
  var state = cljs.core.get.call(null, map__9333__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var duration = cljs.core.get.call(null, map__9333__$1, new cljs.core.Keyword(null, "duration", "duration", 3316859142));
  var id = cljs.core.get.call(null, map__9333__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var label = cljs.core.get.call(null, map__9333__$1, new cljs.core.Keyword(null, "label", "label", 1116631654));
  var time_string = compost.main.render_time.call(null, timer);
  return dommy.core.add_class_BANG_.call(null, function() {
    var dom9334 = document.createElement("tr");
    dom9334.className = "timer";
    if (cljs.core.truth_((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer))) {
      dom9334.setAttribute("id", (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer));
    } else {
    }
    dom9334.appendChild(function() {
      var dom9335 = document.createElement("td");
      dom9335.className = "name-cell";
      dom9335.appendChild(dommy.template.__GT_node_like.call(null, label));
      return dom9335;
    }());
    dom9334.appendChild(function() {
      var dom9336 = document.createElement("td");
      dom9336.className = "separator-cell";
      dom9336.appendChild(document.createTextNode("-"));
      return dom9336;
    }());
    dom9334.appendChild(function() {
      var dom9337 = document.createElement("td");
      if (cljs.core.truth_(compost.main.make_id.call(null, id, new cljs.core.Keyword(null, "time-cell", "time-cell", 1003881428)))) {
        dom9337.setAttribute("id", compost.main.make_id.call(null, id, new cljs.core.Keyword(null, "time-cell", "time-cell", 1003881428)));
      } else {
      }
      dom9337.appendChild(dommy.template.__GT_node_like.call(null, time_string));
      return dom9337;
    }());
    dom9334.appendChild(function() {
      var dom9338 = document.createElement("td");
      dom9338.className = "button-cell";
      dom9338.appendChild(function() {
        var dom9339 = document.createElement("button");
        if (cljs.core.truth_(compost.main.make_id.call(null, id, new cljs.core.Keyword(null, "button", "button", 3931183780)))) {
          dom9339.setAttribute("id", compost.main.make_id.call(null, id, new cljs.core.Keyword(null, "button", "button", 3931183780)));
        } else {
        }
        dom9339.appendChild(function() {
          var dom9340 = document.createElement("img");
          if ("/img/circle_remove.png") {
            dom9340.setAttribute("src", "/img/circle_remove.png");
          } else {
          }
          if ("Remove") {
            dom9340.setAttribute("alt", "Remove");
          } else {
          }
          return dom9340;
        }());
        return dom9339;
      }());
      return dom9338;
    }());
    return dom9334;
  }(), state);
};
compost.main.render_timers = function render_timers(timers) {
  var dom9342 = document.createElement("table");
  if ("timers-list") {
    dom9342.setAttribute("id", "timers-list");
  } else {
  }
  dom9342.appendChild(dommy.template.__GT_node_like.call(null, cljs.core.map.call(null, compost.main.render_timer, timers)));
  return dom9342;
};
compost.main.validate_number_string = function validate_number_string(num_string) {
  return cljs.core.not.call(null, isNaN(Number(num_string)));
};
compost.main.validate_timer_inputs_BANG_ = function validate_timer_inputs_BANG_() {
  var minutes_field = document.getElementById("interval-minutes");
  var seconds_field = document.getElementById("interval-seconds");
  return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.map.call(null, function(field) {
    if (compost.main.validate_number_string.call(null, dommy.core.value.call(null, field))) {
      dommy.core.remove_class_BANG_.call(null, field, new cljs.core.Keyword(null, "error", "error", 1110689146));
      return true;
    } else {
      return dommy.core.add_class_BANG_.call(null, field, new cljs.core.Keyword(null, "error", "error", 1110689146));
    }
  }, cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minutes_field, seconds_field], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null))));
};
compost.main.read_timer_input_vals_BANG_ = function read_timer_input_vals_BANG_() {
  return cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "label", "label", 1116631654), dommy.core.value.call(null, document.getElementById("interval-desc")), new cljs.core.Keyword(null, "seconds", "seconds", 2984001009), 60 * (dommy.core.value.call(null, document.getElementById("interval-minutes")) | 0) + (dommy.core.value.call(null, document.getElementById("interval-seconds")) | 0)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null));
};
compost.main.add_timer_BANG_ = function add_timer_BANG_() {
  if (compost.main.validate_timer_inputs_BANG_.call(null)) {
    var map__9344 = compost.main.read_timer_input_vals_BANG_.call(null);
    var map__9344__$1 = cljs.core.seq_QMARK_.call(null, map__9344) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9344) : map__9344;
    var seconds = cljs.core.get.call(null, map__9344__$1, new cljs.core.Keyword(null, "seconds", "seconds", 2984001009));
    var label = cljs.core.get.call(null, map__9344__$1, new cljs.core.Keyword(null, "label", "label", 1116631654));
    var new_timer = compost.timer.make_timer_BANG_.call(null, seconds, cljs.core.empty_QMARK_.call(null, label) ? compost.main.default_label : label, new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.Keyword(null, "stop", "stop", 1017445236));
    return cljs.core.swap_BANG_.call(null, compost.main.timer_list, cljs.core.conj, new_timer);
  } else {
    return null;
  }
};
compost.main.delete_timer_BANG_ = function delete_timer_BANG_(id) {
  cljs.core.swap_BANG_.call(null, compost.main.timer_list, function(timers) {
    return cljs.core.into.call(null, cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)), cljs.core.remove.call(null, function(p1__9345_SHARP_) {
      return cljs.core._EQ_.call(null, id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__9345_SHARP_));
    }, timers));
  });
  return compost.main.log_event_BANG_.call(null, "timer", "delete");
};
var js_timer_id_9346 = cljs.core.atom.call(null, null);
compost.main.stop_timers_BANG_ = function stop_timers_BANG_() {
  if (cljs.core.truth_(compost.main.log_enabled)) {
    console.log("Stopping timers.");
  } else {
  }
  return cljs.core.swap_BANG_.call(null, js_timer_id_9346, function(id) {
    if (id == null) {
      return null;
    } else {
      window.clearTimeout(id);
      return null;
    }
  });
};
compost.main.run_timers_BANG_ = function run_timers_BANG_() {
  if (cljs.core.truth_(cljs.core.some.call(null, compost.timer.time_remaining_QMARK_, cljs.core.swap_BANG_.call(null, compost.main.timer_list, compost.main.start_or_step_timers)))) {
    return cljs.core.swap_BANG_.call(null, js_timer_id_9346, function() {
      return window.setTimeout(run_timers_BANG_, 1E3);
    });
  } else {
    return compost.main.stop_timers_BANG_.call(null);
  }
};
compost.main.reset_timers_BANG_ = function reset_timers_BANG_() {
  return cljs.core.swap_BANG_.call(null, compost.main.timer_list, function(p1__9347_SHARP_) {
    return cljs.core.map.call(null, compost.timer.reset, p1__9347_SHARP_);
  });
};
compost.main.attach_listeners_BANG_ = function attach_listeners_BANG_(timers) {
  var seq__9352 = cljs.core.seq.call(null, timers);
  var chunk__9353 = null;
  var count__9354 = 0;
  var i__9355 = 0;
  while (true) {
    if (i__9355 < count__9354) {
      var timer = cljs.core._nth.call(null, chunk__9353, i__9355);
      var id_9356 = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer);
      var G__9357 = seq__9352;
      var G__9358 = chunk__9353;
      var G__9359 = count__9354;
      var G__9360 = i__9355 + 1;
      seq__9352 = G__9357;
      chunk__9353 = G__9358;
      count__9354 = G__9359;
      i__9355 = G__9360;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__9352);
      if (temp__4092__auto__) {
        var seq__9352__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9352__$1)) {
          var c__4216__auto__ = cljs.core.chunk_first.call(null, seq__9352__$1);
          var G__9361 = cljs.core.chunk_rest.call(null, seq__9352__$1);
          var G__9362 = c__4216__auto__;
          var G__9363 = cljs.core.count.call(null, c__4216__auto__);
          var G__9364 = 0;
          seq__9352 = G__9361;
          chunk__9353 = G__9362;
          count__9354 = G__9363;
          i__9355 = G__9364;
          continue;
        } else {
          var timer = cljs.core.first.call(null, seq__9352__$1);
          var id_9365 = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer);
          var G__9366 = cljs.core.next.call(null, seq__9352__$1);
          var G__9367 = null;
          var G__9368 = 0;
          var G__9369 = 0;
          seq__9352 = G__9366;
          chunk__9353 = G__9367;
          count__9354 = G__9368;
          i__9355 = G__9369;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
compost.main.set_description_and_count_BANG_ = function() {
  var set_description_and_count_BANG_ = null;
  var set_description_and_count_BANG___0 = function() {
    return set_description_and_count_BANG_.call(null, compost.main.default_title, compost.main.default_time);
  };
  var set_description_and_count_BANG___2 = function(description, count) {
    dommy.core.set_text_BANG_.call(null, document.getElementById("description"), description);
    return dommy.core.set_text_BANG_.call(null, document.getElementById("count-time"), count);
  };
  set_description_and_count_BANG_ = function(description, count) {
    switch(arguments.length) {
      case 0:
        return set_description_and_count_BANG___0.call(this);
      case 2:
        return set_description_and_count_BANG___2.call(this, description, count);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_description_and_count_BANG_.cljs$core$IFn$_invoke$arity$0 = set_description_and_count_BANG___0;
  set_description_and_count_BANG_.cljs$core$IFn$_invoke$arity$2 = set_description_and_count_BANG___2;
  return set_description_and_count_BANG_;
}();
compost.main.update_classes_BANG_ = function update_classes_BANG_(row, state) {
  var seq__9374 = cljs.core.seq.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stop", "stop", 1017445236), new cljs.core.Keyword(null, "run", "run", 1014017533), new cljs.core.Keyword(null, "complete", "complete", 4709426347)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
  var chunk__9375 = null;
  var count__9376 = 0;
  var i__9377 = 0;
  while (true) {
    if (i__9377 < count__9376) {
      var class$ = cljs.core._nth.call(null, chunk__9375, i__9377);
      if (cljs.core._EQ_.call(null, class$, state)) {
        dommy.core.add_class_BANG_.call(null, row, class$);
      } else {
        dommy.core.remove_class_BANG_.call(null, row, class$);
      }
      var G__9378 = seq__9374;
      var G__9379 = chunk__9375;
      var G__9380 = count__9376;
      var G__9381 = i__9377 + 1;
      seq__9374 = G__9378;
      chunk__9375 = G__9379;
      count__9376 = G__9380;
      i__9377 = G__9381;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__9374);
      if (temp__4092__auto__) {
        var seq__9374__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9374__$1)) {
          var c__4216__auto__ = cljs.core.chunk_first.call(null, seq__9374__$1);
          var G__9382 = cljs.core.chunk_rest.call(null, seq__9374__$1);
          var G__9383 = c__4216__auto__;
          var G__9384 = cljs.core.count.call(null, c__4216__auto__);
          var G__9385 = 0;
          seq__9374 = G__9382;
          chunk__9375 = G__9383;
          count__9376 = G__9384;
          i__9377 = G__9385;
          continue;
        } else {
          var class$ = cljs.core.first.call(null, seq__9374__$1);
          if (cljs.core._EQ_.call(null, class$, state)) {
            dommy.core.add_class_BANG_.call(null, row, class$);
          } else {
            dommy.core.remove_class_BANG_.call(null, row, class$);
          }
          var G__9386 = cljs.core.next.call(null, seq__9374__$1);
          var G__9387 = null;
          var G__9388 = 0;
          var G__9389 = 0;
          seq__9374 = G__9386;
          chunk__9375 = G__9387;
          count__9376 = G__9388;
          i__9377 = G__9389;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
compost.main.update_timer_BANG_ = function update_timer_BANG_(timer) {
  var timer_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer);
  var row = document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id))].join("")));
  var time = document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id, new cljs.core.Keyword(null, "time-cell", "time-cell", 1003881428)))].join("")));
  compost.main.update_classes_BANG_.call(null, row, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(timer));
  return dommy.core.set_text_BANG_.call(null, time, compost.main.render_time.call(null, timer));
};
compost.main.update_timer_ui_BANG_ = function update_timer_ui_BANG_(timers) {
  if (cljs.core.truth_(compost.main.log_enabled)) {
    console.log("Rendering timer data:", [cljs.core.str(timers)].join(""));
  } else {
  }
  var seq__9403_9415 = cljs.core.seq.call(null, dommy.utils.__GT_Array.call(null, document.getElementsByClassName("timer")));
  var chunk__9405_9416 = null;
  var count__9406_9417 = 0;
  var i__9407_9418 = 0;
  while (true) {
    if (i__9407_9418 < count__9406_9417) {
      var elt_9419 = cljs.core._nth.call(null, chunk__9405_9416, i__9407_9418);
      var id_9420 = dommy.core.attr.call(null, elt_9419, new cljs.core.Keyword(null, "id", "id", 1013907597));
      if (cljs.core.truth_(cljs.core.some.call(null, function(seq__9403_9415, chunk__9405_9416, count__9406_9417, i__9407_9418, id_9420, elt_9419) {
        return function(p1__9390_SHARP_) {
          return cljs.core._EQ_.call(null, id_9420, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__9390_SHARP_));
        };
      }(seq__9403_9415, chunk__9405_9416, count__9406_9417, i__9407_9418, id_9420, elt_9419), timers))) {
      } else {
        dommy.core.remove_BANG_.call(null, elt_9419);
      }
      var G__9421 = seq__9403_9415;
      var G__9422 = chunk__9405_9416;
      var G__9423 = count__9406_9417;
      var G__9424 = i__9407_9418 + 1;
      seq__9403_9415 = G__9421;
      chunk__9405_9416 = G__9422;
      count__9406_9417 = G__9423;
      i__9407_9418 = G__9424;
      continue;
    } else {
      var temp__4092__auto___9425 = cljs.core.seq.call(null, seq__9403_9415);
      if (temp__4092__auto___9425) {
        var seq__9403_9426__$1 = temp__4092__auto___9425;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9403_9426__$1)) {
          var c__4216__auto___9427 = cljs.core.chunk_first.call(null, seq__9403_9426__$1);
          var G__9428 = cljs.core.chunk_rest.call(null, seq__9403_9426__$1);
          var G__9429 = c__4216__auto___9427;
          var G__9430 = cljs.core.count.call(null, c__4216__auto___9427);
          var G__9431 = 0;
          seq__9403_9415 = G__9428;
          chunk__9405_9416 = G__9429;
          count__9406_9417 = G__9430;
          i__9407_9418 = G__9431;
          continue;
        } else {
          var elt_9432 = cljs.core.first.call(null, seq__9403_9426__$1);
          var id_9433 = dommy.core.attr.call(null, elt_9432, new cljs.core.Keyword(null, "id", "id", 1013907597));
          if (cljs.core.truth_(cljs.core.some.call(null, function(seq__9403_9415, chunk__9405_9416, count__9406_9417, i__9407_9418, id_9433, elt_9432, seq__9403_9426__$1, temp__4092__auto___9425) {
            return function(p1__9390_SHARP_) {
              return cljs.core._EQ_.call(null, id_9433, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__9390_SHARP_));
            };
          }(seq__9403_9415, chunk__9405_9416, count__9406_9417, i__9407_9418, id_9433, elt_9432, seq__9403_9426__$1, temp__4092__auto___9425), timers))) {
          } else {
            dommy.core.remove_BANG_.call(null, elt_9432);
          }
          var G__9434 = cljs.core.next.call(null, seq__9403_9426__$1);
          var G__9435 = null;
          var G__9436 = 0;
          var G__9437 = 0;
          seq__9403_9415 = G__9434;
          chunk__9405_9416 = G__9435;
          count__9406_9417 = G__9436;
          i__9407_9418 = G__9437;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var timer_display_9438 = document.getElementById("timers-list");
  var seq__9409_9439 = cljs.core.seq.call(null, timers);
  var chunk__9411_9440 = null;
  var count__9412_9441 = 0;
  var i__9413_9442 = 0;
  while (true) {
    if (i__9413_9442 < count__9412_9441) {
      var timer_9443 = cljs.core._nth.call(null, chunk__9411_9440, i__9413_9442);
      var timer_id_9444 = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer_9443);
      if (cljs.core.truth_(document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id_9444))].join(""))))) {
        compost.main.update_timer_BANG_.call(null, timer_9443);
      } else {
        var node_9445 = compost.main.render_timer.call(null, timer_9443);
        dommy.core.append_BANG_.call(null, timer_display_9438, node_9445);
        dommy.core.listen_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id_9444, new cljs.core.Keyword(null, "button", "button", 3931183780)))].join(""))), new cljs.core.Keyword(null, "click", "click", 1108654330), cljs.core.partial.call(null, compost.main.delete_timer_BANG_, timer_id_9444));
      }
      var G__9446 = seq__9409_9439;
      var G__9447 = chunk__9411_9440;
      var G__9448 = count__9412_9441;
      var G__9449 = i__9413_9442 + 1;
      seq__9409_9439 = G__9446;
      chunk__9411_9440 = G__9447;
      count__9412_9441 = G__9448;
      i__9413_9442 = G__9449;
      continue;
    } else {
      var temp__4092__auto___9450 = cljs.core.seq.call(null, seq__9409_9439);
      if (temp__4092__auto___9450) {
        var seq__9409_9451__$1 = temp__4092__auto___9450;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9409_9451__$1)) {
          var c__4216__auto___9452 = cljs.core.chunk_first.call(null, seq__9409_9451__$1);
          var G__9453 = cljs.core.chunk_rest.call(null, seq__9409_9451__$1);
          var G__9454 = c__4216__auto___9452;
          var G__9455 = cljs.core.count.call(null, c__4216__auto___9452);
          var G__9456 = 0;
          seq__9409_9439 = G__9453;
          chunk__9411_9440 = G__9454;
          count__9412_9441 = G__9455;
          i__9413_9442 = G__9456;
          continue;
        } else {
          var timer_9457 = cljs.core.first.call(null, seq__9409_9451__$1);
          var timer_id_9458 = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(timer_9457);
          if (cljs.core.truth_(document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id_9458))].join(""))))) {
            compost.main.update_timer_BANG_.call(null, timer_9457);
          } else {
            var node_9459 = compost.main.render_timer.call(null, timer_9457);
            dommy.core.append_BANG_.call(null, timer_display_9438, node_9459);
            dommy.core.listen_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, [cljs.core.str("#"), cljs.core.str(compost.main.make_id.call(null, timer_id_9458, new cljs.core.Keyword(null, "button", "button", 3931183780)))].join(""))), new cljs.core.Keyword(null, "click", "click", 1108654330), cljs.core.partial.call(null, compost.main.delete_timer_BANG_, timer_id_9458));
          }
          var G__9460 = cljs.core.next.call(null, seq__9409_9451__$1);
          var G__9461 = null;
          var G__9462 = 0;
          var G__9463 = 0;
          seq__9409_9439 = G__9460;
          chunk__9411_9440 = G__9461;
          count__9412_9441 = G__9462;
          i__9413_9442 = G__9463;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var temp__4090__auto__ = !cljs.core.every_QMARK_.call(null, compost.timer.complete_QMARK_, timers) ? function() {
    var or__3468__auto__ = cljs.core.first.call(null, cljs.core.filter.call(null, compost.timer.running_QMARK_, timers));
    if (cljs.core.truth_(or__3468__auto__)) {
      return or__3468__auto__;
    } else {
      return cljs.core.last.call(null, cljs.core.filter.call(null, compost.timer.complete_QMARK_, timers));
    }
  }() : null;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var active_timer = temp__4090__auto__;
    return compost.main.set_description_and_count_BANG_.call(null, (new cljs.core.Keyword(null, "label", "label", 1116631654)).cljs$core$IFn$_invoke$arity$1(active_timer), compost.main.render_time.call(null, active_timer));
  } else {
    return compost.main.set_description_and_count_BANG_.call(null);
  }
};
compost.main.to_canonical_time = function to_canonical_time(time) {
  var time_strs = compost.main.time__GT_strings.call(null, time);
  return clojure.string.join.call(null, ":", cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "hours", "hours", 1113373313)).cljs$core$IFn$_invoke$arity$1(time_strs), (new cljs.core.Keyword(null, "minutes", "minutes", 2078806097)).cljs$core$IFn$_invoke$arity$1(time_strs), (new cljs.core.Keyword(null, "seconds", "seconds", 2984001009)).cljs$core$IFn$_invoke$arity$1(time_strs)], null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)));
};
compost.main.from_canonical_time = function from_canonical_time(time_string) {
  var vals = clojure.string.split.call(null, clojure.string.trim.call(null, time_string), ":");
  return cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, function(val, mult) {
    return mult * Number(val);
  }, vals, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3600, 60, 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null))));
};
compost.main.to_canonical_text = function to_canonical_text(timers) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, function(timer) {
    return[cljs.core.str((new cljs.core.Keyword(null, "label", "label", 1116631654)).cljs$core$IFn$_invoke$arity$1(timer)), cljs.core.str(", "), cljs.core.str(compost.main.to_canonical_time.call(null, (new cljs.core.Keyword(null, "duration", "duration", 3316859142)).cljs$core$IFn$_invoke$arity$1(timer)))].join("");
  }, timers));
};
compost.main.read_timer_params = function read_timer_params(params_string) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, /^[^,]*,\s*[0-9]{2}:[0-9]{2}:[0-9]{2}\s*$/, params_string))) {
    var params = clojure.string.split.call(null, params_string, ",");
    return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.get.call(null, params, 0), compost.main.from_canonical_time.call(null, cljs.core.get.call(null, params, 1))], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null));
  } else {
    return null;
  }
};
compost.main.timers_from_canonical_text = function timers_from_canonical_text(text) {
  var directives = cljs.core.filter.call(null, function(p1__9464_SHARP_) {
    return cljs.core.not.call(null, cljs.core.re_matches.call(null, /^(;.*|\s*)$/, p1__9464_SHARP_));
  }, clojure.string.split_lines.call(null, text));
  return cljs.core.into.call(null, cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", 1017047278), "/Users/nick/dev/compost/src-cljs/compost/main.cljs"], null)), cljs.core.map.call(null, function(line) {
    var temp__4090__auto__ = compost.main.read_timer_params.call(null, line);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var vec__9466 = temp__4090__auto__;
      var label = cljs.core.nth.call(null, vec__9466, 0, null);
      var duration = cljs.core.nth.call(null, vec__9466, 1, null);
      return compost.timer.make_timer_BANG_.call(null, duration, label, new cljs.core.Keyword(null, "state", "state", 1123661827), new cljs.core.Keyword(null, "stop", "stop", 1017445236));
    } else {
      if (cljs.core.truth_(compost.main.log_enabled)) {
        return console.log("Error!", line, "does not match required format.");
      } else {
        return null;
      }
    }
  }, directives));
};
compost.main.refresh_batch_panel_BANG_ = function refresh_batch_panel_BANG_(timers) {
  return dommy.core.set_value_BANG_.call(null, document.getElementById("batch-input"), [cljs.core.str(compost.main.batch_comment), cljs.core.str("\n"), cljs.core.str(compost.main.to_canonical_text.call(null, timers))].join(""));
};
compost.main.play = function play(sound) {
  return sound.play();
};
compost.main.attach_auto_load_listener = function attach_auto_load_listener(sound) {
  return sound.onpause = function() {
    return sound.load();
  };
};
compost.main.handle_timer_event = function handle_timer_event(ev) {
  if (cljs.core.truth_(function() {
    var and__3456__auto__ = cljs.core.deref.call(null, compost.main.audio_enabled);
    if (cljs.core.truth_(and__3456__auto__)) {
      var and__3456__auto____$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "timer-step", "timer-step", 2629162950), (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(ev));
      if (and__3456__auto____$1) {
        return cljs.core.some.call(null, function(p1__9467_SHARP_) {
          return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "run", "run", 1014017533), (new cljs.core.Keyword(null, "prev-state", "prev-state", 3562322921)).cljs$core$IFn$_invoke$arity$1(p1__9467_SHARP_)) && compost.timer.complete_QMARK_.call(null, p1__9467_SHARP_);
        }, (new cljs.core.Keyword(null, "results", "results", 2111450984)).cljs$core$IFn$_invoke$arity$1(ev));
      } else {
        return and__3456__auto____$1;
      }
    } else {
      return and__3456__auto__;
    }
  }())) {
    return compost.main.play.call(null, compost.main.long_beep);
  } else {
    if (cljs.core.truth_(function() {
      var and__3456__auto__ = cljs.core.deref.call(null, compost.main.audio_enabled);
      if (cljs.core.truth_(and__3456__auto__)) {
        var and__3456__auto____$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "timer-step", "timer-step", 2629162950), (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(ev));
        if (and__3456__auto____$1) {
          return cljs.core.some.call(null, function(p1__9468_SHARP_) {
            return compost.timer.running_QMARK_.call(null, p1__9468_SHARP_) && (3 >= (new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(p1__9468_SHARP_) && 0 < (new cljs.core.Keyword(null, "remaining", "remaining", 1883742568)).cljs$core$IFn$_invoke$arity$1(p1__9468_SHARP_));
          }, (new cljs.core.Keyword(null, "results", "results", 2111450984)).cljs$core$IFn$_invoke$arity$1(ev));
        } else {
          return and__3456__auto____$1;
        }
      } else {
        return and__3456__auto__;
      }
    }())) {
      return compost.main.play.call(null, compost.main.short_beep);
    } else {
      return null;
    }
  }
};
compost.main.set_up = function set_up() {
  cljs.core.add_watch.call(null, compost.main.timer_list, new cljs.core.Keyword(null, "rerender", "rerender", 634753275), function(key, ref, old, new$) {
    if (cljs.core.truth_(compost.main.log_enabled)) {
      console.log("New state: ", [cljs.core.str(new$)].join(""));
    } else {
    }
    return compost.main.update_timer_ui_BANG_.call(null, new$);
  });
  var c__5603__auto___9527 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5604__auto__ = function() {
      var switch__5588__auto__ = function(state_9510) {
        var state_val_9511 = state_9510[1];
        if (state_val_9511 === 7) {
          var inst_9506 = state_9510[2];
          var state_9510__$1 = state_9510;
          var statearr_9512_9528 = state_9510__$1;
          statearr_9512_9528[2] = inst_9506;
          statearr_9512_9528[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_9511 === 6) {
            var state_9510__$1 = state_9510;
            var statearr_9513_9529 = state_9510__$1;
            statearr_9513_9529[2] = null;
            statearr_9513_9529[1] = 7;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_9511 === 5) {
              var inst_9500 = state_9510[7];
              var inst_9502 = compost.main.handle_timer_event.call(null, inst_9500);
              var state_9510__$1 = function() {
                var statearr_9514 = state_9510;
                statearr_9514[8] = inst_9502;
                return statearr_9514;
              }();
              var statearr_9515_9530 = state_9510__$1;
              statearr_9515_9530[2] = null;
              statearr_9515_9530[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_9511 === 4) {
                var inst_9500 = state_9510[7];
                var inst_9500__$1 = state_9510[2];
                var state_9510__$1 = function() {
                  var statearr_9516 = state_9510;
                  statearr_9516[7] = inst_9500__$1;
                  return statearr_9516;
                }();
                if (cljs.core.truth_(inst_9500__$1)) {
                  var statearr_9517_9531 = state_9510__$1;
                  statearr_9517_9531[1] = 5;
                } else {
                  var statearr_9518_9532 = state_9510__$1;
                  statearr_9518_9532[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_9511 === 3) {
                  var inst_9508 = state_9510[2];
                  var state_9510__$1 = state_9510;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9510__$1, inst_9508);
                } else {
                  if (state_val_9511 === 2) {
                    var state_9510__$1 = state_9510;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9510__$1, 4, compost.main.timer_event_chan);
                  } else {
                    if (state_val_9511 === 1) {
                      var state_9510__$1 = state_9510;
                      var statearr_9519_9533 = state_9510__$1;
                      statearr_9519_9533[2] = null;
                      statearr_9519_9533[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5588__auto__) {
        return function() {
          var state_machine__5589__auto__ = null;
          var state_machine__5589__auto____0 = function() {
            var statearr_9523 = [null, null, null, null, null, null, null, null, null];
            statearr_9523[0] = state_machine__5589__auto__;
            statearr_9523[1] = 1;
            return statearr_9523;
          };
          var state_machine__5589__auto____1 = function(state_9510) {
            while (true) {
              var ret_value__5590__auto__ = function() {
                try {
                  while (true) {
                    var result__5591__auto__ = switch__5588__auto__.call(null, state_9510);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5591__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__5591__auto__;
                    }
                    break;
                  }
                } catch (e9524) {
                  if (e9524 instanceof Object) {
                    var ex__5592__auto__ = e9524;
                    var statearr_9525_9534 = state_9510;
                    statearr_9525_9534[5] = ex__5592__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_9510);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e9524;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5590__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__9535 = state_9510;
                state_9510 = G__9535;
                continue;
              } else {
                return ret_value__5590__auto__;
              }
              break;
            }
          };
          state_machine__5589__auto__ = function(state_9510) {
            switch(arguments.length) {
              case 0:
                return state_machine__5589__auto____0.call(this);
              case 1:
                return state_machine__5589__auto____1.call(this, state_9510);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5589__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5589__auto____0;
          state_machine__5589__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5589__auto____1;
          return state_machine__5589__auto__;
        }();
      }(switch__5588__auto__);
    }();
    var state__5605__auto__ = function() {
      var statearr_9526 = f__5604__auto__.call(null);
      statearr_9526[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5603__auto___9527;
      return statearr_9526;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5605__auto__);
  });
  compost.main.attach_auto_load_listener.call(null, compost.main.long_beep);
  compost.main.attach_auto_load_listener.call(null, compost.main.short_beep);
  dommy.core.listen_BANG_.call(null, document.getElementById("add-timer-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "timer", "create");
    return compost.main.add_timer_BANG_.call(null);
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("start-timer-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "timer", "start");
    return compost.main.run_timers_BANG_.call(null);
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("stop-timer-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "timer", "stop");
    return compost.main.stop_timers_BANG_.call(null);
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("reset-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "timer", "reset");
    compost.main.stop_timers_BANG_.call(null);
    return compost.main.reset_timers_BANG_.call(null);
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("mute-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "audio", "mute");
    cljs.core.reset_BANG_.call(null, compost.main.audio_enabled, true);
    document.getElementById("volume-up-btn").hidden = false;
    return document.getElementById("mute-btn").hidden = true;
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("volume-up-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.log_event_BANG_.call(null, "audio", "unmute");
    cljs.core.reset_BANG_.call(null, compost.main.audio_enabled, false);
    document.getElementById("volume-up-btn").hidden = true;
    return document.getElementById("mute-btn").hidden = false;
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("batch-toggle-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    if (cljs.core.truth_(dommy.core.has_class_QMARK_.call(null, dommy.core.toggle_class_BANG_.call(null, document.getElementById("batch-panel"), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)))) {
      return compost.main.log_event_BANG_.call(null, "batch", "hide");
    } else {
      compost.main.refresh_batch_panel_BANG_.call(null, cljs.core.deref.call(null, compost.main.timer_list));
      return compost.main.log_event_BANG_.call(null, "batch", "show");
    }
  });
  dommy.core.listen_BANG_.call(null, document.getElementById("batch-cancel-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    compost.main.refresh_batch_panel_BANG_.call(null, cljs.core.deref.call(null, compost.main.timer_list));
    return compost.main.log_event_BANG_.call(null, "batch", "cancel");
  });
  return dommy.core.listen_BANG_.call(null, document.getElementById("batch-save-btn"), new cljs.core.Keyword(null, "click", "click", 1108654330), function() {
    var new_timers = compost.main.timers_from_canonical_text.call(null, dommy.core.value.call(null, document.getElementById("batch-input")));
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.nil_QMARK_, new_timers))) {
      if (cljs.core.truth_(compost.main.log_enabled)) {
        return console.log("There was an error parsing batch input");
      } else {
        return null;
      }
    } else {
      cljs.core.reset_BANG_.call(null, compost.main.timer_list, new_timers);
      return compost.main.log_event_BANG_.call(null, "batch", "save");
    }
  });
};
